import _objectSpread from '@babel/runtime/helpers/esm/objectSpread2';
import { o as observable } from '../../../dist/observable-01534ea8.esm.js';

/**
 * @internal
 */
function transformOperationResult(result, transformer) {
  if ('error' in result.data) {
    return _objectSpread(_objectSpread({}, result), {}, {
      data: _objectSpread(_objectSpread({}, result.data), {}, {
        error: transformer.deserialize(result.data.error)
      })
    });
  }

  if (result.data.result.type !== 'data') {
    return result;
  }

  return _objectSpread(_objectSpread({}, result), {}, {
    data: _objectSpread(_objectSpread({}, result.data), {}, {
      result: _objectSpread(_objectSpread({}, result.data.result), {}, {
        data: transformer.deserialize(result.data.result.data)
      })
    })
  });
}

function transformerLink(transformer) {
  var _transformer = transformer ? 'input' in transformer ? {
    serialize: transformer.input.serialize,
    deserialize: transformer.output.deserialize
  } : transformer : {
    serialize: function serialize(data) {
      return data;
    },
    deserialize: function deserialize(data) {
      return data;
    }
  };

  return function () {
    return function (props) {
      var input = _transformer.serialize(props.op.input);

      return observable(function (observer) {
        var next$ = props.next(_objectSpread(_objectSpread({}, props.op), {}, {
          input: input
        })).subscribe({
          next: function next(value) {
            var transformed = transformOperationResult(value, _transformer);
            observer.next(transformed);
          },
          error: observer.error,
          complete: observer.complete
        });
        return next$;
      });
    };
  };
}

export { transformerLink };
