"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handlePageReq = void 0;
const basepath_1 = require("./basepath");
const locale_1 = require("./locale");
const match_1 = require("../match");
const notfound_1 = require("./notfound");
const rewrite_1 = require("./rewrite");
const pageHtml = (localeUri) => {
    if (localeUri == "/") {
        return "pages/index.html";
    }
    return `pages${localeUri}.html`;
};
const handlePageReq = (req, uri, manifest, routesManifest, isPreview, isRewrite) => {
    var _a, _b;
    const { pages } = manifest;
    const localeUri = (0, basepath_1.normalise)((0, locale_1.addDefaultLocaleToPath)(uri, routesManifest, (0, locale_1.findDomainLocale)(req, routesManifest)), routesManifest);
    if (pages.html.nonDynamic[localeUri]) {
        const nonLocaleUri = (0, locale_1.dropLocaleFromPath)(localeUri, routesManifest);
        const statusCode = nonLocaleUri === "/404" ? 404 : nonLocaleUri === "/500" ? 500 : undefined;
        return {
            isData: false,
            isStatic: true,
            file: pages.html.nonDynamic[localeUri],
            statusCode
        };
    }
    if (pages.ssg.nonDynamic[localeUri] && !isPreview) {
        const ssg = pages.ssg.nonDynamic[localeUri];
        const route = (_a = ssg.srcRoute) !== null && _a !== void 0 ? _a : localeUri;
        const nonLocaleUri = (0, locale_1.dropLocaleFromPath)(localeUri, routesManifest);
        const statusCode = nonLocaleUri === "/404" ? 404 : nonLocaleUri === "/500" ? 500 : undefined;
        return {
            isData: false,
            isStatic: true,
            file: pageHtml(localeUri),
            // page JS path is from SSR entries in manifest
            page: pages.ssr.nonDynamic[route] || pages.ssr.dynamic[route],
            revalidate: ssg.initialRevalidateSeconds,
            statusCode
        };
    }
    if (((_b = pages.ssg.notFound) !== null && _b !== void 0 ? _b : {})[localeUri] && !isPreview) {
        return (0, notfound_1.notFoundPage)(uri, manifest, routesManifest);
    }
    if (pages.ssr.nonDynamic[localeUri]) {
        return {
            isData: false,
            isRender: true,
            page: pages.ssr.nonDynamic[localeUri]
        };
    }
    const rewrite = !isRewrite && (0, rewrite_1.getRewritePath)(req, uri, routesManifest, manifest);
    if (rewrite) {
        const [path, querystring] = rewrite.split("?");
        if ((0, rewrite_1.isExternalRewrite)(path)) {
            return {
                isExternal: true,
                path,
                querystring
            };
        }
        const route = (0, exports.handlePageReq)(req, path, manifest, routesManifest, isPreview, true);
        return {
            ...route,
            querystring
        };
    }
    const dynamic = (0, match_1.matchDynamicRoute)(localeUri, pages.dynamic);
    const dynamicSSG = dynamic && pages.ssg.dynamic[dynamic];
    if (dynamicSSG && !isPreview) {
        return {
            isData: false,
            isStatic: true,
            file: pageHtml(localeUri),
            page: dynamic ? pages.ssr.dynamic[dynamic] : undefined,
            fallback: dynamicSSG.fallback
        };
    }
    const dynamicSSR = dynamic && pages.ssr.dynamic[dynamic];
    if (dynamicSSR) {
        return {
            isData: false,
            isRender: true,
            page: dynamicSSR
        };
    }
    const dynamicHTML = dynamic && pages.html.dynamic[dynamic];
    if (dynamicHTML) {
        return {
            isData: false,
            isStatic: true,
            file: dynamicHTML
        };
    }
    return (0, notfound_1.notFoundPage)(uri, manifest, routesManifest);
};
exports.handlePageReq = handlePageReq;
