"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.build = void 0;
const esbuild = __importStar(require("esbuild"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const __1 = require("..");
const path_1 = __importDefault(require("path"));
async function build(root, config) {
    const buildDir = __1.State.stacksPath(root);
    const pkg = await fs_extra_1.default.readJson(path_1.default.join(root, "package.json"));
    const entry = path_1.default.join(root, config.main);
    if (!fs_extra_1.default.existsSync(entry))
        throw new Error(`Cannot find app handler. Make sure to add a "${config.main}" file`);
    await esbuild.build({
        external: [
            "aws-cdk-lib",
            ...Object.keys({
                ...pkg.devDependencies,
                ...pkg.dependencies,
                ...pkg.peerDependencies,
            }),
        ],
        bundle: true,
        format: "cjs",
        sourcemap: true,
        platform: "node",
        target: "node14",
        outdir: buildDir,
        entryPoints: [entry],
    });
}
exports.build = build;
