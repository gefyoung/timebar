"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useLocalServer = void 0;
const immer_1 = require("immer");
immer_1.enablePatches();
const ws_1 = __importDefault(require("ws"));
const ws_2 = require("@trpc/server/adapters/ws");
const router_1 = require("./router");
const events_1 = require("../events");
const dendriform_immer_patch_optimiser_1 = require("dendriform-immer-patch-optimiser");
function useLocalServer(opts) {
    let state = {
        app: opts.app,
        stage: opts.stage,
        live: opts.live,
        stacks: {
            status: "idle",
        },
        functions: {},
    };
    const onStateChange = new events_1.EventDelegate();
    const onDeploy = new events_1.EventDelegate();
    // Wire up websocket
    const wss = new ws_1.default.Server({
        port: opts.port,
    });
    const handler = ws_2.applyWSSHandler({
        wss,
        router: router_1.router,
        createContext() {
            return {
                region: opts.region,
                state,
                onStateChange,
                onDeploy,
            };
        },
    });
    process.on("SIGTERM", () => {
        handler.broadcastReconnectNotification();
        wss.close();
    });
    const pending = [];
    function updateState(cb) {
        const [next, patches] = immer_1.produceWithPatches(state, cb);
        if (!patches.length)
            return;
        const scheduled = pending.length;
        pending.push(...dendriform_immer_patch_optimiser_1.optimise(state, patches));
        if (!scheduled)
            setTimeout(() => {
                onStateChange.trigger(pending);
                pending.splice(0, pending.length);
            }, 100);
        state = next;
    }
    return {
        port: opts.port,
        updateState,
        onDeploy,
        updateFunction(id, cb) {
            return updateState((draft) => {
                let func = draft.functions[id];
                if (!func) {
                    func = {
                        warm: false,
                        state: "idle",
                        issues: {},
                        invocations: [],
                    };
                    draft.functions[id] = func;
                }
                cb(func);
            });
        },
    };
}
exports.useLocalServer = useLocalServer;
