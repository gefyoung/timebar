"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.router = void 0;
const trpc = __importStar(require("@trpc/server"));
const aws_sdk_1 = require("aws-sdk");
exports.router = trpc
    .router()
    .query("getCredentials", {
    async resolve({ ctx }) {
        const cfg = new aws_sdk_1.Config();
        const result = await new Promise((res, rej) => cfg.getCredentials((err, c) => {
            if (err) {
                rej(err);
                return;
            }
            res(c);
        }));
        return {
            region: ctx.region,
            credentials: {
                accessKeyId: result.accessKeyId,
                secretAccessKey: result.secretAccessKey,
                sessionToken: result.sessionToken,
            },
        };
    },
})
    .query("getState", {
    async resolve({ ctx }) {
        return ctx.state;
    },
})
    .mutation("deploy", {
    async resolve({ ctx }) {
        return ctx.onDeploy.trigger();
    },
})
    .subscription("onStateChange", {
    async resolve({ ctx }) {
        return new trpc.Subscription((emit) => {
            const fn = ctx.onStateChange.add(emit.data);
            return () => {
                ctx.onStateChange.remove(fn);
            };
        });
    },
});
