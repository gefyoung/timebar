declare const getChildLogger: any, initializeLogger: any;
declare const STACK_DEPLOY_STATUS: {
    PENDING: string;
    DEPLOYING: string;
    SUCCEEDED: string;
    UNCHANGED: string;
    FAILED: string;
    SKIPPED: string;
};
declare const STACK_DESTROY_STATUS: {
    PENDING: string;
    REMOVING: string;
    SUCCEEDED: string;
    FAILED: string;
    SKIPPED: string;
};
declare function getCdkVersion(): any;
declare function synth(cdkOptions: any): any;
declare function diff(cdkOptions: any, stackIds: any): Promise<any>;
declare function deployInit(cdkOptions: any, stackId: any): Promise<{
    stackStates: {
        id: any;
        name: any;
        status: string;
        dependencies: any;
        account: undefined;
        region: any;
        startedAt: undefined;
        endedAt: undefined;
        events: never[];
        eventsFirstEventAt: undefined;
        errorMessage: undefined;
        outputs: undefined;
    }[];
    isCompleted: boolean;
}>;
declare function deployPoll(cdkOptions: any, stackStates: any): Promise<{
    stackStates: any;
    isCompleted: any;
}>;
declare function destroyInit(cdkOptions: any, stackId: any): Promise<{
    stackStates: {
        id: any;
        name: any;
        status: string;
        dependencies: any;
        region: any;
        events: never[];
        eventsFirstEventAt: undefined;
        errorMessage: undefined;
    }[];
    isCompleted: boolean;
}>;
declare function destroyPoll(cdkOptions: any, stackStates: any): Promise<{
    stackStates: any;
    isCompleted: any;
}>;
export * as Util from "./util";
export * from "./update";
export * from "./packager";
export * from "./state";
export * from "./runtime";
export * from "./bridge";
export * from "./stacks";
export * from "./cli";
export * from "./local";
export * from "./telemetry";
export declare const logger: any;
export { diff, synth, deployInit, deployPoll, destroyInit, destroyPoll, getCdkVersion, getChildLogger, initializeLogger, STACK_DEPLOY_STATUS, STACK_DESTROY_STATUS, };
