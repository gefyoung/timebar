"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.trackCli = exports.isEnabled = exports.disable = exports.enable = void 0;
const conf_1 = __importDefault(require("conf"));
const chalk_1 = __importDefault(require("chalk"));
const crypto_1 = require("crypto");
const post_payload_1 = require("./post-payload");
const project_id_1 = require("./project-id");
const environment_1 = require("./environment");
const TELEMETRY_API = "https://telemetry.serverless-stack.com/events";
const TELEMETRY_KEY_ENABLED = "telemetry.enabled";
const TELEMETRY_KEY_NOTIFY_DATE = "telemetry.notifiedAt";
const TELEMETRY_KEY_ID = `telemetry.anonymousId`;
const conf = initializeConf();
const sessionId = crypto_1.randomBytes(32).toString("hex");
const projectId = hash(project_id_1.getRawProjectId());
const anonymousId = getAnonymousId();
notify();
function enable() {
    conf && conf.set(TELEMETRY_KEY_ENABLED, true);
}
exports.enable = enable;
function disable() {
    conf && conf.set(TELEMETRY_KEY_ENABLED, false);
}
exports.disable = disable;
function isEnabled() {
    if (!conf) {
        return false;
    }
    return conf.get(TELEMETRY_KEY_ENABLED, true) !== false;
}
exports.isEnabled = isEnabled;
function trackCli(command) {
    record("CLI_COMMAND", {
        command,
    });
}
exports.trackCli = trackCli;
function initializeConf() {
    try {
        return new conf_1.default({ projectName: "sst" });
    }
    catch (_) {
        return null;
    }
}
function notify() {
    if (!conf || willNotRecord()) {
        return;
    }
    // Do not notify if user has been notified before.
    if (conf.get(TELEMETRY_KEY_NOTIFY_DATE) !== undefined) {
        return;
    }
    conf.set(TELEMETRY_KEY_NOTIFY_DATE, Date.now().toString());
    console.log(`${chalk_1.default.cyan.bold("Attention")}: SST now collects completely anonymous telemetry regarding usage. This is used to guide SST's roadmap.`);
    console.log(`You can learn more, including how to opt-out of this anonymous program, by heading over to:`);
    console.log("https://docs.serverless-stack.com/anonymous-telemetry");
    console.log();
}
function willNotRecord() {
    return !isEnabled() || !!process.env.SST_TELEMETRY_DISABLED;
}
function record(name, properties) {
    if (willNotRecord()) {
        return Promise.resolve();
    }
    const context = {
        anonymousId,
        projectId,
        sessionId,
    };
    return post_payload_1.postPayload(TELEMETRY_API, {
        context,
        environment: environment_1.getEnvironmentData(),
        events: [
            {
                name,
                properties,
            },
        ],
    });
}
function getAnonymousId() {
    const val = conf && conf.get(TELEMETRY_KEY_ID);
    if (val) {
        return val;
    }
    const generated = crypto_1.randomBytes(32).toString("hex");
    conf && conf.set(TELEMETRY_KEY_ID, generated);
    return generated;
}
function hash(payload) {
    return crypto_1.createHash("sha256").update(payload).digest("hex");
}
