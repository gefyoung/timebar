"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.postPayload = void 0;
const async_retry_1 = __importDefault(require("async-retry"));
const https_1 = __importDefault(require("https"));
function postPayload(endpoint, body) {
    return (async_retry_1.default(() => {
        return new Promise((resolve, reject) => {
            const req = https_1.default.request(endpoint, {
                method: "POST",
                headers: { "content-type": "application/json" },
                timeout: 5000,
            }, (resp) => {
                if (resp.statusCode !== 200) {
                    reject(new Error(`Unexpected status code: ${resp.statusCode}`));
                    return;
                }
                resolve();
            });
            req.write(JSON.stringify(body));
            req.end();
        });
    }, { minTimeout: 500, retries: 1, factor: 1 })
        .catch(() => {
        // We swallow errors when telemetry cannot be sent
    })
        // Ensure promise is voided
        .then(() => {
        return;
    }, () => {
        return;
    }));
}
exports.postPayload = postPayload;
