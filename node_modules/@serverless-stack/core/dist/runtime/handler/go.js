"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoHandler = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const state_1 = require("../../state");
const definition_1 = require("./definition");
const GoHandler = (opts) => {
    const artifact = state_1.State.Function.artifactsPath(opts.root, opts.id);
    const target = path_1.default.join(artifact, "handler");
    const full = path_1.default.join(opts.srcPath, opts.handler);
    if (!fs_extra_1.default.existsSync(path_1.default.join(full)))
        throw new Error("Cannot find handler at " + full);
    const build = {
        command: "go",
        args: ["build", "-ldflags", "-s -w", "-o", target, "./" + opts.handler],
        env: {},
    };
    return {
        build: () => {
            fs_extra_1.default.removeSync(artifact);
            fs_extra_1.default.mkdirpSync(artifact);
            return definition_1.buildAsync(opts, build);
        },
        bundle: () => {
            fs_extra_1.default.removeSync(artifact);
            fs_extra_1.default.mkdirpSync(artifact);
            definition_1.buildSync(opts, {
                ...build,
                env: {
                    CGO_ENABLED: "0",
                    GOOS: "linux",
                },
            });
            return {
                handler: "handler",
                directory: artifact,
            };
        },
        run: {
            command: target,
            args: [],
            env: {},
        },
        watcher: {
            include: [path_1.default.join(opts.srcPath, "**/*.go")],
            ignore: [],
        },
    };
};
exports.GoHandler = GoHandler;
