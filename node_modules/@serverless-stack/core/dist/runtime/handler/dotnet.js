"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DotnetHandler = void 0;
const path_1 = __importDefault(require("path"));
const state_1 = require("../../state");
const util_1 = require("../../util");
const fs_extra_1 = __importDefault(require("fs-extra"));
const definition_1 = require("./definition");
const DotnetHandler = (opts) => {
    const dir = state_1.State.Function.artifactsPath(opts.root, path_1.default.join(opts.id, opts.srcPath));
    const target = path_1.default.join(dir, path_1.default.basename(opts.handler).split(":")[0] + ".dll");
    const cmd = {
        command: "dotnet",
        args: [
            "publish",
            "--output",
            dir,
            "--configuration",
            "Release",
            "--framework",
            "netcoreapp3.1",
            "/p:GenerateRuntimeConfigurationFiles=true",
            "/clp:ForceConsoleColor",
            // warnings are not reported for repeated builds by default and this flag
            // does a clean before build. It takes a little longer to run, but the
            // warnings are consistently printed on each build.
            //"/target:Rebuild",
            "--self-contained",
            "false",
            // do not print "Build Engine version"
            "-nologo",
            // only print errors
            "--verbosity",
            process.env.DEBUG ? "minimal" : "quiet",
        ],
        env: {},
    };
    return {
        build: async () => {
            fs_extra_1.default.removeSync(dir);
            fs_extra_1.default.mkdirpSync(dir);
            return definition_1.buildAsync(opts, cmd);
        },
        bundle: () => {
            fs_extra_1.default.removeSync(dir);
            fs_extra_1.default.mkdirpSync(dir);
            definition_1.buildSync(opts, cmd);
            return {
                handler: opts.handler,
                directory: dir,
            };
        },
        run: {
            command: "dotnet",
            args: [
                "exec",
                path_1.default.join(util_1.Paths.OWN_PATH, "../src/", "runtime", "shells", "dotnet-bootstrap", "release", "dotnet-bootstrap.dll"),
                target,
                opts.handler,
            ],
            env: {},
        },
        watcher: {
            include: [
                path_1.default.join(opts.srcPath, "**/*.cs"),
                path_1.default.join(opts.srcPath, "**/*.csx"),
            ],
            ignore: [],
        },
    };
};
exports.DotnetHandler = DotnetHandler;
