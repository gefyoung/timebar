"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PythonHandler = void 0;
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const util_1 = require("../../util");
const pythonBundling_1 = require("./pythonBundling");
const lambda = __importStar(require("aws-cdk-lib/aws-lambda"));
const RUNTIME_MAP = {
    "python2.7": lambda.Runtime.PYTHON_2_7,
    "python3.6": lambda.Runtime.PYTHON_3_6,
    "python3.7": lambda.Runtime.PYTHON_3_7,
    "python3.8": lambda.Runtime.PYTHON_3_8,
    "python3.9": lambda.Runtime.PYTHON_3_9,
};
const PythonHandler = (opts) => {
    const PATH = (() => {
        if (process.env.VIRTUAL_ENV) {
            const runtimeDir = os_1.default.platform() === "win32" ? "Scripts" : "bin";
            return [
                path_1.default.join(process.env.VIRTUAL_ENV, runtimeDir),
                path_1.default.delimiter,
                process.env.PATH,
            ].join("");
        }
        return process.env.PATH;
    })();
    const dir = path_1.default.dirname(opts.handler);
    const [base, ext] = path_1.default.basename(opts.handler).split(".");
    const target = path_1.default.join(opts.srcPath, dir, base);
    return {
        build: async () => [],
        bundle: () => {
            //const artifact =
            // State.Function.artifactsPath(opts.root, opts.id) + ".zip";
            const asset = pythonBundling_1.bundle({
                installCommands: opts.bundle && opts.bundle.installCommands,
                runtime: RUNTIME_MAP[opts.runtime],
                entry: opts.srcPath,
                outputPathSuffix: ".",
            });
            return {
                asset,
                handler: opts.handler,
            };
        },
        run: {
            command: os_1.default.platform() === "win32" ? "python.exe" : opts.runtime.split(".")[0],
            args: [
                "-u",
                path_1.default.join(util_1.Paths.OWN_PATH, "../src", "runtime", "shells", "bootstrap.py"),
                target.split(path_1.default.sep).join("."),
                opts.srcPath,
                ext,
            ],
            env: {
                PATH,
            },
        },
        watcher: {
            include: [path_1.default.join(opts.srcPath, "**/*.py")],
            ignore: [],
        },
    };
};
exports.PythonHandler = PythonHandler;
