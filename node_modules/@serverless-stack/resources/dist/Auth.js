"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Auth = void 0;
const constructs_1 = require("constructs");
const iam = __importStar(require("aws-cdk-lib/aws-iam"));
const cognito = __importStar(require("aws-cdk-lib/aws-cognito"));
const Construct_1 = require("./Construct");
const Function_1 = require("./Function");
const permission_1 = require("./util/permission");
const AuthUserPoolTriggerOperationMapping = {
    createAuthChallenge: cognito.UserPoolOperation.CREATE_AUTH_CHALLENGE,
    customMessage: cognito.UserPoolOperation.CUSTOM_MESSAGE,
    defineAuthChallenge: cognito.UserPoolOperation.DEFINE_AUTH_CHALLENGE,
    postAuthentication: cognito.UserPoolOperation.POST_AUTHENTICATION,
    postConfirmation: cognito.UserPoolOperation.POST_CONFIRMATION,
    preAuthentication: cognito.UserPoolOperation.PRE_AUTHENTICATION,
    preSignUp: cognito.UserPoolOperation.PRE_SIGN_UP,
    preTokenGeneration: cognito.UserPoolOperation.PRE_TOKEN_GENERATION,
    userMigration: cognito.UserPoolOperation.USER_MIGRATION,
    verifyAuthChallengeResponse: cognito.UserPoolOperation.VERIFY_AUTH_CHALLENGE_RESPONSE,
};
class Auth extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        // Handle deprecated props
        this.checkDeprecatedProps(props);
        const root = scope.node.root;
        const { cognito: cognitoProps, auth0, amazon, apple, facebook, google, twitter, identityPool, } = props;
        this.functions = {};
        this.permissionsAttachedForAllTriggers = [];
        ////////////////////
        // Handle Cognito Identity Providers (ie. User Pool)
        ////////////////////
        const cognitoIdentityProviders = [];
        if (cognitoProps) {
            let isUserPoolImported = false;
            // Create User Pool
            if (typeof cognitoProps === "boolean") {
                this.cognitoUserPool = new cognito.UserPool(this, "UserPool", {
                    userPoolName: root.logicalPrefixedName(id),
                    selfSignUpEnabled: true,
                    signInCaseSensitive: false,
                });
            }
            else if (Construct_1.isCDKConstruct(cognitoProps.userPool)) {
                isUserPoolImported = true;
                this.cognitoUserPool = cognitoProps.userPool;
            }
            else {
                // validate `lambdaTriggers` is not specified
                if (cognitoProps.userPool && cognitoProps.userPool.lambdaTriggers) {
                    throw new Error(`Cannot configure the "cognito.userPool.lambdaTriggers" in the Auth construct. Use the "cognito.triggers" instead.`);
                }
                this.cognitoUserPool = new cognito.UserPool(this, "UserPool", Object.assign({ userPoolName: root.logicalPrefixedName(id), selfSignUpEnabled: true, signInCaseSensitive: false }, (cognitoProps.userPool || {})));
                // Create Trigger functions
                const { triggers, defaultFunctionProps } = cognitoProps;
                this.defaultFunctionProps = defaultFunctionProps;
                if (triggers) {
                    Object.entries(triggers).forEach(([triggerKey, triggerValue]) => this.addTrigger(this, triggerKey, triggerValue));
                }
            }
            // Create User Pool Client
            if (typeof cognitoProps === "boolean") {
                this.cognitoUserPoolClient = new cognito.UserPoolClient(this, "UserPoolClient", {
                    userPool: this.cognitoUserPool,
                });
            }
            else if (Construct_1.isCDKConstruct(cognitoProps.userPoolClient)) {
                if (!isUserPoolImported) {
                    throw new Error(`Cannot import the "userPoolClient" when the "userPool" is not imported.`);
                }
                this.cognitoUserPoolClient = cognitoProps.userPoolClient;
            }
            else {
                this.cognitoUserPoolClient = new cognito.UserPoolClient(this, "UserPoolClient", Object.assign({ userPool: this.cognitoUserPool }, (cognitoProps.userPoolClient || {})));
            }
            // Set cognito providers
            cognitoIdentityProviders.push({
                providerName: this.cognitoUserPool.userPoolProviderName,
                clientId: this.cognitoUserPoolClient.userPoolClientId,
            });
        }
        ////////////////////
        // Handle OpenId Connect Providers (ie. Auth0)
        ////////////////////
        const openIdConnectProviderArns = [];
        if (auth0) {
            if (!auth0.domain) {
                throw new Error(`No Auth0 domain defined for the "${id}" Auth`);
            }
            if (!auth0.clientId) {
                throw new Error(`No Auth0 clientId defined for the "${id}" Auth`);
            }
            const provider = new iam.OpenIdConnectProvider(this, "Auth0Provider", {
                url: auth0.domain.startsWith("https://")
                    ? auth0.domain
                    : `https://${auth0.domain}`,
                clientIds: [auth0.clientId],
            });
            openIdConnectProviderArns.push(provider.openIdConnectProviderArn);
        }
        ////////////////////
        // Handle Social Identity Providers
        ////////////////////
        const supportedLoginProviders = {};
        if (amazon) {
            if (!amazon.appId) {
                throw new Error(`No Amazon appId defined for the "${id}" Auth`);
            }
            supportedLoginProviders["www.amazon.com"] = amazon.appId;
        }
        if (facebook) {
            if (!facebook.appId) {
                throw new Error(`No Facebook appId defined for the "${id}" Auth`);
            }
            supportedLoginProviders["graph.facebook.com"] = facebook.appId;
        }
        if (google) {
            if (!google.clientId) {
                throw new Error(`No Google appId defined for the "${id}" Auth`);
            }
            supportedLoginProviders["accounts.google.com"] = google.clientId;
        }
        if (twitter) {
            if (!twitter.consumerKey) {
                throw new Error(`No Twitter consumer key defined for the "${id}" Auth`);
            }
            if (!twitter.consumerSecret) {
                throw new Error(`No Twitter consumer secret defined for the "${id}" Auth`);
            }
            supportedLoginProviders["api.twitter.com"] = `${twitter.consumerKey};${twitter.consumerSecret}`;
        }
        if (apple) {
            if (!apple.servicesId) {
                throw new Error(`No Apple servicesId defined for the "${id}" Auth`);
            }
            supportedLoginProviders["appleid.apple.com"] = apple.servicesId;
        }
        ////////////////////
        // Create Identity Pool
        ////////////////////
        // Create Cognito Identity Pool
        this.cognitoCfnIdentityPool = new cognito.CfnIdentityPool(this, "IdentityPool", Object.assign({ identityPoolName: root.logicalPrefixedName(id), allowUnauthenticatedIdentities: true, cognitoIdentityProviders,
            supportedLoginProviders,
            openIdConnectProviderArns }, (identityPool || {})));
        this.iamAuthRole = this.createAuthRole(this.cognitoCfnIdentityPool);
        this.iamUnauthRole = this.createUnauthRole(this.cognitoCfnIdentityPool);
        // Attach roles to Identity Pool
        new cognito.CfnIdentityPoolRoleAttachment(this, "IdentityPoolRoleAttachment", {
            identityPoolId: this.cognitoCfnIdentityPool.ref,
            roles: {
                authenticated: this.iamAuthRole.roleArn,
                unauthenticated: this.iamUnauthRole.roleArn,
            },
        });
    }
    get cognitoIdentityPoolId() {
        return this.cognitoCfnIdentityPool.ref;
    }
    attachPermissionsForAuthUsers(permissions) {
        permission_1.attachPermissionsToRole(this.iamAuthRole, permissions);
    }
    attachPermissionsForUnauthUsers(permissions) {
        permission_1.attachPermissionsToRole(this.iamUnauthRole, permissions);
    }
    attachPermissionsForTriggers(permissions) {
        Object.values(this.functions).forEach((fn) => fn.attachPermissions(permissions));
        this.permissionsAttachedForAllTriggers.push(permissions);
    }
    attachPermissionsForTrigger(triggerKey, permissions) {
        const fn = this.getFunction(triggerKey);
        if (!fn) {
            throw new Error(`Failed to attach permissions. Trigger "${triggerKey}" does not exist.`);
        }
        fn.attachPermissions(permissions);
    }
    getFunction(triggerKey) {
        return this.functions[triggerKey];
    }
    getConstructMetadata() {
        var _a;
        return {
            type: "Auth",
            data: {
                identityPoolId: this.cognitoCfnIdentityPool.ref,
                userPoolId: (_a = this.cognitoUserPool) === null || _a === void 0 ? void 0 : _a.userPoolId,
                triggers: Object.entries(this.functions).map(([name, fun]) => ({
                    name,
                    fn: Construct_1.getFunctionRef(fun),
                })),
            },
        };
    }
    checkDeprecatedProps(props) {
        var _a;
        if (props.cognitoUserPool) {
            throw new Error(`The "cognitoUserPool" property is deprecated. Use the "cognito.userPool" instead. More details on upgrading - https://docs.serverless-stack.com/constructs/Auth#upgrading-to-v0120`);
        }
        if (props.cognitoUserPoolClient) {
            throw new Error(`The "cognitoUserPoolClient" property is deprecated. Use the "cognito.userPoolClient" instead. More details on upgrading - https://docs.serverless-stack.com/constructs/Auth#upgrading-to-v0120`);
        }
        if (props.cognito) {
            if (props.cognito !== true && ((_a = props.cognito) === null || _a === void 0 ? void 0 : _a.signInAliases)) {
                throw new Error(`The "cognito.signInAliases" property is deprecated. Use the "cognito.userPool.signInAliases" instead. More details on upgrading - https://docs.serverless-stack.com/constructs/Auth#upgrading-to-v0120`);
            }
        }
    }
    addTrigger(scope, triggerKey, triggerValue) {
        // Validate cognito user pool is defined
        if (!this.cognitoUserPool) {
            throw new Error(`Triggers cannot be added. No Cognito UserPool defined for the Auth construct.`);
        }
        // Create Function
        const lambda = Function_1.Function.fromDefinition(scope, triggerKey, triggerValue, this.defaultFunctionProps, `The "defaultFunctionProps" cannot be applied if an instance of a Function construct is passed in. Make sure to define all the triggers using FunctionProps, so the Auth construct can apply the "defaultFunctionProps" to them.`);
        // Create trigger
        const operation = AuthUserPoolTriggerOperationMapping[triggerKey];
        this.cognitoUserPool.addTrigger(operation, lambda);
        // Store function
        this.functions[triggerKey] = lambda;
        return lambda;
    }
    createAuthRole(identityPool) {
        const role = new iam.Role(this, "IdentityPoolAuthRole", {
            assumedBy: new iam.FederatedPrincipal("cognito-identity.amazonaws.com", {
                StringEquals: {
                    "cognito-identity.amazonaws.com:aud": identityPool.ref,
                },
                "ForAnyValue:StringLike": {
                    "cognito-identity.amazonaws.com:amr": "authenticated",
                },
            }, "sts:AssumeRoleWithWebIdentity"),
        });
        role.addToPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: [
                "mobileanalytics:PutEvents",
                "cognito-sync:*",
                "cognito-identity:*",
            ],
            resources: ["*"],
        }));
        return role;
    }
    createUnauthRole(identityPool) {
        const role = new iam.Role(this, "IdentityPoolUnauthRole", {
            assumedBy: new iam.FederatedPrincipal("cognito-identity.amazonaws.com", {
                StringEquals: {
                    "cognito-identity.amazonaws.com:aud": identityPool.ref,
                },
                "ForAnyValue:StringLike": {
                    "cognito-identity.amazonaws.com:amr": "unauthenticated",
                },
            }, "sts:AssumeRoleWithWebIdentity"),
        });
        role.addToPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: ["mobileanalytics:PutEvents", "cognito-sync:*"],
            resources: ["*"],
        }));
        return role;
    }
}
exports.Auth = Auth;
//# sourceMappingURL=data:application/json;base64,