"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RDS = void 0;
const path_1 = __importDefault(require("path"));
const fs = __importStar(require("fs-extra"));
const constructs_1 = require("constructs");
const cdk = __importStar(require("aws-cdk-lib"));
const ec2 = __importStar(require("aws-cdk-lib/aws-ec2"));
const rds = __importStar(require("aws-cdk-lib/aws-rds"));
const lambda = __importStar(require("aws-cdk-lib/aws-lambda"));
const Construct_1 = require("./Construct");
const Function_1 = require("./Function");
/////////////////////
// Construct
/////////////////////
class RDS extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const app = scope.node.root;
        const { rdsServerlessCluster, engine, defaultDatabaseName, migrations } = props || {};
        ////////////////////
        // Create Bucket
        ////////////////////
        const rdsServerlessClusterProps = (rdsServerlessCluster || {});
        this.validateRDSServerlessClusterProps(rdsServerlessClusterProps);
        this.validateRequiredProps(props || {});
        this.engine = engine;
        this.defaultDatabaseName = defaultDatabaseName;
        this.rdsServerlessCluster = new rds.ServerlessCluster(this, "Cluster", Object.assign(Object.assign({ clusterIdentifier: app.logicalPrefixedName(id) }, rdsServerlessClusterProps), { defaultDatabaseName, enableDataApi: true, engine: this.getEngine(engine), vpc: this.getVpc(rdsServerlessClusterProps), vpcSubnets: this.getVpcSubnets(rdsServerlessClusterProps) }));
        ///////////////////////////
        // Create Migrations
        ///////////////////////////
        if (migrations) {
            this.validateMigrationsFileExists(migrations);
            this.migratorFunction = this.createMigrationsFunction(engine, defaultDatabaseName, migrations);
            this.createMigrationCustomResource();
        }
    }
    get clusterArn() {
        return this.rdsServerlessCluster.clusterArn;
    }
    get clusterIdentifier() {
        return this.rdsServerlessCluster.clusterIdentifier;
    }
    get clusterEndpoint() {
        return this.rdsServerlessCluster.clusterEndpoint;
    }
    get secretArn() {
        return this.rdsServerlessCluster.secret.secretArn;
    }
    getConstructMetadata() {
        return {
            type: "RDS",
            data: {
                engine: this.engine,
                secretArn: this.secretArn,
                clusterArn: this.clusterArn,
                clusterIdentifier: this.clusterIdentifier,
                defaultDatabaseName: this.defaultDatabaseName,
                migrator: this.migratorFunction && Construct_1.getFunctionRef(this.migratorFunction),
            },
        };
    }
    validateRDSServerlessClusterProps(props) {
        // Validate "engine" is passed in from the top level
        if (props.engine) {
            throw new Error(`Use "engine" instead of "rdsServerlessCluster.engine" to configure the RDS database engine.`);
        }
        // Validate "defaultDatabaseName" is passed in from the top level
        if (props.defaultDatabaseName) {
            throw new Error(`Use "defaultDatabaseName" instead of "rdsServerlessCluster.defaultDatabaseName" to configure the RDS database engine.`);
        }
        // Validate "enableDataApi" is not passed in
        if (props.enableDataApi === false) {
            throw new Error(`Do not configure the "rdsServerlessCluster.enableDataApi". Data API is always enabled for this construct.`);
        }
    }
    validateRequiredProps(props) {
        if (!props.engine) {
            throw new Error(`Missing "engine" in the "${this.node.id}" RDS`);
        }
        if (!props.defaultDatabaseName) {
            throw new Error(`Missing "defaultDatabaseName" in the "${this.node.id}" RDS`);
        }
    }
    validateMigrationsFileExists(migrations) {
        if (!fs.existsSync(migrations))
            throw new Error(`Cannot find the migrations in "${path_1.default.resolve(migrations)}".`);
    }
    getEngine(engine) {
        if (engine === "mysql5.6") {
            return rds.DatabaseClusterEngine.aurora({
                version: rds.AuroraEngineVersion.VER_10A,
            });
        }
        else if (engine === "mysql5.7") {
            return rds.DatabaseClusterEngine.auroraMysql({
                version: rds.AuroraMysqlEngineVersion.VER_2_07_1,
            });
        }
        else if (engine === "postgresql10.14") {
            return rds.DatabaseClusterEngine.auroraPostgres({
                version: rds.AuroraPostgresEngineVersion.VER_10_14,
            });
        }
        throw new Error(`The specified "engine" is not supported for sst.RDS. Only mysql5.6, mysql5.7, and postgresql10.14 engines are currently supported.`);
    }
    getVpc(props) {
        if (props.vpc) {
            return props.vpc;
        }
        return new ec2.Vpc(this, "vpc", {
            natGateways: 0,
            subnetConfiguration: [
                {
                    cidrMask: 24,
                    name: "public",
                    subnetType: ec2.SubnetType.PUBLIC,
                },
                {
                    cidrMask: 28,
                    name: "rds",
                    subnetType: ec2.SubnetType.PRIVATE_ISOLATED,
                }
            ]
        });
    }
    getVpcSubnets(props) {
        if (props.vpc) {
            return props.vpcSubnets;
        }
        return {
            subnetType: ec2.SubnetType.PRIVATE_ISOLATED,
        };
    }
    createMigrationsFunction(engine, defaultDatabaseName, migrations) {
        const app = this.node.root;
        // path to migration scripts inside the Lambda function
        const migrationsDestination = "sst_rds_migration_scripts";
        // fullpath of the migrator Lambda function
        // Note:
        // - when invoked from `sst build`, __dirname is `resources/dist`
        // - when running resources tests, __dirname is `resources/src`
        // For now we will do `__dirname/../dist` to make both cases work.
        const srcPath = path_1.default.resolve(path_1.default.join(__dirname, "..", "dist", "RDS_migrator"));
        const fn = new Function_1.Function(this, "MigrationFunction", {
            srcPath,
            handler: "index.handler",
            runtime: "nodejs14.x",
            timeout: 900,
            memorySize: 1024,
            environment: {
                RDS_ARN: this.rdsServerlessCluster.clusterArn,
                RDS_SECRET: this.rdsServerlessCluster.secret.secretArn,
                RDS_DATABASE: defaultDatabaseName,
                RDS_ENGINE_MODE: engine === "postgresql10.14" ? "postgres" : "mysql",
                // for live development, perserve the migrations path so the migrator
                // can locate the migration files
                RDS_MIGRATIONS_PATH: app.local
                    ? migrations
                    : migrationsDestination,
            },
            bundle: {
                // Note that we need to generate a relative path of the migrations off the
                // srcPath because sst.Function internally builds the copy "from" path by
                // joining the srcPath and the from path.
                copyFiles: [{
                        from: path_1.default.relative(path_1.default.resolve(srcPath), path_1.default.resolve(migrations)),
                        to: migrationsDestination,
                    }],
            },
        });
        fn.attachPermissions([this.rdsServerlessCluster]);
        return fn;
    }
    createMigrationCustomResource() {
        var _a, _b, _c;
        const app = this.node.root;
        // Create custom resource handler
        const handler = new lambda.Function(this, "MigrationHandler", {
            code: lambda.Code.fromAsset(path_1.default.join(__dirname, "Script")),
            runtime: lambda.Runtime.NODEJS_14_X,
            handler: "index.handler",
            timeout: cdk.Duration.minutes(15),
            memorySize: 1024,
        });
        (_a = this.migratorFunction) === null || _a === void 0 ? void 0 : _a.grantInvoke(handler);
        // Note: "BuiltAt" is set to current timestamp to ensure the Custom
        //       Resource function is run on every update.
        //
        //       Do not use the current timestamp in Live mode, b/c we want the
        //       this custom resource to remain the same in CloudFormation template
        //       when rebuilding infrastructure. Otherwise, there will always be
        //       a change when rebuilding infrastructure b/c the "BuildAt" property
        //       changes on each build.
        const builtAt = app.local ? app.debugStartedAt : Date.now();
        new cdk.CustomResource(this, "MigrationResource", {
            serviceToken: handler.functionArn,
            resourceType: "Custom::SSTScript",
            properties: {
                UserCreateFunction: app.local ? undefined : (_b = this.migratorFunction) === null || _b === void 0 ? void 0 : _b.functionName,
                UserUpdateFunction: app.local ? undefined : (_c = this.migratorFunction) === null || _c === void 0 ? void 0 : _c.functionName,
                UserParams: JSON.stringify({}),
                BuiltAt: builtAt,
            },
        });
    }
}
exports.RDS = RDS;
//# sourceMappingURL=data:application/json;base64,