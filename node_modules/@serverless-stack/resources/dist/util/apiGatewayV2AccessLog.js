"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanupLogGroupName = exports.buildAccessLogData = void 0;
const logs = __importStar(require("aws-cdk-lib/aws-logs"));
const apig = __importStar(require("@aws-cdk/aws-apigatewayv2-alpha"));
const defaultHttpFields = [
    // request info
    `"requestTime":"$context.requestTime"`,
    `"requestId":"$context.requestId"`,
    `"httpMethod":"$context.httpMethod"`,
    `"path":"$context.path"`,
    `"routeKey":"$context.routeKey"`,
    `"status":$context.status`,
    `"responseLatency":$context.responseLatency`,
    // integration info
    `"integrationRequestId":"$context.integration.requestId"`,
    `"integrationStatus":"$context.integration.status"`,
    `"integrationLatency":"$context.integration.latency"`,
    `"integrationServiceStatus":"$context.integration.integrationStatus"`,
    // caller info
    `"ip":"$context.identity.sourceIp"`,
    `"userAgent":"$context.identity.userAgent"`,
    `"cognitoIdentityId":"$context.identity.cognitoIdentityId"`,
];
const defaultWebSocketFields = [
    // request info
    `"requestTime":"$context.requestTime"`,
    `"requestId":"$context.requestId"`,
    `"eventType":"$context.eventType"`,
    `"routeKey":"$context.routeKey"`,
    `"status":$context.status`,
    // integration info
    `"integrationRequestId":"$context.awsEndpointRequestId"`,
    `"integrationStatus":"$context.integrationStatus"`,
    `"integrationLatency":"$context.integrationLatency"`,
    `"integrationServiceStatus":"$context.integration.integrationStatus"`,
    // caller info
    `"ip":"$context.identity.sourceIp"`,
    `"userAgent":"$context.identity.userAgent"`,
    `"cognitoIdentityId":"$context.identity.cognitoIdentityId"`,
    `"connectedAt":"$context.connectedAt"`,
    `"connectionId":"$context.connectionId"`,
];
function buildAccessLogData(scope, accessLog, apiStage, isDefaultStage) {
    if (accessLog === false) {
        return;
    }
    const isWebSocketApi = apiStage instanceof apig.WebSocketStage;
    // note: Access log configuration is not supported by L2 constructs as of CDK v1.85.0. We
    //       need to define it at L1 construct level.
    // create log group
    let logGroup;
    let destinationArn;
    if (accessLog && accessLog.destinationArn) {
        destinationArn = accessLog.destinationArn;
    }
    else {
        const root = scope.node.root;
        const apiName = root.logicalPrefixedName(scope.node.id);
        // Backwards compatibility, only suffix if not default stage
        const logGroupName = "LogGroup" + (isDefaultStage ? "" : apiStage.stageName);
        const retention = (accessLog && accessLog.retention) || "INFINITE";
        const retentionValue = logs.RetentionDays[retention];
        // validate retention
        if (!retentionValue) {
            throw new Error(`Invalid access log retention value "${retention}".`);
        }
        logGroup = new logs.LogGroup(scope, logGroupName, {
            logGroupName: [
                `/aws/vendedlogs/apis`,
                `/${cleanupLogGroupName(apiName)}-${apiStage.api.apiId}`,
                `/${cleanupLogGroupName(apiStage.stageName)}`,
            ].join(""),
            retention: retentionValue,
        });
        destinationArn = logGroup.logGroupArn;
    }
    // get log format
    let format;
    if (accessLog && accessLog.format) {
        format = accessLog.format;
    }
    else if (typeof accessLog === "string") {
        format = accessLog;
    }
    else {
        format = isWebSocketApi
            ? "{" + defaultWebSocketFields.join(",") + "}"
            : "{" + defaultHttpFields.join(",") + "}";
    }
    // get L1 cfnStage construct
    if (!(apiStage === null || apiStage === void 0 ? void 0 : apiStage.node.defaultChild)) {
        throw new Error(`Failed to define the default stage for Http API`);
    }
    // set access log settings
    const cfnStage = apiStage.node.defaultChild;
    cfnStage.accessLogSettings = { format, destinationArn };
    return logGroup;
}
exports.buildAccessLogData = buildAccessLogData;
function cleanupLogGroupName(str) {
    return str.replace(/[^.\-_/#A-Za-z0-9]/g, "");
}
exports.cleanupLogGroupName = cleanupLogGroupName;
//# sourceMappingURL=data:application/json;base64,