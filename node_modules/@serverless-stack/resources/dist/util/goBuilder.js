"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.builder = void 0;
const chalk_1 = __importDefault(require("chalk"));
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
const cross_spawn_1 = __importDefault(require("cross-spawn"));
const lambda = __importStar(require("@aws-cdk/aws-lambda"));
const builder_1 = require("./builder");
function builder(builderProps) {
    const { srcPath, handler, buildDir } = builderProps;
    const handlerPosixPath = (0, builder_1.getHandlerFullPosixPath)(srcPath, handler);
    console.log(chalk_1.default.grey(`Building Lambda function ${handlerPosixPath}`));
    // Check entry path exists
    if (!fs.existsSync(path.join(srcPath, handler))) {
        throw new Error(`Cannot find a handler file at "${srcPath}/${handler}".`);
    }
    const appPath = process.cwd();
    const handlerHash = (0, builder_1.getHandlerHash)(handlerPosixPath);
    const buildOutputPath = path.join(appPath, buildDir, handlerHash);
    // Compile
    compile(srcPath, handler);
    return {
        outCode: lambda.Code.fromAsset(buildOutputPath),
        outHandler: `handler`,
    };
    function compile(srcPath, handler) {
        const response = cross_spawn_1.default.sync("go", [
            "build",
            "-ldflags",
            "-s -w",
            "-o",
            path.join(buildOutputPath, "handler"),
            // specify absolute path b/c if "handler" can be a folder, and a relative path does not work
            path.join(appPath, srcPath, handler),
        ], {
            stdio: "inherit",
            env: Object.assign(Object.assign({}, process.env), { GOOS: "linux", CGO_ENABLED: "0" }),
            cwd: path.join(appPath, srcPath),
        });
        if (response.status !== 0) {
            throw new Error(`There was an problem compiling the handler at "${srcPath}/${handler}".`);
        }
    }
}
exports.builder = builder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29CdWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvZ29CdWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxrREFBMEI7QUFDMUIsMkNBQTZCO0FBQzdCLDZDQUErQjtBQUMvQiw4REFBZ0M7QUFDaEMsNERBQThDO0FBQzlDLHVDQUFvRTtBQWFwRSxTQUFnQixPQUFPLENBQUMsWUFBMEI7SUFDaEQsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEdBQUcsWUFBWSxDQUFDO0lBQ3BELE1BQU0sZ0JBQWdCLEdBQUcsSUFBQSxpQ0FBdUIsRUFBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFbkUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFLLENBQUMsSUFBSSxDQUFDLDRCQUE0QixnQkFBZ0IsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUV4RSwwQkFBMEI7SUFDMUIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsRUFBRTtRQUMvQyxNQUFNLElBQUksS0FBSyxDQUFDLGtDQUFrQyxPQUFPLElBQUksT0FBTyxJQUFJLENBQUMsQ0FBQztLQUMzRTtJQUVELE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUM5QixNQUFNLFdBQVcsR0FBRyxJQUFBLHdCQUFjLEVBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUNyRCxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFbEUsVUFBVTtJQUNWLE9BQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFMUIsT0FBTztRQUNMLE9BQU8sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUM7UUFDL0MsVUFBVSxFQUFFLFNBQVM7S0FDdEIsQ0FBQztJQUVGLFNBQVMsT0FBTyxDQUFDLE9BQWUsRUFBRSxPQUFlO1FBQy9DLE1BQU0sUUFBUSxHQUFHLHFCQUFLLENBQUMsSUFBSSxDQUN6QixJQUFJLEVBQ0o7WUFDRSxPQUFPO1lBQ1AsVUFBVTtZQUNWLE9BQU87WUFDUCxJQUFJO1lBQ0osSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsU0FBUyxDQUFDO1lBQ3JDLDRGQUE0RjtZQUM1RixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDO1NBQ3JDLEVBQ0Q7WUFDRSxLQUFLLEVBQUUsU0FBUztZQUNoQixHQUFHLGtDQUNFLE9BQU8sQ0FBQyxHQUFHLEtBQ2QsSUFBSSxFQUFFLE9BQU8sRUFDYixXQUFXLEVBQUUsR0FBRyxHQUNqQjtZQUNELEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUM7U0FDakMsQ0FDRixDQUFDO1FBRUYsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN6QixNQUFNLElBQUksS0FBSyxDQUNiLGtEQUFrRCxPQUFPLElBQUksT0FBTyxJQUFJLENBQ3pFLENBQUM7U0FDSDtJQUNILENBQUM7QUFDSCxDQUFDO0FBcERELDBCQW9EQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaGFsayBmcm9tIFwiY2hhbGtcIjtcbmltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmcy1leHRyYVwiO1xuaW1wb3J0IHNwYXduIGZyb20gXCJjcm9zcy1zcGF3blwiO1xuaW1wb3J0ICogYXMgbGFtYmRhIGZyb20gXCJAYXdzLWNkay9hd3MtbGFtYmRhXCI7XG5pbXBvcnQgeyBnZXRIYW5kbGVyRnVsbFBvc2l4UGF0aCwgZ2V0SGFuZGxlckhhc2ggfSBmcm9tIFwiLi9idWlsZGVyXCI7XG5cbmludGVyZmFjZSBCdWlsZGVyUHJvcHMge1xuICByZWFkb25seSBzcmNQYXRoOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGhhbmRsZXI6IHN0cmluZztcbiAgcmVhZG9ubHkgYnVpbGREaXI6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIEJ1aWxkZXJPdXRwdXQge1xuICByZWFkb25seSBvdXRDb2RlOiBsYW1iZGEuQXNzZXRDb2RlO1xuICByZWFkb25seSBvdXRIYW5kbGVyOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZGVyKGJ1aWxkZXJQcm9wczogQnVpbGRlclByb3BzKTogQnVpbGRlck91dHB1dCB7XG4gIGNvbnN0IHsgc3JjUGF0aCwgaGFuZGxlciwgYnVpbGREaXIgfSA9IGJ1aWxkZXJQcm9wcztcbiAgY29uc3QgaGFuZGxlclBvc2l4UGF0aCA9IGdldEhhbmRsZXJGdWxsUG9zaXhQYXRoKHNyY1BhdGgsIGhhbmRsZXIpO1xuXG4gIGNvbnNvbGUubG9nKGNoYWxrLmdyZXkoYEJ1aWxkaW5nIExhbWJkYSBmdW5jdGlvbiAke2hhbmRsZXJQb3NpeFBhdGh9YCkpO1xuXG4gIC8vIENoZWNrIGVudHJ5IHBhdGggZXhpc3RzXG4gIGlmICghZnMuZXhpc3RzU3luYyhwYXRoLmpvaW4oc3JjUGF0aCwgaGFuZGxlcikpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZmluZCBhIGhhbmRsZXIgZmlsZSBhdCBcIiR7c3JjUGF0aH0vJHtoYW5kbGVyfVwiLmApO1xuICB9XG5cbiAgY29uc3QgYXBwUGF0aCA9IHByb2Nlc3MuY3dkKCk7XG4gIGNvbnN0IGhhbmRsZXJIYXNoID0gZ2V0SGFuZGxlckhhc2goaGFuZGxlclBvc2l4UGF0aCk7XG4gIGNvbnN0IGJ1aWxkT3V0cHV0UGF0aCA9IHBhdGguam9pbihhcHBQYXRoLCBidWlsZERpciwgaGFuZGxlckhhc2gpO1xuXG4gIC8vIENvbXBpbGVcbiAgY29tcGlsZShzcmNQYXRoLCBoYW5kbGVyKTtcblxuICByZXR1cm4ge1xuICAgIG91dENvZGU6IGxhbWJkYS5Db2RlLmZyb21Bc3NldChidWlsZE91dHB1dFBhdGgpLFxuICAgIG91dEhhbmRsZXI6IGBoYW5kbGVyYCxcbiAgfTtcblxuICBmdW5jdGlvbiBjb21waWxlKHNyY1BhdGg6IHN0cmluZywgaGFuZGxlcjogc3RyaW5nKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBzcGF3bi5zeW5jKFxuICAgICAgXCJnb1wiLFxuICAgICAgW1xuICAgICAgICBcImJ1aWxkXCIsXG4gICAgICAgIFwiLWxkZmxhZ3NcIixcbiAgICAgICAgXCItcyAtd1wiLFxuICAgICAgICBcIi1vXCIsXG4gICAgICAgIHBhdGguam9pbihidWlsZE91dHB1dFBhdGgsIFwiaGFuZGxlclwiKSxcbiAgICAgICAgLy8gc3BlY2lmeSBhYnNvbHV0ZSBwYXRoIGIvYyBpZiBcImhhbmRsZXJcIiBjYW4gYmUgYSBmb2xkZXIsIGFuZCBhIHJlbGF0aXZlIHBhdGggZG9lcyBub3Qgd29ya1xuICAgICAgICBwYXRoLmpvaW4oYXBwUGF0aCwgc3JjUGF0aCwgaGFuZGxlciksXG4gICAgICBdLFxuICAgICAge1xuICAgICAgICBzdGRpbzogXCJpbmhlcml0XCIsXG4gICAgICAgIGVudjoge1xuICAgICAgICAgIC4uLnByb2Nlc3MuZW52LFxuICAgICAgICAgIEdPT1M6IFwibGludXhcIixcbiAgICAgICAgICBDR09fRU5BQkxFRDogXCIwXCIsXG4gICAgICAgIH0sXG4gICAgICAgIGN3ZDogcGF0aC5qb2luKGFwcFBhdGgsIHNyY1BhdGgpLFxuICAgICAgfVxuICAgICk7XG5cbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBUaGVyZSB3YXMgYW4gcHJvYmxlbSBjb21waWxpbmcgdGhlIGhhbmRsZXIgYXQgXCIke3NyY1BhdGh9LyR7aGFuZGxlcn1cIi5gXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuIl19