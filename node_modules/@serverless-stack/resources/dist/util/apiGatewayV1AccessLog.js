"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanupLogGroupName = exports.buildAccessLogData = void 0;
const logs = __importStar(require("aws-cdk-lib/aws-logs"));
const apig = __importStar(require("aws-cdk-lib/aws-apigateway"));
function buildAccessLogData(scope, accessLog) {
    if (accessLog === false) {
        return;
    }
    // note: Access log configuration is not supported by L2 constructs as of CDK v1.85.0. We
    //       need to define it at L1 construct level.
    // create log group
    let logGroup;
    let destination;
    if (accessLog && accessLog.destinationArn) {
        // note: do not set "LogGroupLogDestination" as "logGroup" because we only
        //       want to set "logGroup" if it is newly created. If we decide to
        //       change this behavior at a later date, make sure we change it for
        //       both v1 and v2 API constructs.
        const destinationArn = accessLog
            .destinationArn;
        const destinationLogGroup = logs.LogGroup.fromLogGroupArn(scope, "LogGroup", destinationArn);
        destination = new apig.LogGroupLogDestination(destinationLogGroup);
    }
    else {
        const retention = (accessLog && accessLog.retention) || "INFINITE";
        const retentionValue = logs.RetentionDays[retention];
        // validate retention
        if (!retentionValue) {
            throw new Error(`Invalid access log retention value "${retention}".`);
        }
        logGroup = new logs.LogGroup(scope, "LogGroup", {
            retention: retentionValue,
        });
        destination = new apig.LogGroupLogDestination(logGroup);
    }
    // get log format
    let format;
    if (accessLog && accessLog.format) {
        format = accessLog.format;
    }
    else if (typeof accessLog === "string") {
        format = accessLog;
    }
    else {
        format =
            "{" +
                [
                    // request info
                    `"requestTime":"$context.requestTime"`,
                    `"requestId":"$context.requestId"`,
                    `"httpMethod":"$context.httpMethod"`,
                    `"path":"$context.path"`,
                    `"resourcePath":"$context.resourcePath"`,
                    `"status":$context.status`,
                    `"responseLatency":$context.responseLatency`,
                    `"xrayTraceId":"$context.xrayTraceId"`,
                    // integration info
                    `"integrationRequestId":"$context.integration.requestId"`,
                    `"functionResponseStatus":"$context.integration.status"`,
                    `"integrationLatency":"$context.integration.latency"`,
                    `"integrationServiceStatus":"$context.integration.integrationStatus"`,
                    // caller info
                    `"ip":"$context.identity.sourceIp"`,
                    `"userAgent":"$context.identity.userAgent"`,
                    `"principalId":"$context.authorizer.principalId"`,
                ].join(",") +
                "}";
    }
    const accessLogData = {
        logGroup,
        format: apig.AccessLogFormat.custom(format),
        destination,
    };
    return accessLogData;
}
exports.buildAccessLogData = buildAccessLogData;
function cleanupLogGroupName(str) {
    return str.replace(/[^.\-_/#A-Za-z0-9]/g, "");
}
exports.cleanupLogGroupName = cleanupLogGroupName;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpR2F0ZXdheVYxQWNjZXNzTG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvYXBpR2F0ZXdheVYxQWNjZXNzTG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSwyREFBNkM7QUFDN0MsaUVBQW1EO0FBWW5ELFNBQWdCLGtCQUFrQixDQUNoQyxLQUFnQixFQUNoQixTQUF3RDtJQUV4RCxJQUFJLFNBQVMsS0FBSyxLQUFLLEVBQUU7UUFDdkIsT0FBTztLQUNSO0lBRUQseUZBQXlGO0lBQ3pGLGlEQUFpRDtJQUVqRCxtQkFBbUI7SUFDbkIsSUFBSSxRQUFRLENBQUM7SUFDYixJQUFJLFdBQVcsQ0FBQztJQUNoQixJQUFJLFNBQVMsSUFBSyxTQUE0QixDQUFDLGNBQWMsRUFBRTtRQUM3RCwwRUFBMEU7UUFDMUUsdUVBQXVFO1FBQ3ZFLHlFQUF5RTtRQUN6RSx1Q0FBdUM7UUFDdkMsTUFBTSxjQUFjLEdBQUksU0FBNEI7YUFDakQsY0FBd0IsQ0FBQztRQUM1QixNQUFNLG1CQUFtQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUN2RCxLQUFLLEVBQ0wsVUFBVSxFQUNWLGNBQWMsQ0FDZixDQUFDO1FBQ0YsV0FBVyxHQUFHLElBQUksSUFBSSxDQUFDLHNCQUFzQixDQUFDLG1CQUFtQixDQUFDLENBQUM7S0FDcEU7U0FBTTtRQUNMLE1BQU0sU0FBUyxHQUNiLENBQUMsU0FBUyxJQUFLLFNBQTRCLENBQUMsU0FBUyxDQUFDLElBQUksVUFBVSxDQUFDO1FBQ3ZFLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFckQscUJBQXFCO1FBQ3JCLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQyx1Q0FBdUMsU0FBUyxJQUFJLENBQUMsQ0FBQztTQUN2RTtRQUVELFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRTtZQUM5QyxTQUFTLEVBQUUsY0FBYztTQUMxQixDQUFDLENBQUM7UUFDSCxXQUFXLEdBQUcsSUFBSSxJQUFJLENBQUMsc0JBQXNCLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDekQ7SUFFRCxpQkFBaUI7SUFDakIsSUFBSSxNQUFjLENBQUM7SUFDbkIsSUFBSSxTQUFTLElBQUssU0FBNEIsQ0FBQyxNQUFNLEVBQUU7UUFDckQsTUFBTSxHQUFJLFNBQTRCLENBQUMsTUFBZ0IsQ0FBQztLQUN6RDtTQUFNLElBQUksT0FBTyxTQUFTLEtBQUssUUFBUSxFQUFFO1FBQ3hDLE1BQU0sR0FBRyxTQUFTLENBQUM7S0FDcEI7U0FBTTtRQUNMLE1BQU07WUFDSixHQUFHO2dCQUNIO29CQUNFLGVBQWU7b0JBQ2Ysc0NBQXNDO29CQUN0QyxrQ0FBa0M7b0JBQ2xDLG9DQUFvQztvQkFDcEMsd0JBQXdCO29CQUN4Qix3Q0FBd0M7b0JBQ3hDLDBCQUEwQjtvQkFDMUIsNENBQTRDO29CQUM1QyxzQ0FBc0M7b0JBQ3RDLG1CQUFtQjtvQkFDbkIseURBQXlEO29CQUN6RCx3REFBd0Q7b0JBQ3hELHFEQUFxRDtvQkFDckQscUVBQXFFO29CQUNyRSxjQUFjO29CQUNkLG1DQUFtQztvQkFDbkMsMkNBQTJDO29CQUMzQyxpREFBaUQ7aUJBQ2xELENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztnQkFDWCxHQUFHLENBQUM7S0FDUDtJQUVELE1BQU0sYUFBYSxHQUFHO1FBQ3BCLFFBQVE7UUFDUixNQUFNLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQzNDLFdBQVc7S0FDWixDQUFDO0lBRUYsT0FBTyxhQUFhLENBQUM7QUFDdkIsQ0FBQztBQWxGRCxnREFrRkM7QUFFRCxTQUFnQixtQkFBbUIsQ0FBQyxHQUFXO0lBQzdDLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBRkQsa0RBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0ICogYXMgbG9ncyBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWxvZ3NcIjtcbmltcG9ydCAqIGFzIGFwaWcgZnJvbSBcImF3cy1jZGstbGliL2F3cy1hcGlnYXRld2F5XCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWNjZXNzTG9nUHJvcHMgZXh0ZW5kcyBhcGlnLkNmblN0YWdlLkFjY2Vzc0xvZ1NldHRpbmdQcm9wZXJ0eSB7XG4gIHJldGVudGlvbj86IGtleW9mIHR5cGVvZiBsb2dzLlJldGVudGlvbkRheXM7XG59XG5cbmV4cG9ydCB0eXBlIEFjY2Vzc0xvZ0RhdGEgPSB7XG4gIGxvZ0dyb3VwOiBsb2dzLkxvZ0dyb3VwIHwgdW5kZWZpbmVkO1xuICBmb3JtYXQ6IGFwaWcuQWNjZXNzTG9nRm9ybWF0O1xuICBkZXN0aW5hdGlvbjogYXBpZy5Mb2dHcm91cExvZ0Rlc3RpbmF0aW9uO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkQWNjZXNzTG9nRGF0YShcbiAgc2NvcGU6IENvbnN0cnVjdCxcbiAgYWNjZXNzTG9nOiBib29sZWFuIHwgc3RyaW5nIHwgQWNjZXNzTG9nUHJvcHMgfCB1bmRlZmluZWRcbik6IEFjY2Vzc0xvZ0RhdGEgfCB1bmRlZmluZWQge1xuICBpZiAoYWNjZXNzTG9nID09PSBmYWxzZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIG5vdGU6IEFjY2VzcyBsb2cgY29uZmlndXJhdGlvbiBpcyBub3Qgc3VwcG9ydGVkIGJ5IEwyIGNvbnN0cnVjdHMgYXMgb2YgQ0RLIHYxLjg1LjAuIFdlXG4gIC8vICAgICAgIG5lZWQgdG8gZGVmaW5lIGl0IGF0IEwxIGNvbnN0cnVjdCBsZXZlbC5cblxuICAvLyBjcmVhdGUgbG9nIGdyb3VwXG4gIGxldCBsb2dHcm91cDtcbiAgbGV0IGRlc3RpbmF0aW9uO1xuICBpZiAoYWNjZXNzTG9nICYmIChhY2Nlc3NMb2cgYXMgQWNjZXNzTG9nUHJvcHMpLmRlc3RpbmF0aW9uQXJuKSB7XG4gICAgLy8gbm90ZTogZG8gbm90IHNldCBcIkxvZ0dyb3VwTG9nRGVzdGluYXRpb25cIiBhcyBcImxvZ0dyb3VwXCIgYmVjYXVzZSB3ZSBvbmx5XG4gICAgLy8gICAgICAgd2FudCB0byBzZXQgXCJsb2dHcm91cFwiIGlmIGl0IGlzIG5ld2x5IGNyZWF0ZWQuIElmIHdlIGRlY2lkZSB0b1xuICAgIC8vICAgICAgIGNoYW5nZSB0aGlzIGJlaGF2aW9yIGF0IGEgbGF0ZXIgZGF0ZSwgbWFrZSBzdXJlIHdlIGNoYW5nZSBpdCBmb3JcbiAgICAvLyAgICAgICBib3RoIHYxIGFuZCB2MiBBUEkgY29uc3RydWN0cy5cbiAgICBjb25zdCBkZXN0aW5hdGlvbkFybiA9IChhY2Nlc3NMb2cgYXMgQWNjZXNzTG9nUHJvcHMpXG4gICAgICAuZGVzdGluYXRpb25Bcm4gYXMgc3RyaW5nO1xuICAgIGNvbnN0IGRlc3RpbmF0aW9uTG9nR3JvdXAgPSBsb2dzLkxvZ0dyb3VwLmZyb21Mb2dHcm91cEFybihcbiAgICAgIHNjb3BlLFxuICAgICAgXCJMb2dHcm91cFwiLFxuICAgICAgZGVzdGluYXRpb25Bcm5cbiAgICApO1xuICAgIGRlc3RpbmF0aW9uID0gbmV3IGFwaWcuTG9nR3JvdXBMb2dEZXN0aW5hdGlvbihkZXN0aW5hdGlvbkxvZ0dyb3VwKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCByZXRlbnRpb24gPVxuICAgICAgKGFjY2Vzc0xvZyAmJiAoYWNjZXNzTG9nIGFzIEFjY2Vzc0xvZ1Byb3BzKS5yZXRlbnRpb24pIHx8IFwiSU5GSU5JVEVcIjtcbiAgICBjb25zdCByZXRlbnRpb25WYWx1ZSA9IGxvZ3MuUmV0ZW50aW9uRGF5c1tyZXRlbnRpb25dO1xuXG4gICAgLy8gdmFsaWRhdGUgcmV0ZW50aW9uXG4gICAgaWYgKCFyZXRlbnRpb25WYWx1ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGFjY2VzcyBsb2cgcmV0ZW50aW9uIHZhbHVlIFwiJHtyZXRlbnRpb259XCIuYCk7XG4gICAgfVxuXG4gICAgbG9nR3JvdXAgPSBuZXcgbG9ncy5Mb2dHcm91cChzY29wZSwgXCJMb2dHcm91cFwiLCB7XG4gICAgICByZXRlbnRpb246IHJldGVudGlvblZhbHVlLFxuICAgIH0pO1xuICAgIGRlc3RpbmF0aW9uID0gbmV3IGFwaWcuTG9nR3JvdXBMb2dEZXN0aW5hdGlvbihsb2dHcm91cCk7XG4gIH1cblxuICAvLyBnZXQgbG9nIGZvcm1hdFxuICBsZXQgZm9ybWF0OiBzdHJpbmc7XG4gIGlmIChhY2Nlc3NMb2cgJiYgKGFjY2Vzc0xvZyBhcyBBY2Nlc3NMb2dQcm9wcykuZm9ybWF0KSB7XG4gICAgZm9ybWF0ID0gKGFjY2Vzc0xvZyBhcyBBY2Nlc3NMb2dQcm9wcykuZm9ybWF0IGFzIHN0cmluZztcbiAgfSBlbHNlIGlmICh0eXBlb2YgYWNjZXNzTG9nID09PSBcInN0cmluZ1wiKSB7XG4gICAgZm9ybWF0ID0gYWNjZXNzTG9nO1xuICB9IGVsc2Uge1xuICAgIGZvcm1hdCA9XG4gICAgICBcIntcIiArXG4gICAgICBbXG4gICAgICAgIC8vIHJlcXVlc3QgaW5mb1xuICAgICAgICBgXCJyZXF1ZXN0VGltZVwiOlwiJGNvbnRleHQucmVxdWVzdFRpbWVcImAsXG4gICAgICAgIGBcInJlcXVlc3RJZFwiOlwiJGNvbnRleHQucmVxdWVzdElkXCJgLFxuICAgICAgICBgXCJodHRwTWV0aG9kXCI6XCIkY29udGV4dC5odHRwTWV0aG9kXCJgLFxuICAgICAgICBgXCJwYXRoXCI6XCIkY29udGV4dC5wYXRoXCJgLFxuICAgICAgICBgXCJyZXNvdXJjZVBhdGhcIjpcIiRjb250ZXh0LnJlc291cmNlUGF0aFwiYCxcbiAgICAgICAgYFwic3RhdHVzXCI6JGNvbnRleHQuc3RhdHVzYCwgLy8gaW50ZWdlciB2YWx1ZSwgZG8gbm90IHdyYXAgaW4gcXVvdGVzXG4gICAgICAgIGBcInJlc3BvbnNlTGF0ZW5jeVwiOiRjb250ZXh0LnJlc3BvbnNlTGF0ZW5jeWAsIC8vIGludGVnZXIgdmFsdWUsIGRvIG5vdCB3cmFwIGluIHF1b3Rlc1xuICAgICAgICBgXCJ4cmF5VHJhY2VJZFwiOlwiJGNvbnRleHQueHJheVRyYWNlSWRcImAsXG4gICAgICAgIC8vIGludGVncmF0aW9uIGluZm9cbiAgICAgICAgYFwiaW50ZWdyYXRpb25SZXF1ZXN0SWRcIjpcIiRjb250ZXh0LmludGVncmF0aW9uLnJlcXVlc3RJZFwiYCxcbiAgICAgICAgYFwiZnVuY3Rpb25SZXNwb25zZVN0YXR1c1wiOlwiJGNvbnRleHQuaW50ZWdyYXRpb24uc3RhdHVzXCJgLFxuICAgICAgICBgXCJpbnRlZ3JhdGlvbkxhdGVuY3lcIjpcIiRjb250ZXh0LmludGVncmF0aW9uLmxhdGVuY3lcImAsXG4gICAgICAgIGBcImludGVncmF0aW9uU2VydmljZVN0YXR1c1wiOlwiJGNvbnRleHQuaW50ZWdyYXRpb24uaW50ZWdyYXRpb25TdGF0dXNcImAsXG4gICAgICAgIC8vIGNhbGxlciBpbmZvXG4gICAgICAgIGBcImlwXCI6XCIkY29udGV4dC5pZGVudGl0eS5zb3VyY2VJcFwiYCxcbiAgICAgICAgYFwidXNlckFnZW50XCI6XCIkY29udGV4dC5pZGVudGl0eS51c2VyQWdlbnRcImAsXG4gICAgICAgIGBcInByaW5jaXBhbElkXCI6XCIkY29udGV4dC5hdXRob3JpemVyLnByaW5jaXBhbElkXCJgLFxuICAgICAgXS5qb2luKFwiLFwiKSArXG4gICAgICBcIn1cIjtcbiAgfVxuXG4gIGNvbnN0IGFjY2Vzc0xvZ0RhdGEgPSB7XG4gICAgbG9nR3JvdXAsXG4gICAgZm9ybWF0OiBhcGlnLkFjY2Vzc0xvZ0Zvcm1hdC5jdXN0b20oZm9ybWF0KSxcbiAgICBkZXN0aW5hdGlvbixcbiAgfTtcblxuICByZXR1cm4gYWNjZXNzTG9nRGF0YTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFudXBMb2dHcm91cE5hbWUoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1teLlxcLV8vI0EtWmEtejAtOV0vZywgXCJcIik7XG59XG4iXX0=