import { Construct } from "constructs";
import * as sns from "aws-cdk-lib/aws-sns";
import * as snsSubscriptions from "aws-cdk-lib/aws-sns-subscriptions";
import { SSTConstruct } from "./Construct";
import { Function as Fn, FunctionProps, FunctionDefinition } from "./Function";
import { Queue } from "./Queue";
import { Permissions } from "./util/permission";
export interface TopicProps {
    readonly snsTopic?: sns.ITopic | sns.TopicProps;
    readonly subscribers?: (FunctionDefinition | TopicFunctionSubscriberProps | Queue | TopicQueueSubscriberProps)[];
    readonly defaultFunctionProps?: FunctionProps;
}
export interface TopicFunctionSubscriberProps {
    readonly function: FunctionDefinition;
    readonly subscriberProps?: snsSubscriptions.LambdaSubscriptionProps;
}
export interface TopicQueueSubscriberProps {
    readonly queue: Queue;
    readonly subscriberProps?: snsSubscriptions.SqsSubscriptionProps;
}
export declare class Topic extends Construct implements SSTConstruct {
    readonly snsTopic: sns.Topic;
    private readonly subscribers;
    private readonly permissionsAttachedForAllSubscribers;
    private readonly defaultFunctionProps?;
    constructor(scope: Construct, id: string, props?: TopicProps);
    get topicArn(): string;
    get topicName(): string;
    get subscriberFunctions(): Fn[];
    get snsSubscriptions(): sns.Subscription[];
    addSubscribers(scope: Construct, subscribers: (FunctionDefinition | TopicFunctionSubscriberProps | Queue | TopicQueueSubscriberProps)[]): void;
    attachPermissions(permissions: Permissions): void;
    attachPermissionsToSubscriber(index: number, permissions: Permissions): void;
    getConstructMetadata(): {
        type: "Topic";
        data: {
            topicArn: string;
            subscribers: {
                node: string;
                stack: string;
            }[];
        };
    };
    private addSubscriber;
    private addQueueSubscriber;
    private addFunctionSubscriber;
}
