import { Construct } from "constructs";
import * as logs from "aws-cdk-lib/aws-logs";
import * as route53 from "aws-cdk-lib/aws-route53";
import * as acm from "aws-cdk-lib/aws-certificatemanager";
import * as apig from "aws-cdk-lib/aws-apigateway";
import * as apigV1AccessLog from "./util/apiGatewayV1AccessLog";
import { SSTConstruct } from "./Construct";
import { Function as Fn, FunctionProps, FunctionDefinition } from "./Function";
import { Permissions } from "./util/permission";
export interface ApiGatewayV1ApiProps {
    readonly restApi?: apig.IRestApi | apig.RestApiProps;
    readonly routes?: {
        [key: string]: FunctionDefinition | ApiGatewayV1ApiRouteProps;
    };
    readonly cors?: boolean;
    readonly accessLog?: boolean | string | ApiGatewayV1ApiAcccessLogProps;
    readonly customDomain?: string | ApiGatewayV1ApiCustomDomainProps;
    readonly importedPaths?: {
        [path: string]: string;
    };
    readonly defaultFunctionProps?: FunctionProps;
    readonly defaultAuthorizer?: apig.IAuthorizer;
    readonly defaultAuthorizationType?: apig.AuthorizationType;
    readonly defaultAuthorizationScopes?: string[];
}
export interface ApiGatewayV1ApiRouteProps {
    readonly function: FunctionDefinition;
    readonly methodOptions?: apig.MethodOptions;
    readonly integrationOptions?: apig.LambdaIntegrationOptions;
}
export interface ApiGatewayV1ApiCustomDomainProps {
    readonly domainName: string | apig.IDomainName;
    readonly hostedZone?: string | route53.IHostedZone;
    readonly certificate?: acm.ICertificate;
    readonly path?: string;
    readonly endpointType?: apig.EndpointType;
    readonly mtls?: apig.MTLSConfig;
    readonly securityPolicy?: apig.SecurityPolicy;
}
export declare type ApiGatewayV1ApiAcccessLogProps = apigV1AccessLog.AccessLogProps;
export declare class ApiGatewayV1Api extends Construct implements SSTConstruct {
    readonly restApi: apig.RestApi;
    accessLogGroup?: logs.LogGroup;
    apiGatewayDomain?: apig.DomainName;
    acmCertificate?: acm.Certificate | acm.DnsValidatedCertificate;
    private _deployment?;
    private _customDomainUrl?;
    private importedResources;
    private readonly functions;
    private readonly permissionsAttachedForAllRoutes;
    private readonly defaultFunctionProps?;
    private readonly defaultAuthorizer?;
    private readonly defaultAuthorizationType?;
    private readonly defaultAuthorizationScopes?;
    constructor(scope: Construct, id: string, props?: ApiGatewayV1ApiProps);
    get url(): string;
    get customDomainUrl(): string | undefined;
    get routes(): string[];
    addRoutes(scope: Construct, routes: {
        [key: string]: FunctionDefinition | ApiGatewayV1ApiRouteProps;
    }): void;
    getFunction(routeKey: string): Fn | undefined;
    attachPermissions(permissions: Permissions): void;
    getConstructMetadata(): {
        type: "ApiGatewayV1Api";
        data: {
            customDomainUrl: string | undefined;
            restApiId: string;
            routes: {
                route: string;
                fn: {
                    node: string;
                    stack: string;
                } | undefined;
            }[];
        };
    };
    attachPermissionsToRoute(routeKey: string, permissions: Permissions): void;
    private buildCorsConfig;
    private createGatewayResponseForCors;
    private createCustomDomain;
    private importResources;
    private getResourceForPath;
    private addRoute;
    private buildRouteMethodOptions;
    private isInstanceOfApiRouteProps;
    private normalizeRouteKey;
    private assertDomainNameIsLowerCase;
}
