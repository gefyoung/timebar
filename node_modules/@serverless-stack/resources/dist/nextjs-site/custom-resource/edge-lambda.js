"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const AWS = __importStar(require("aws-sdk"));
AWS.config.logger = console;
const util_1 = require("./util");
const cfnResponse = __importStar(require("./cfn-response"));
const s3 = new AWS.S3({ region: "us-east-1" });
const lambda = new AWS.Lambda({ region: "us-east-1" });
function handler(cfnRequest) {
    return __awaiter(this, void 0, void 0, function* () {
        util_1.log("onEventHandler", cfnRequest);
        // Get bucket name
        const functionName = cfnRequest.RequestType === "Create"
            ? generateFunctionName(cfnRequest.ResourceProperties.FunctionNamePrefix)
            : cfnRequest.PhysicalResourceId.split(":").pop();
        // Process request
        let PhysicalResourceId;
        let Data;
        const bucket = cfnRequest.ResourceProperties.FunctionBucket;
        const params = cfnRequest.ResourceProperties.FunctionParams;
        switch (cfnRequest.RequestType) {
            case "Create": {
                yield copyAsset(bucket, params);
                const ret = yield createFunction(functionName, params);
                PhysicalResourceId = ret.FunctionArn;
                Data = {
                    FunctionArn: ret.FunctionArn,
                };
                break;
            }
            case "Update": {
                const oldParams = cfnRequest.OldResourceProperties.FunctionParams;
                if (isConfigurationChanged(params, oldParams)) {
                    yield updateFunctionConfiguration(functionName, params);
                }
                if (isCodeChanged(params, oldParams)) {
                    yield copyAsset(bucket, params);
                    yield updateFunctionCode(functionName, params);
                }
                PhysicalResourceId = cfnRequest.PhysicalResourceId;
                Data = {
                    FunctionArn: cfnRequest.PhysicalResourceId,
                };
                break;
            }
            case "Delete": {
                yield deleteFunction(functionName);
                break;
            }
            default:
                throw new Error("Unsupported request type");
        }
        // Build response
        return cfnResponse.submitResponse("SUCCESS", Object.assign(Object.assign({}, cfnRequest), { PhysicalResourceId,
            Data }));
    });
}
function generateFunctionName(prefix) {
    const MAX_NAME_LENGTH = 64;
    const length = 20;
    const characters = "abcdefghijklmnopqrstuvwxyz";
    const charactersLength = characters.length;
    let result = `${prefix
        .toLowerCase()
        .slice(0, MAX_NAME_LENGTH - length - 1)}-`;
    for (let i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
}
function copyAsset(bucket, params) {
    return __awaiter(this, void 0, void 0, function* () {
        util_1.log(`copyAsset() called with params`, bucket, params);
        // Copy
        util_1.log(`copy`);
        const resp = yield s3
            .copyObject({
            Bucket: bucket,
            CopySource: `/${params.Code.S3Bucket}/${params.Code.S3Key}`,
            Key: params.Code.S3Key,
        })
            .promise();
        util_1.log(`response`, resp);
        // Update params
        params.Code.S3Bucket = bucket;
    });
}
function createFunction(functionName, params) {
    return __awaiter(this, void 0, void 0, function* () {
        util_1.log(`createFunction() called with params`, params);
        const resp = yield lambda
            .createFunction(Object.assign(Object.assign({}, params), { FunctionName: functionName }))
            .promise();
        util_1.log(`response`, resp);
        return { FunctionArn: resp.FunctionArn };
    });
}
function updateFunctionConfiguration(functionName, params) {
    return __awaiter(this, void 0, void 0, function* () {
        util_1.log(`updateFunctionConfiguration() called with params`, params);
        const resp = yield lambda
            .updateFunctionConfiguration(Object.assign(Object.assign({}, params), { Code: undefined }))
            .promise();
        util_1.log(`response`, resp);
    });
}
function updateFunctionCode(functionName, params) {
    return __awaiter(this, void 0, void 0, function* () {
        util_1.log(`updateFunctionCode() called with params`, params);
        const resp = yield lambda
            .updateFunctionCode(Object.assign({ FunctionName: functionName, Publish: false }, params.Code))
            .promise();
        util_1.log(`response`, resp);
    });
}
function deleteFunction(functionName) {
    return __awaiter(this, void 0, void 0, function* () {
        util_1.log(`deleteFunction() called with functionName`, functionName);
        const resp = yield lambda
            .deleteFunction({
            FunctionName: functionName,
        })
            .promise();
        util_1.log(`response`, resp);
    });
}
function isConfigurationChanged(params, oldParams) {
    return (Object.keys(params).length !== Object.keys(params).length ||
        ["Description", "Handler", "Runtime", "MemorySize", "Timeout", "Role"].some((p) => params[p] !== oldParams[p]));
}
function isCodeChanged(params, oldParams) {
    return (params.Code.S3Bucket !== oldParams.Code.S3Bucket ||
        params.Code.S3Key !== oldParams.Code.S3Key);
}
module.exports = {
    handler: cfnResponse.safeHandler(handler),
};
//# sourceMappingURL=data:application/json;base64,