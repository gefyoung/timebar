"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const AWS = __importStar(require("aws-sdk"));
AWS.config.logger = console;
const util_1 = require("./util");
const cfnResponse = __importStar(require("./cfn-response"));
const s3 = new AWS.S3({ region: "us-east-1" });
function handler(cfnRequest) {
    return __awaiter(this, void 0, void 0, function* () {
        util_1.log("onEventHandler", cfnRequest);
        // Get bucket name
        const bucketName = cfnRequest.RequestType === "Create"
            ? generateBucketName(cfnRequest.ResourceProperties.BucketNamePrefix)
            : cfnRequest.PhysicalResourceId;
        // Process request
        let responseData;
        switch (cfnRequest.RequestType) {
            case "Create":
                yield createBucket(bucketName);
                responseData = {
                    BucketName: bucketName,
                };
                break;
            case "Update":
                break;
            case "Delete":
                yield emptyBucket(bucketName);
                yield deleteBucket(bucketName);
                break;
            default:
                throw new Error("Unsupported request type");
        }
        // Build response
        return cfnResponse.submitResponse("SUCCESS", Object.assign(Object.assign({}, cfnRequest), { PhysicalResourceId: bucketName, Data: responseData }));
    });
}
function createBucket(bucketName) {
    return __awaiter(this, void 0, void 0, function* () {
        util_1.log(`createBucket() called with bucketName`, bucketName);
        const resp = yield s3
            .createBucket({
            Bucket: bucketName,
        })
            .promise();
        util_1.log(`response`, resp);
    });
}
function deleteBucket(bucketName) {
    return __awaiter(this, void 0, void 0, function* () {
        util_1.log(`deleteBucket() called with bucketName`, bucketName);
        const resp = yield s3
            .deleteBucket({
            Bucket: bucketName,
        })
            .promise();
        util_1.log(`response`, resp);
    });
}
function generateBucketName(prefix) {
    const MAX_NAME_LENGTH = 63;
    const length = 20;
    const characters = "abcdefghijklmnopqrstuvwxyz";
    const charactersLength = characters.length;
    let result = `${prefix
        .toLowerCase()
        .slice(0, MAX_NAME_LENGTH - length - 1)}-`;
    for (let i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
}
////////////////
// @aws-cdk/aws-s3/lib/auto-delete-objectshandler
////////////////
function emptyBucket(bucketName) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const listedObjects = yield s3
            .listObjectVersions({ Bucket: bucketName })
            .promise();
        const contents = [
            ...((_a = listedObjects.Versions) !== null && _a !== void 0 ? _a : []),
            ...((_b = listedObjects.DeleteMarkers) !== null && _b !== void 0 ? _b : []),
        ];
        if (contents.length === 0) {
            return;
        }
        const records = contents.map((record) => ({
            Key: record.Key,
            VersionId: record.VersionId,
        }));
        yield s3
            .deleteObjects({ Bucket: bucketName, Delete: { Objects: records } })
            .promise();
        if (listedObjects === null || listedObjects === void 0 ? void 0 : listedObjects.IsTruncated) {
            yield emptyBucket(bucketName);
        }
    });
}
module.exports = {
    handler: cfnResponse.safeHandler(handler),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiczMtYnVja2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL25leHRqcy1zaXRlL2N1c3RvbS1yZXNvdXJjZS9zMy1idWNrZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw2Q0FBK0I7QUFDL0IsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDO0FBRTVCLGlDQUE2QjtBQUM3Qiw0REFBOEM7QUFDOUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFNL0MsU0FBZSxPQUFPLENBQ3BCLFVBQXVEOztRQUV2RCxVQUFHLENBQUMsZ0JBQWdCLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFbEMsa0JBQWtCO1FBQ2xCLE1BQU0sVUFBVSxHQUNkLFVBQVUsQ0FBQyxXQUFXLEtBQUssUUFBUTtZQUNqQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDO1lBQ3BFLENBQUMsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUM7UUFFcEMsa0JBQWtCO1FBQ2xCLElBQUksWUFBWSxDQUFDO1FBQ2pCLFFBQVEsVUFBVSxDQUFDLFdBQVcsRUFBRTtZQUM5QixLQUFLLFFBQVE7Z0JBQ1gsTUFBTSxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQy9CLFlBQVksR0FBRztvQkFDYixVQUFVLEVBQUUsVUFBVTtpQkFDdkIsQ0FBQztnQkFDRixNQUFNO1lBQ1IsS0FBSyxRQUFRO2dCQUNYLE1BQU07WUFDUixLQUFLLFFBQVE7Z0JBQ1gsTUFBTSxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQzlCLE1BQU0sWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUMvQixNQUFNO1lBQ1I7Z0JBQ0UsTUFBTSxJQUFJLEtBQUssQ0FB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QyxDQUFDO1NBQy9COztDQUNGO0FBMUdELGlCQUFTO0lBQ1AsT0FBTyxFQUFFLFdBQVcsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDO0NBQzFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBBV1MgZnJvbSBcImF3cy1zZGtcIjtcbkFXUy5jb25maWcubG9nZ2VyID0gY29uc29sZTtcblxuaW1wb3J0IHsgbG9nIH0gZnJvbSBcIi4vdXRpbFwiO1xuaW1wb3J0ICogYXMgY2ZuUmVzcG9uc2UgZnJvbSBcIi4vY2ZuLXJlc3BvbnNlXCI7XG5jb25zdCBzMyA9IG5ldyBBV1MuUzMoeyByZWdpb246IFwidXMtZWFzdC0xXCIgfSk7XG5cbmV4cG9ydCA9IHtcbiAgaGFuZGxlcjogY2ZuUmVzcG9uc2Uuc2FmZUhhbmRsZXIoaGFuZGxlciksXG59O1xuXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVyKFxuICBjZm5SZXF1ZXN0OiBBV1NMYW1iZGEuQ2xvdWRGb3JtYXRpb25DdXN0b21SZXNvdXJjZUV2ZW50XG4pIHtcbiAgbG9nKFwib25FdmVudEhhbmRsZXJcIiwgY2ZuUmVxdWVzdCk7XG5cbiAgLy8gR2V0IGJ1Y2tldCBuYW1lXG4gIGNvbnN0IGJ1Y2tldE5hbWUgPVxuICAgIGNmblJlcXVlc3QuUmVxdWVzdFR5cGUgPT09IFwiQ3JlYXRlXCJcbiAgICAgID8gZ2VuZXJhdGVCdWNrZXROYW1lKGNmblJlcXVlc3QuUmVzb3VyY2VQcm9wZXJ0aWVzLkJ1Y2tldE5hbWVQcmVmaXgpXG4gICAgICA6IGNmblJlcXVlc3QuUGh5c2ljYWxSZXNvdXJjZUlkO1xuXG4gIC8vIFByb2Nlc3MgcmVxdWVzdFxuICBsZXQgcmVzcG9uc2VEYXRhO1xuICBzd2l0Y2ggKGNmblJlcXVlc3QuUmVxdWVzdFR5cGUpIHtcbiAgICBjYXNlIFwiQ3JlYXRlXCI6XG4gICAgICBhd2FpdCBjcmVhdGVCdWNrZXQoYnVja2V0TmFtZSk7XG4gICAgICByZXNwb25zZURhdGEgPSB7XG4gICAgICAgIEJ1Y2tldE5hbWU6IGJ1Y2tldE5hbWUsXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIlVwZGF0ZVwiOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIkRlbGV0ZVwiOlxuICAgICAgYXdhaXQgZW1wdHlCdWNrZXQoYnVja2V0TmFtZSk7XG4gICAgICBhd2FpdCBkZWxldGVCdWNrZXQoYnVja2V0TmFtZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgcmVxdWVzdCB0eXBlXCIpO1xuICB9XG5cbiAgLy8gQnVpbGQgcmVzcG9uc2VcbiAgcmV0dXJuIGNmblJlc3BvbnNlLnN1Ym1pdFJlc3BvbnNlKFwiU1VDQ0VTU1wiLCB7XG4gICAgLi4uY2ZuUmVxdWVzdCxcbiAgICBQaHlzaWNhbFJlc291cmNlSWQ6IGJ1Y2tldE5hbWUsXG4gICAgRGF0YTogcmVzcG9uc2VEYXRhLFxuICB9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlQnVja2V0KGJ1Y2tldE5hbWU6IHN0cmluZykge1xuICBsb2coYGNyZWF0ZUJ1Y2tldCgpIGNhbGxlZCB3aXRoIGJ1Y2tldE5hbWVgLCBidWNrZXROYW1lKTtcblxuICBjb25zdCByZXNwID0gYXdhaXQgczNcbiAgICAuY3JlYXRlQnVja2V0KHtcbiAgICAgIEJ1Y2tldDogYnVja2V0TmFtZSxcbiAgICB9KVxuICAgIC5wcm9taXNlKCk7XG5cbiAgbG9nKGByZXNwb25zZWAsIHJlc3ApO1xufVxuXG5hc3luYyBmdW5jdGlvbiBkZWxldGVCdWNrZXQoYnVja2V0TmFtZTogc3RyaW5nKSB7XG4gIGxvZyhgZGVsZXRlQnVja2V0KCkgY2FsbGVkIHdpdGggYnVja2V0TmFtZWAsIGJ1Y2tldE5hbWUpO1xuXG4gIGNvbnN0IHJlc3AgPSBhd2FpdCBzM1xuICAgIC5kZWxldGVCdWNrZXQoe1xuICAgICAgQnVja2V0OiBidWNrZXROYW1lLFxuICAgIH0pXG4gICAgLnByb21pc2UoKTtcblxuICBsb2coYHJlc3BvbnNlYCwgcmVzcCk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQnVja2V0TmFtZShwcmVmaXg6IHN0cmluZykge1xuICBjb25zdCBNQVhfTkFNRV9MRU5HVEggPSA2MztcbiAgY29uc3QgbGVuZ3RoID0gMjA7XG4gIGNvbnN0IGNoYXJhY3RlcnMgPSBcImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCI7XG4gIGNvbnN0IGNoYXJhY3RlcnNMZW5ndGggPSBjaGFyYWN0ZXJzLmxlbmd0aDtcbiAgbGV0IHJlc3VsdCA9IGAke3ByZWZpeFxuICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgLnNsaWNlKDAsIE1BWF9OQU1FX0xFTkdUSCAtIGxlbmd0aCAtIDEpfS1gO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0ICs9IGNoYXJhY3RlcnMuY2hhckF0KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNoYXJhY3RlcnNMZW5ndGgpKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vXG4vLyBAYXdzLWNkay9hd3MtczMvbGliL2F1dG8tZGVsZXRlLW9iamVjdHNoYW5kbGVyXG4vLy8vLy8vLy8vLy8vLy8vXG5hc3luYyBmdW5jdGlvbiBlbXB0eUJ1Y2tldChidWNrZXROYW1lOiBzdHJpbmcpIHtcbiAgY29uc3QgbGlzdGVkT2JqZWN0cyA9IGF3YWl0IHMzXG4gICAgLmxpc3RPYmplY3RWZXJzaW9ucyh7IEJ1Y2tldDogYnVja2V0TmFtZSB9KVxuICAgIC5wcm9taXNlKCk7XG4gIGNvbnN0IGNvbnRlbnRzID0gW1xuICAgIC4uLihsaXN0ZWRPYmplY3RzLlZlcnNpb25zID8/IFtdKSxcbiAgICAuLi4obGlzdGVkT2JqZWN0cy5EZWxldGVNYXJrZXJzID8/IFtdKSxcbiAgXTtcbiAgaWYgKGNvbnRlbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHJlY29yZHMgPSBjb250ZW50cy5tYXAoKHJlY29yZDogYW55KSA9PiAoe1xuICAgIEtleTogcmVjb3JkLktleSxcbiAgICBWZXJzaW9uSWQ6IHJlY29yZC5WZXJzaW9uSWQsXG4gIH0pKTtcbiAgYXdhaXQgczNcbiAgICAuZGVsZXRlT2JqZWN0cyh7IEJ1Y2tldDogYnVja2V0TmFtZSwgRGVsZXRlOiB7IE9iamVjdHM6IHJlY29yZHMgfSB9KVxuICAgIC5wcm9taXNlKCk7XG5cbiAgaWYgKGxpc3RlZE9iamVjdHM/LklzVHJ1bmNhdGVkKSB7XG4gICAgYXdhaXQgZW1wdHlCdWNrZXQoYnVja2V0TmFtZSk7XG4gIH1cbn1cbiJdfQ==