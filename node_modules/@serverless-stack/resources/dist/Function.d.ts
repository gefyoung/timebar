import * as esbuild from "esbuild";
import { Construct } from "constructs";
import * as cdk from "aws-cdk-lib";
import * as lambda from "aws-cdk-lib/aws-lambda";
import * as lambdaNode from "aws-cdk-lib/aws-lambda-nodejs";
import { Stack } from "./Stack";
import { SSTConstruct } from "./Construct";
import { Permissions } from "./util/permission";
export declare type HandlerProps = FunctionHandlerProps;
export declare type FunctionDefinition = string | Function | FunctionProps;
export interface FunctionProps extends Omit<lambda.FunctionOptions, "functionName" | "timeout" | "runtime"> {
    /**
     * The source directory where the entry point is located. The node_modules in this
     * directory is used to generate the bundle.
     *
     * @default - A name for the function or a callback that returns the name.
     */
    functionName?: string | ((props: FunctionNameProps) => string);
    /**
     * Path to the entry point and handler function. Of the format:
     * `/path/to/file.function`.
     */
    handler?: string;
    /**
     * The source directory where the entry point is located. The node_modules in this
     * directory is used to generate the bundle.
     *
     * @default - Defaults to the app directory.
     */
    srcPath?: string;
    /**
     * The runtime environment.
     *
     * @default - Defaults to NODEJS_12_X
     */
    runtime?: "nodejs" | "nodejs4.3" | "nodejs6.10" | "nodejs8.10" | "nodejs10.x" | "nodejs12.x" | "nodejs14.x" | "python2.7" | "python3.6" | "python3.7" | "python3.8" | "python3.9" | "dotnetcore1.0" | "dotnetcore2.0" | "dotnetcore2.1" | "dotnetcore3.1" | "go1.x" | lambda.Runtime;
    /**
     * The amount of memory in MB allocated.
     *
     * @default - Defaults to 1024
     */
    memorySize?: number;
    /**
     * The execution timeout in seconds.
     *
     * @default - number
     */
    timeout?: number | cdk.Duration;
    /**
     * Enable AWS X-Ray Tracing.
     *
     * @default - Defaults to ACTIVE
     */
    tracing?: lambda.Tracing;
    /**
     * Enable local development
     *
     * @default - Defaults to true
     */
    enableLiveDev?: boolean;
    /**
     * Disable bundling with esbuild.
     *
     * @default - Defaults to true
     */
    bundle?: FunctionBundleProp;
    permissions?: Permissions;
    layers?: lambda.ILayerVersion[];
}
export interface FunctionNameProps {
    stack: Stack;
    functionProps: FunctionProps;
}
export interface FunctionHandlerProps {
    srcPath: string;
    handler: string;
    bundle: FunctionBundleProp;
    runtime: string;
}
export declare type FunctionBundleProp = FunctionBundleObject | boolean;
export declare type FunctionBundleObject = FunctionBundleBase & (FunctionBundleNodejsProps | FunctionBundlePythonProps);
export declare type FunctionBundleBase = {
    readonly copyFiles?: FunctionBundleCopyFilesProps[];
};
export interface FunctionBundleNodejsProps {
    loader?: {
        [ext: string]: esbuild.Loader;
    };
    externalModules?: string[];
    nodeModules?: string[];
    commandHooks?: lambdaNode.ICommandHooks;
    esbuildConfig?: FunctionBundleEsbuildConfig;
    minify?: boolean;
    format?: "cjs" | "esm";
}
export interface FunctionBundlePythonProps {
    installCommands?: string[];
}
export interface FunctionBundleCopyFilesProps {
    from: string;
    to?: string;
}
export interface FunctionBundleEsbuildConfig {
    define?: {
        [key: string]: string;
    };
    keepNames?: boolean;
    plugins?: string;
}
export declare class Function extends lambda.Function implements SSTConstruct {
    readonly _isLiveDevEnabled: boolean;
    private readonly localId;
    constructor(scope: Construct, id: string, props: FunctionProps);
    attachPermissions(permissions: Permissions): void;
    getConstructMetadata(): {
        type: "Function";
        data: {
            localId: string;
            arn: string;
        };
    };
    static normalizeSrcPath(srcPath: string): string;
    static copyFiles(bundle: FunctionBundleProp | undefined, srcPath: string, buildPath: string): void;
    static handleImportedLayers(scope: Construct, layers: lambda.ILayerVersion[]): lambda.ILayerVersion[];
    static fromDefinition(scope: Construct, id: string, definition: FunctionDefinition, inheritedProps?: FunctionProps, inheritErrorMessage?: string): Function;
    static mergeProps(baseProps?: FunctionProps, props?: FunctionProps): FunctionProps;
}
