"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = exports.TableFieldType = void 0;
const constructs_1 = require("constructs");
const dynamodb = __importStar(require("aws-cdk-lib/aws-dynamodb"));
const lambda = __importStar(require("aws-cdk-lib/aws-lambda"));
const lambdaEventSources = __importStar(require("aws-cdk-lib/aws-lambda-event-sources"));
const core_1 = require("@serverless-stack/core");
const Construct_1 = require("./Construct");
const Function_1 = require("./Function");
const logger = core_1.getChildLogger("resources");
var TableFieldType;
(function (TableFieldType) {
    TableFieldType["BINARY"] = "B";
    TableFieldType["NUMBER"] = "N";
    TableFieldType["STRING"] = "S";
})(TableFieldType = exports.TableFieldType || (exports.TableFieldType = {}));
/////////////////////
// Construct
/////////////////////
class Table extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const root = scope.node.root;
        const { fields, primaryIndex, globalIndexes, localIndexes, secondaryIndexes, dynamodbTable, kinesisStream, stream, consumers, defaultFunctionProps, } = props;
        this.functions = {};
        this.fields = fields;
        this.permissionsAttachedForAllConsumers = [];
        this.defaultFunctionProps = defaultFunctionProps;
        ////////////////////
        // Input Validation
        ////////////////////
        if (consumers)
            this.checkDeprecatedConsumers(consumers);
        if (secondaryIndexes)
            this.checkDeprecatedSecondaryIndexes();
        this.validateFieldsAndIndexes(id, props);
        ////////////////////
        // Create Table
        ////////////////////
        if (Construct_1.isCDKConstruct(dynamodbTable)) {
            // Validate "fields" is not configured
            if (fields !== undefined) {
                throw new Error(`Cannot configure the "fields" when "dynamodbTable" is a construct in the "${id}" Table`);
            }
            // Validate "stream" is not configured
            if (stream !== undefined) {
                throw new Error(`Cannot configure the "stream" when "dynamodbTable" is a construct in the "${id}" Table`);
            }
            this.dynamodbTableType = "IMPORTED";
            this.dynamodbTable = dynamodbTable;
        }
        else {
            let dynamodbTableProps = (dynamodbTable || {});
            // Validate "fields" is configured
            if (fields === undefined) {
                throw new Error(`Missing "fields" in the "${id}" Table`);
            }
            // Validate dynamodbTableProps does not contain "partitionKey", "sortKey" and "stream"
            if (dynamodbTableProps.partitionKey) {
                throw new Error(`Cannot configure the "dynamodbTableProps.partitionKey" in the "${id}" Table`);
            }
            if (dynamodbTableProps.sortKey) {
                throw new Error(`Cannot configure the "dynamodbTableProps.sortKey" in the "${id}" Table`);
            }
            if (dynamodbTableProps.stream) {
                throw new Error(`Cannot configure the "dynamodbTableProps.stream" in the "${id}" Table`);
            }
            if (fields && primaryIndex) {
                dynamodbTableProps = Object.assign(Object.assign({}, dynamodbTableProps), { partitionKey: this.buildAttribute(fields, primaryIndex.partitionKey), sortKey: primaryIndex.sortKey
                        ? this.buildAttribute(fields, primaryIndex.sortKey)
                        : undefined });
            }
            this.dynamodbTableType = "CREATED";
            this.dynamodbTable = new dynamodb.Table(this, "Table", Object.assign({ tableName: root.logicalPrefixedName(id), pointInTimeRecovery: true, billingMode: dynamodb.BillingMode.PAY_PER_REQUEST, stream: this.buildStreamConfig(stream) }, dynamodbTableProps));
        }
        //////////////////////////////
        // Create Secondary Indexes
        //////////////////////////////
        const allGlobalIndexes = globalIndexes || secondaryIndexes;
        if (allGlobalIndexes)
            this.addGlobalIndexes(allGlobalIndexes);
        if (localIndexes)
            this.addLocalIndexes(localIndexes);
        ///////////////////////////
        // Create Consumers
        ///////////////////////////
        if (consumers) {
            Object.keys(consumers).forEach((consumerName) => this.addConsumer(this, consumerName, consumers[consumerName]));
        }
        // Create Kinesis Stream
        this.buildKinesisStreamSpec(kinesisStream);
    }
    addGlobalIndexes(secondaryIndexes) {
        var _a, _b, _c;
        if (!this.fields)
            throw new Error(`Cannot add secondary indexes to "${this.node.id}" Table without defining "fields"`);
        for (const [indexName, { partitionKey, sortKey, indexProps },] of Object.entries(secondaryIndexes)) {
            // Validate indexProps does not contain "indexName", "partitionKey" and "sortKey"
            if ((_a = indexProps) === null || _a === void 0 ? void 0 : _a.indexName) {
                throw new Error(`Cannot configure the "indexProps.indexName" in the "${indexName}" index of the "${this.node.id}" Table`);
            }
            if ((_b = indexProps) === null || _b === void 0 ? void 0 : _b.partitionKey) {
                throw new Error(`Cannot configure the "indexProps.partitionKey" in the "${indexName}" index of the "${this.node.id}" Table`);
            }
            if ((_c = indexProps) === null || _c === void 0 ? void 0 : _c.sortKey) {
                throw new Error(`Cannot configure the "indexProps.sortKey" in the "${indexName}" index of the "${this.node.id}" Table`);
            }
            this.dynamodbTable.addGlobalSecondaryIndex(Object.assign({ indexName, partitionKey: this.buildAttribute(this.fields, partitionKey), sortKey: sortKey
                    ? this.buildAttribute(this.fields, sortKey)
                    : undefined }, indexProps));
        }
    }
    addLocalIndexes(secondaryIndexes) {
        var _a, _b;
        if (!this.fields)
            throw new Error(`Cannot add local secondary indexes to "${this.node.id}" Table without defining "fields"`);
        for (const [indexName, { sortKey, indexProps }] of Object.entries(secondaryIndexes)) {
            // Validate indexProps does not contain "indexName", "partitionKey" and "sortKey"
            if ((_a = indexProps) === null || _a === void 0 ? void 0 : _a.indexName) {
                throw new Error(`Cannot configure the "indexProps.indexName" in the "${indexName}" index of the "${this.node.id}" Table`);
            }
            if ((_b = indexProps) === null || _b === void 0 ? void 0 : _b.sortKey) {
                throw new Error(`Cannot configure the "indexProps.sortKey" in the "${indexName}" index of the "${this.node.id}" Table`);
            }
            this.dynamodbTable.addLocalSecondaryIndex(Object.assign({ indexName, sortKey: this.buildAttribute(this.fields, sortKey) }, indexProps));
        }
    }
    get tableArn() {
        return this.dynamodbTable.tableArn;
    }
    get tableName() {
        return this.dynamodbTable.tableName;
    }
    addConsumers(scope, consumers) {
        // Handle deprecated consumers
        this.checkDeprecatedConsumers(consumers);
        Object.keys(consumers).forEach((consumerName) => {
            this.addConsumer(scope, consumerName, consumers[consumerName]);
        });
    }
    attachPermissions(permissions) {
        Object.values(this.functions).forEach((fn) => fn.attachPermissions(permissions));
        this.permissionsAttachedForAllConsumers.push(permissions);
    }
    attachPermissionsToConsumer(consumerName, permissions) {
        if (!this.functions[consumerName]) {
            throw new Error(`The "${consumerName}" consumer was not found in the "${this.node.id}" Table.`);
        }
        this.functions[consumerName].attachPermissions(permissions);
    }
    getFunction(consumerName) {
        return this.functions[consumerName];
    }
    getConstructMetadata() {
        return {
            type: "Table",
            data: {
                tableName: this.dynamodbTable.tableName,
                consumers: Object.entries(this.functions).map(([name, fun]) => ({
                    name,
                    fn: Construct_1.getFunctionRef(fun),
                })),
            },
        };
    }
    addConsumer(scope, consumerName, consumer) {
        // validate stream enabled
        // note: if table is imported, do not check because we want to allow ppl to
        //       import without specifying the "tableStreamArn". And let them add
        //       consumers to it.
        if (!this.dynamodbTable.tableStreamArn) {
            const errorMsgs = [
                `Please enable the "stream" option to add consumers to the "${this.node.id}" Table.`,
            ];
            if (this.dynamodbTableType === "IMPORTED") {
                errorMsgs.push(`To import a table with stream enabled, use the "Table.fromTableAttributes()" method, and set the "tableStreamArn" in the attributes.`);
            }
            throw new Error(errorMsgs.join(" "));
        }
        // parse consumer
        let consumerFunction, consumerProps;
        if (consumer.function) {
            consumer = consumer;
            consumerFunction = consumer.function;
            consumerProps = consumer.consumerProps;
        }
        else {
            consumerFunction = consumer;
        }
        consumerProps = Object.assign({ startingPosition: lambda.StartingPosition.LATEST }, (consumerProps || {}));
        // create function
        const fn = Function_1.Function.fromDefinition(scope, consumerName, consumerFunction, this.defaultFunctionProps, `The "defaultFunctionProps" cannot be applied if an instance of a Function construct is passed in. Make sure to define all the consumers using FunctionProps, so the Table construct can apply the "defaultFunctionProps" to them.`);
        this.functions[consumerName] = fn;
        // create event source
        const eventSource = new lambdaEventSources.DynamoEventSource(this.dynamodbTable, consumerProps);
        fn.addEventSource(eventSource);
        // attach permissions
        this.permissionsAttachedForAllConsumers.forEach((permissions) => {
            fn.attachPermissions(permissions);
        });
        return fn;
    }
    buildAttribute(fields, name) {
        return {
            name,
            type: this.convertTableFieldTypeToAttributeType(fields[name]),
        };
    }
    buildStreamConfig(stream) {
        if (stream === true) {
            return dynamodb.StreamViewType.NEW_AND_OLD_IMAGES;
        }
        else if (stream === false) {
            return undefined;
        }
        return stream;
    }
    convertTableFieldTypeToAttributeType(fieldType) {
        if (fieldType === TableFieldType.BINARY) {
            return dynamodb.AttributeType.BINARY;
        }
        else if (fieldType === TableFieldType.NUMBER) {
            return dynamodb.AttributeType.NUMBER;
        }
        else {
            return dynamodb.AttributeType.STRING;
        }
    }
    buildKinesisStreamSpec(kinesisStream) {
        if (!kinesisStream) {
            return;
        }
        const cfTable = this.dynamodbTable.node.defaultChild;
        cfTable.addPropertyOverride("KinesisStreamSpecification.StreamArn", kinesisStream.streamArn);
    }
    validateFieldsAndIndexes(id, props) {
        const { fields, primaryIndex } = props;
        // Validate "fields"
        if (fields && Object.keys(fields).length === 0) {
            throw new Error(`No fields defined for the "${id}" Table`);
        }
        // Validate "primaryIndex"
        if (primaryIndex && !primaryIndex.partitionKey) {
            throw new Error(`Missing "partitionKey" in primary index for the "${id}" Table`);
        }
        // Validate "fields" and "primaryIndex" co-exists
        if (fields) {
            if (!primaryIndex) {
                throw new Error(`Missing "primaryIndex" in "${id}" Table`);
            }
        }
        else {
            if (primaryIndex) {
                throw new Error(`Cannot configure the "primaryIndex" without setting the "fields" in "${id}" Table`);
            }
        }
    }
    checkDeprecatedConsumers(consumers) {
        if (Array.isArray(consumers)) {
            throw new Error(`The "consumers" property no longer takes an array. It nows takes an associative array with the consumer name being the index key. More details on upgrading - https://docs.serverless-stack.com/constructs/Table#upgrading-to-v0210`);
        }
    }
    checkDeprecatedSecondaryIndexes() {
        logger.debug(`WARNING: The "secondaryIndexes" property has been renamed to "globalIndexes". "secondaryIndexes" will continue to work but will be removed at a later date. More details on the deprecation - https://docs.serverless-stack.com/constructs/Table#secondaryindexes-deprecated`);
    }
}
exports.Table = Table;
//# sourceMappingURL=data:application/json;base64,