import { Construct } from "constructs";
import * as cdk from "aws-cdk-lib";
import * as lambda from "aws-cdk-lib/aws-lambda";
import { FunctionProps, Function as Fn } from "./Function";
import { Permissions } from "./util/permission";
export declare type StackProps = cdk.StackProps;
export declare class Stack extends cdk.Stack {
    readonly stage: string;
    readonly defaultFunctionProps: FunctionProps[];
    private readonly metadata;
    constructor(scope: Construct, id: string, props?: StackProps);
    setDefaultFunctionProps(props: FunctionProps): void;
    addDefaultFunctionPermissions(permissions: Permissions): void;
    addDefaultFunctionEnv(environment: Record<string, string>): void;
    addDefaultFunctionLayers(layers: lambda.ILayerVersion[]): void;
    getAllFunctions(): Fn[];
    private doGetAllFunctions;
    addOutputs(outputs: {
        [key: string]: string | cdk.CfnOutputProps;
    }): void;
    addConstructsMetadata(metadata: any): void;
    private createMetadataResource;
    private static checkForPropsIsConstruct;
    private static checkForEnvInProps;
}
