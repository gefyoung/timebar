"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Queue = void 0;
const constructs_1 = require("constructs");
const cdk = __importStar(require("aws-cdk-lib"));
const sqs = __importStar(require("aws-cdk-lib/aws-sqs"));
const lambdaEventSources = __importStar(require("aws-cdk-lib/aws-lambda-event-sources"));
const Construct_1 = require("./Construct");
const Function_1 = require("./Function");
class Queue extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const root = scope.node.root;
        const { 
        // Queue props
        sqsQueue, 
        // Function props
        consumer, } = props || {};
        this.permissionsAttachedForAllConsumers = [];
        ////////////////////
        // Create Queue
        ////////////////////
        if (Construct_1.isCDKConstruct(sqsQueue)) {
            this.sqsQueue = sqsQueue;
        }
        else {
            const sqsQueueProps = sqsQueue || {};
            // If debugIncreaseTimeout is enabled (ie. sst start):
            // - Set visibilityTimeout to > 900s. This is because Lambda timeout is
            //   set to 900s, and visibilityTimeout has to be greater or equal to it.
            //   This will give people more time to debug the function without timing
            //   out the request.
            let debugOverrideProps;
            if (root.debugIncreaseTimeout) {
                if (!sqsQueueProps.visibilityTimeout ||
                    sqsQueueProps.visibilityTimeout.toSeconds() < 900) {
                    debugOverrideProps = {
                        visibilityTimeout: cdk.Duration.seconds(900),
                    };
                }
            }
            const name = root.logicalPrefixedName(id) + (sqsQueueProps.fifo ? ".fifo" : "");
            this.sqsQueue = new sqs.Queue(this, "Queue", Object.assign(Object.assign({ queueName: name }, sqsQueueProps), (debugOverrideProps || {})));
        }
        ///////////////////////////
        // Create Consumer
        ///////////////////////////
        if (consumer) {
            this.addConsumer(this, consumer);
        }
    }
    addConsumer(scope, consumer) {
        if (this.consumerFunction) {
            throw new Error("Cannot configure more than 1 consumer for a Queue");
        }
        // Parse consumer props
        let consumerProps;
        let functionDefinition;
        if (consumer.function) {
            consumer = consumer;
            consumerProps = consumer.consumerProps;
            functionDefinition = consumer.function;
        }
        else {
            consumer = consumer;
            functionDefinition = consumer;
        }
        // Create function
        this.consumerFunction = Function_1.Function.fromDefinition(scope, `Consumer_${this.node.id}`, functionDefinition);
        this.consumerFunction.addEventSource(new lambdaEventSources.SqsEventSource(this.sqsQueue, consumerProps));
        // Attach permissions
        this.permissionsAttachedForAllConsumers.forEach((permissions) => {
            if (this.consumerFunction) {
                this.consumerFunction.attachPermissions(permissions);
            }
        });
    }
    attachPermissions(permissions) {
        if (this.consumerFunction) {
            this.consumerFunction.attachPermissions(permissions);
        }
        this.permissionsAttachedForAllConsumers.push(permissions);
    }
    getConstructMetadata() {
        return {
            type: "Queue",
            data: {
                name: this.sqsQueue.queueName,
                url: this.sqsQueue.queueUrl,
                consumer: Construct_1.getFunctionRef(this.consumerFunction),
            },
        };
    }
}
exports.Queue = Queue;
//# sourceMappingURL=data:application/json;base64,