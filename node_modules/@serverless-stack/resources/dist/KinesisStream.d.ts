import { Construct } from "constructs";
import * as kinesis from "aws-cdk-lib/aws-kinesis";
import * as lambdaEventSources from "aws-cdk-lib/aws-lambda-event-sources";
import { SSTConstruct } from "./Construct";
import { Function as Fn, FunctionProps, FunctionDefinition } from "./Function";
import { Permissions } from "./util/permission";
export interface KinesisStreamProps {
    readonly kinesisStream?: kinesis.IStream | kinesis.StreamProps;
    readonly consumers?: {
        [consumerName: string]: FunctionDefinition | KinesisStreamConsumerProps;
    };
    readonly defaultFunctionProps?: FunctionProps;
}
export interface KinesisStreamConsumerProps {
    readonly function: FunctionDefinition;
    readonly consumerProps?: lambdaEventSources.KinesisEventSourceProps;
}
export declare class KinesisStream extends Construct implements SSTConstruct {
    readonly kinesisStream: kinesis.IStream;
    private functions;
    private readonly permissionsAttachedForAllConsumers;
    private readonly defaultFunctionProps?;
    constructor(scope: Construct, id: string, props?: KinesisStreamProps);
    get streamArn(): string;
    get streamName(): string;
    addConsumers(scope: Construct, consumers: {
        [consumerName: string]: FunctionDefinition | KinesisStreamConsumerProps;
    }): void;
    attachPermissions(permissions: Permissions): void;
    attachPermissionsToConsumer(consumerName: string, permissions: Permissions): void;
    getFunction(consumerName: string): Fn | undefined;
    getConstructMetadata(): {
        type: "KinesisStream";
        data: {
            streamName: string;
            consumers: {
                name: string;
                fn: {
                    node: string;
                    stack: string;
                } | undefined;
            }[];
        };
    };
    private addConsumer;
}
