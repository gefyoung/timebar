"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApolloApi = void 0;
const Api_1 = require("./Api");
/////////////////////
// Construct
/////////////////////
class ApolloApi extends Api_1.Api {
    constructor(scope, id, props) {
        const _a = props || {}, { server, rootPath = "/", defaultPayloadFormatVersion } = _a, restProps = __rest(_a, ["server", "rootPath", "defaultPayloadFormatVersion"]);
        // Validate server
        if (!server) {
            throw new Error(`Missing "server" in the "${id}" ApolloApi`);
        }
        // Validate routes
        const { routes } = props;
        if (routes) {
            throw new Error(`Please use the "server" option instead of the "routes" to configure the handler for the "${id}" ApolloApi`);
        }
        super(scope, id, Object.assign(Object.assign({}, restProps), { defaultPayloadFormatVersion: defaultPayloadFormatVersion || Api_1.ApiPayloadFormatVersion.V1, routes: {
                [`GET ${rootPath}`]: server,
                [`POST ${rootPath}`]: server,
            } }));
        this.rootPath = rootPath;
    }
    get serverFunction() {
        const serverFn = this.getFunction(`GET ${this.rootPath}`);
        // This should never happen
        if (!serverFn) {
            throw new Error(`Failed to get "serverFunction" in the "${this.node.id}" ApolloApi`);
        }
        return serverFn;
    }
    // Note: We want to create 1 Lambda handling both the GET and POST request.
    //       This design is based on this discussion on GitHub
    //       https://github.com/serverless-stack/serverless-stack/issues/601
    // Also Note: We cannot use the "ANY /" route because if authorization
    //            were provided, the OPTIONS route will be protected. This
    //            causes CORS to fail.
    // Solution: We will override the createFunctionIntegration() function, and
    //           it will re-use the same Route Integration for all routes.
    createFunctionIntegration(scope, routeKey, routeProps, postfixName) {
        if (!this.lambdaIntegration) {
            this.lambdaIntegration = super.createFunctionIntegration(scope, routeKey, routeProps, postfixName);
        }
        return this.lambdaIntegration;
    }
}
exports.ApolloApi = ApolloApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBvbGxvQXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0Fwb2xsb0FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUVBLCtCQUtlO0FBWWYscUJBQXFCO0FBQ3JCLFlBQVk7QUFDWixxQkFBcUI7QUFFckIsTUFBYSxTQUFVLFNBQVEsU0FBRztJQUloQyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQXFCO1FBQzdELE1BQU0sS0FLRixLQUFLLElBQUksRUFBRSxFQUxULEVBQ0osTUFBTSxFQUNOLFFBQVEsR0FBRyxHQUFHLEVBQ2QsMkJBQTJCLE9BRWQsRUFEVixTQUFTLGNBSlIscURBS0wsQ0FBYyxDQUFDO1FBRWhCLGtCQUFrQjtRQUNsQixJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsRUFBRSxhQUFhLENBQUMsQ0FBQztTQUM5RDtRQUVELGtCQUFrQjtRQUNsQixNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsS0FBaUIsQ0FBQztRQUNyQyxJQUFJLE1BQU0sRUFBRTtZQUNWLE1BQU0sSUFBSSxLQUFLLENBQ2IsNEZBQTRGLEVBQUUsYUFBYSxDQUM1RyxDQUFDO1NBQ0g7UUFFRCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsa0NBQ1YsU0FBUyxLQUNaLDJCQUEyQixFQUN6QiwyQkFBMkIsSUFBSSw2QkFBdUIsQ0FBQyxFQUFFLEVBQzNELE1BQU0sRUFBRTtnQkFDTixDQUFDLE9BQU8sUUFBUSxFQUFFLENBQUMsRUFBRSxNQUFNO2dCQUMzQixDQUFDLFFBQVEsUUFBUSxFQUFFLENBQUMsRUFBRSxNQUFNO2FBQzdCLElBQ0QsQ0FBQztRQUVILElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFFRCxJQUFXLGNBQWM7UUFDdkIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBRTFELDJCQUEyQjtRQUMzQixJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2IsTUFBTSxJQUFJLEtBQUssQ0FDYiwwQ0FBMEMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLGFBQWEsQ0FDcEUsQ0FBQztTQUNIO1FBRUQsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUVELDJFQUEyRTtJQUMzRSwwREFBMEQ7SUFDMUQsd0VBQXdFO0lBQ3hFLHNFQUFzRTtJQUN0RSxzRUFBc0U7SUFDdEUsa0NBQWtDO0lBQ2xDLDJFQUEyRTtJQUMzRSxzRUFBc0U7SUFDNUQseUJBQXlCLENBQ2pDLEtBQWdCLEVBQ2hCLFFBQWdCLEVBQ2hCLFVBQWlDLEVBQ2pDLFdBQW1CO1FBRW5CLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDM0IsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQyx5QkFBeUIsQ0FDdEQsS0FBSyxFQUNMLFFBQVEsRUFDUixVQUFVLEVBQ1YsV0FBVyxDQUNaLENBQUM7U0FDSDtRQUVELE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDO0lBQ2hDLENBQUM7Q0FDRjtBQTVFRCw4QkE0RUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0ICogYXMgYXBpZyBmcm9tIFwiQGF3cy1jZGsvYXdzLWFwaWdhdGV3YXl2Mi1hbHBoYVwiO1xuaW1wb3J0IHtcbiAgQXBpLFxuICBBcGlQcm9wcyxcbiAgQXBpRnVuY3Rpb25Sb3V0ZVByb3BzLFxuICBBcGlQYXlsb2FkRm9ybWF0VmVyc2lvbixcbn0gZnJvbSBcIi4vQXBpXCI7XG5pbXBvcnQgeyBGdW5jdGlvbiBhcyBGbiwgRnVuY3Rpb25EZWZpbml0aW9uIH0gZnJvbSBcIi4vRnVuY3Rpb25cIjtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBJbnRlcmZhY2VzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZXhwb3J0IGludGVyZmFjZSBBcG9sbG9BcGlQcm9wcyBleHRlbmRzIE9taXQ8QXBpUHJvcHMsIFwicm91dGVzXCI+IHtcbiAgcmVhZG9ubHkgc2VydmVyOiBGdW5jdGlvbkRlZmluaXRpb247XG4gIHJlYWRvbmx5IHJvb3RQYXRoPzogc3RyaW5nO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIENvbnN0cnVjdFxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmV4cG9ydCBjbGFzcyBBcG9sbG9BcGkgZXh0ZW5kcyBBcGkge1xuICBwcml2YXRlIGxhbWJkYUludGVncmF0aW9uPzogYXBpZy5IdHRwUm91dGVJbnRlZ3JhdGlvbjtcbiAgcHJpdmF0ZSByb290UGF0aD86IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQXBvbGxvQXBpUHJvcHMpIHtcbiAgICBjb25zdCB7XG4gICAgICBzZXJ2ZXIsXG4gICAgICByb290UGF0aCA9IFwiL1wiLFxuICAgICAgZGVmYXVsdFBheWxvYWRGb3JtYXRWZXJzaW9uLFxuICAgICAgLi4ucmVzdFByb3BzXG4gICAgfSA9IHByb3BzIHx8IHt9O1xuXG4gICAgLy8gVmFsaWRhdGUgc2VydmVyXG4gICAgaWYgKCFzZXJ2ZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTWlzc2luZyBcInNlcnZlclwiIGluIHRoZSBcIiR7aWR9XCIgQXBvbGxvQXBpYCk7XG4gICAgfVxuXG4gICAgLy8gVmFsaWRhdGUgcm91dGVzXG4gICAgY29uc3QgeyByb3V0ZXMgfSA9IHByb3BzIGFzIEFwaVByb3BzO1xuICAgIGlmIChyb3V0ZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFBsZWFzZSB1c2UgdGhlIFwic2VydmVyXCIgb3B0aW9uIGluc3RlYWQgb2YgdGhlIFwicm91dGVzXCIgdG8gY29uZmlndXJlIHRoZSBoYW5kbGVyIGZvciB0aGUgXCIke2lkfVwiIEFwb2xsb0FwaWBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgc3VwZXIoc2NvcGUsIGlkLCB7XG4gICAgICAuLi5yZXN0UHJvcHMsXG4gICAgICBkZWZhdWx0UGF5bG9hZEZvcm1hdFZlcnNpb246XG4gICAgICAgIGRlZmF1bHRQYXlsb2FkRm9ybWF0VmVyc2lvbiB8fCBBcGlQYXlsb2FkRm9ybWF0VmVyc2lvbi5WMSxcbiAgICAgIHJvdXRlczoge1xuICAgICAgICBbYEdFVCAke3Jvb3RQYXRofWBdOiBzZXJ2ZXIsXG4gICAgICAgIFtgUE9TVCAke3Jvb3RQYXRofWBdOiBzZXJ2ZXIsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgdGhpcy5yb290UGF0aCA9IHJvb3RQYXRoO1xuICB9XG5cbiAgcHVibGljIGdldCBzZXJ2ZXJGdW5jdGlvbigpOiBGbiB7XG4gICAgY29uc3Qgc2VydmVyRm4gPSB0aGlzLmdldEZ1bmN0aW9uKGBHRVQgJHt0aGlzLnJvb3RQYXRofWApO1xuXG4gICAgLy8gVGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuXG4gICAgaWYgKCFzZXJ2ZXJGbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgRmFpbGVkIHRvIGdldCBcInNlcnZlckZ1bmN0aW9uXCIgaW4gdGhlIFwiJHt0aGlzLm5vZGUuaWR9XCIgQXBvbGxvQXBpYFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VydmVyRm47XG4gIH1cblxuICAvLyBOb3RlOiBXZSB3YW50IHRvIGNyZWF0ZSAxIExhbWJkYSBoYW5kbGluZyBib3RoIHRoZSBHRVQgYW5kIFBPU1QgcmVxdWVzdC5cbiAgLy8gICAgICAgVGhpcyBkZXNpZ24gaXMgYmFzZWQgb24gdGhpcyBkaXNjdXNzaW9uIG9uIEdpdEh1YlxuICAvLyAgICAgICBodHRwczovL2dpdGh1Yi5jb20vc2VydmVybGVzcy1zdGFjay9zZXJ2ZXJsZXNzLXN0YWNrL2lzc3Vlcy82MDFcbiAgLy8gQWxzbyBOb3RlOiBXZSBjYW5ub3QgdXNlIHRoZSBcIkFOWSAvXCIgcm91dGUgYmVjYXVzZSBpZiBhdXRob3JpemF0aW9uXG4gIC8vICAgICAgICAgICAgd2VyZSBwcm92aWRlZCwgdGhlIE9QVElPTlMgcm91dGUgd2lsbCBiZSBwcm90ZWN0ZWQuIFRoaXNcbiAgLy8gICAgICAgICAgICBjYXVzZXMgQ09SUyB0byBmYWlsLlxuICAvLyBTb2x1dGlvbjogV2Ugd2lsbCBvdmVycmlkZSB0aGUgY3JlYXRlRnVuY3Rpb25JbnRlZ3JhdGlvbigpIGZ1bmN0aW9uLCBhbmRcbiAgLy8gICAgICAgICAgIGl0IHdpbGwgcmUtdXNlIHRoZSBzYW1lIFJvdXRlIEludGVncmF0aW9uIGZvciBhbGwgcm91dGVzLlxuICBwcm90ZWN0ZWQgY3JlYXRlRnVuY3Rpb25JbnRlZ3JhdGlvbihcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIHJvdXRlS2V5OiBzdHJpbmcsXG4gICAgcm91dGVQcm9wczogQXBpRnVuY3Rpb25Sb3V0ZVByb3BzLFxuICAgIHBvc3RmaXhOYW1lOiBzdHJpbmdcbiAgKTogYXBpZy5IdHRwUm91dGVJbnRlZ3JhdGlvbiB7XG4gICAgaWYgKCF0aGlzLmxhbWJkYUludGVncmF0aW9uKSB7XG4gICAgICB0aGlzLmxhbWJkYUludGVncmF0aW9uID0gc3VwZXIuY3JlYXRlRnVuY3Rpb25JbnRlZ3JhdGlvbihcbiAgICAgICAgc2NvcGUsXG4gICAgICAgIHJvdXRlS2V5LFxuICAgICAgICByb3V0ZVByb3BzLFxuICAgICAgICBwb3N0Zml4TmFtZVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5sYW1iZGFJbnRlZ3JhdGlvbjtcbiAgfVxufVxuIl19