"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isCDKConstruct = exports.isCDKConstructOf = exports.isSSTConstruct = exports.isStackConstruct = exports.isConstruct = exports.getFunctionRef = void 0;
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const Stack_1 = require("./Stack");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
function getFunctionRef(fn) {
    if (!fn)
        return undefined;
    if (!(fn instanceof aws_lambda_1.Function))
        return undefined;
    return {
        node: fn.node.addr,
        stack: Stack_1.Stack.of(fn).node.id,
    };
}
exports.getFunctionRef = getFunctionRef;
function isConstruct(construct) {
    return isSSTConstruct(construct) || isCDKConstruct(construct);
}
exports.isConstruct = isConstruct;
function isStackConstruct(construct) {
    return isCDKConstructOf(construct, "aws-cdk-lib.Stack");
}
exports.isStackConstruct = isStackConstruct;
function isSSTConstruct(construct) {
    return "getConstructMetadata" in construct;
}
exports.isSSTConstruct = isSSTConstruct;
function isCDKConstructOf(construct, moduleName) {
    var _a, _b;
    // We need to check if construct is an CDK construct. To do that:
    // - we cannot use the `construct instanceof` check because ie. the PolicyStatement
    //   instance in the user's app might come from a different npm package version
    // - we cannot use the `construct.constructor.name` check because the constructor
    //   name can be prefixed with a number ie. PolicyStatement2
    //
    // Therefore we are going to get the constructor's fqn. The constructor for a CDK
    // construct looks like:
    //    [class Bucket2 extends BucketBase] {
    //      [Symbol(jsii.rtti)]: { fqn: '@aws-cdk/aws-s3.Bucket', version: '1.91.0' }
    //    }
    // We will check against `fqn`.
    const fqn = (_b = (_a = construct === null || construct === void 0 ? void 0 : construct.constructor) === null || _a === void 0 ? void 0 : _a[JSII_RTTI_SYMBOL_1]) === null || _b === void 0 ? void 0 : _b.fqn;
    return typeof fqn === "string" && fqn === moduleName;
}
exports.isCDKConstructOf = isCDKConstructOf;
function isCDKConstruct(construct) {
    var _a, _b;
    const fqn = (_b = (_a = construct === null || construct === void 0 ? void 0 : construct.constructor) === null || _a === void 0 ? void 0 : _a[JSII_RTTI_SYMBOL_1]) === null || _b === void 0 ? void 0 : _b.fqn;
    return (typeof fqn === "string" &&
        (fqn.startsWith("@aws-cdk/") || fqn.startsWith("aws-cdk-lib")));
}
exports.isCDKConstruct = isCDKConstruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uc3RydWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0NvbnN0cnVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSx1REFBd0Q7QUFDeEQsbUNBQWdDO0FBRWhDLE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQWdCbkQsU0FBZ0IsY0FBYyxDQUFDLEVBQVE7SUFDckMsSUFBSSxDQUFDLEVBQUU7UUFBRSxPQUFPLFNBQVMsQ0FBQztJQUMxQixJQUFJLENBQUMsQ0FBQyxFQUFFLFlBQVkscUJBQUUsQ0FBQztRQUFFLE9BQU8sU0FBUyxDQUFDO0lBQzFDLE9BQU87UUFDTCxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJO1FBQ2xCLEtBQUssRUFBRSxhQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFO0tBQzVCLENBQUM7QUFDSixDQUFDO0FBUEQsd0NBT0M7QUFFRCxTQUFnQixXQUFXLENBQUMsU0FBYztJQUN4QyxPQUFPLGNBQWMsQ0FBQyxTQUFTLENBQUMsSUFBSSxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDaEUsQ0FBQztBQUZELGtDQUVDO0FBQ0QsU0FBZ0IsZ0JBQWdCLENBQUMsU0FBYztJQUM3QyxPQUFPLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0FBQzFELENBQUM7QUFGRCw0Q0FFQztBQUVELFNBQWdCLGNBQWMsQ0FBQyxTQUFjO0lBQzNDLE9BQU8sc0JBQXNCLElBQUksU0FBUyxDQUFDO0FBQzdDLENBQUM7QUFGRCx3Q0FFQztBQUVELFNBQWdCLGdCQUFnQixDQUM5QixTQUFjLEVBQ2QsVUFBa0I7O0lBRWxCLGlFQUFpRTtJQUNqRSxtRkFBbUY7SUFDbkYsK0VBQStFO0lBQy9FLGlGQUFpRjtJQUNqRiw0REFBNEQ7SUFDNUQsRUFBRTtJQUNGLGlGQUFpRjtJQUNqRix3QkFBd0I7SUFDeEIsMENBQTBDO0lBQzFDLGlGQUFpRjtJQUNqRixPQUFPO0lBQ1AsK0JBQStCO0lBQy9CLE1BQU0sR0FBRyxHQUFHLE1BQUEsTUFBQSxTQUFTLGFBQVQsU0FBUyx1QkFBVCxTQUFTLENBQUUsV0FBVywwQ0FBRyxrQkFBa0IsQ0FBQywwQ0FBRSxHQUFHLENBQUM7SUFDOUQsT0FBTyxPQUFPLEdBQUcsS0FBSyxRQUFRLElBQUksR0FBRyxLQUFLLFVBQVUsQ0FBQztBQUN2RCxDQUFDO0FBbEJELDRDQWtCQztBQUVELFNBQWdCLGNBQWMsQ0FBQyxTQUFjOztJQUMzQyxNQUFNLEdBQUcsR0FBRyxNQUFBLE1BQUEsU0FBUyxhQUFULFNBQVMsdUJBQVQsU0FBUyxDQUFFLFdBQVcsMENBQUcsa0JBQWtCLENBQUMsMENBQUUsR0FBRyxDQUFDO0lBQzlELE9BQU8sQ0FDTCxPQUFPLEdBQUcsS0FBSyxRQUFRO1FBQ3ZCLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQy9ELENBQUM7QUFDSixDQUFDO0FBTkQsd0NBTUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gXCJhd3MtY2RrLWxpYlwiO1xuaW1wb3J0IHsgRnVuY3Rpb24gYXMgRm4gfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWxhbWJkYVwiO1xuaW1wb3J0IHsgU3RhY2sgfSBmcm9tIFwiLi9TdGFja1wiO1xuXG5jb25zdCBKU0lJX1JUVElfU1lNQk9MXzEgPSBTeW1ib2wuZm9yKFwianNpaS5ydHRpXCIpO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNTVENvbnN0cnVjdE1ldGFkYXRhPFxuICBUIGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nLFxuICBEIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55PiA9IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gIEwgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0gUmVjb3JkPHN0cmluZywgYW55PlxuPiB7XG4gIHR5cGU6IFQ7XG4gIGRhdGE6IEQ7XG4gIGxvY2FsPzogTDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTU1RDb25zdHJ1Y3Qge1xuICBnZXRDb25zdHJ1Y3RNZXRhZGF0YSgpOiBTU1RDb25zdHJ1Y3RNZXRhZGF0YTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZ1bmN0aW9uUmVmKGZuPzogYW55KSB7XG4gIGlmICghZm4pIHJldHVybiB1bmRlZmluZWQ7XG4gIGlmICghKGZuIGluc3RhbmNlb2YgRm4pKSByZXR1cm4gdW5kZWZpbmVkO1xuICByZXR1cm4ge1xuICAgIG5vZGU6IGZuLm5vZGUuYWRkcixcbiAgICBzdGFjazogU3RhY2sub2YoZm4pLm5vZGUuaWQsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbnN0cnVjdChjb25zdHJ1Y3Q6IGFueSkge1xuICByZXR1cm4gaXNTU1RDb25zdHJ1Y3QoY29uc3RydWN0KSB8fCBpc0NES0NvbnN0cnVjdChjb25zdHJ1Y3QpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzU3RhY2tDb25zdHJ1Y3QoY29uc3RydWN0OiBhbnkpOiBjb25zdHJ1Y3QgaXMgY2RrLlN0YWNrIHtcbiAgcmV0dXJuIGlzQ0RLQ29uc3RydWN0T2YoY29uc3RydWN0LCBcImF3cy1jZGstbGliLlN0YWNrXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTU1RDb25zdHJ1Y3QoY29uc3RydWN0OiBhbnkpOiBjb25zdHJ1Y3QgaXMgU1NUQ29uc3RydWN0IHtcbiAgcmV0dXJuIFwiZ2V0Q29uc3RydWN0TWV0YWRhdGFcIiBpbiBjb25zdHJ1Y3Q7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NES0NvbnN0cnVjdE9mKFxuICBjb25zdHJ1Y3Q6IGFueSxcbiAgbW9kdWxlTmFtZTogc3RyaW5nXG4pOiBjb25zdHJ1Y3QgaXMgQ29uc3RydWN0IHtcbiAgLy8gV2UgbmVlZCB0byBjaGVjayBpZiBjb25zdHJ1Y3QgaXMgYW4gQ0RLIGNvbnN0cnVjdC4gVG8gZG8gdGhhdDpcbiAgLy8gLSB3ZSBjYW5ub3QgdXNlIHRoZSBgY29uc3RydWN0IGluc3RhbmNlb2ZgIGNoZWNrIGJlY2F1c2UgaWUuIHRoZSBQb2xpY3lTdGF0ZW1lbnRcbiAgLy8gICBpbnN0YW5jZSBpbiB0aGUgdXNlcidzIGFwcCBtaWdodCBjb21lIGZyb20gYSBkaWZmZXJlbnQgbnBtIHBhY2thZ2UgdmVyc2lvblxuICAvLyAtIHdlIGNhbm5vdCB1c2UgdGhlIGBjb25zdHJ1Y3QuY29uc3RydWN0b3IubmFtZWAgY2hlY2sgYmVjYXVzZSB0aGUgY29uc3RydWN0b3JcbiAgLy8gICBuYW1lIGNhbiBiZSBwcmVmaXhlZCB3aXRoIGEgbnVtYmVyIGllLiBQb2xpY3lTdGF0ZW1lbnQyXG4gIC8vXG4gIC8vIFRoZXJlZm9yZSB3ZSBhcmUgZ29pbmcgdG8gZ2V0IHRoZSBjb25zdHJ1Y3RvcidzIGZxbi4gVGhlIGNvbnN0cnVjdG9yIGZvciBhIENES1xuICAvLyBjb25zdHJ1Y3QgbG9va3MgbGlrZTpcbiAgLy8gICAgW2NsYXNzIEJ1Y2tldDIgZXh0ZW5kcyBCdWNrZXRCYXNlXSB7XG4gIC8vICAgICAgW1N5bWJvbChqc2lpLnJ0dGkpXTogeyBmcW46ICdAYXdzLWNkay9hd3MtczMuQnVja2V0JywgdmVyc2lvbjogJzEuOTEuMCcgfVxuICAvLyAgICB9XG4gIC8vIFdlIHdpbGwgY2hlY2sgYWdhaW5zdCBgZnFuYC5cbiAgY29uc3QgZnFuID0gY29uc3RydWN0Py5jb25zdHJ1Y3Rvcj8uW0pTSUlfUlRUSV9TWU1CT0xfMV0/LmZxbjtcbiAgcmV0dXJuIHR5cGVvZiBmcW4gPT09IFwic3RyaW5nXCIgJiYgZnFuID09PSBtb2R1bGVOYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDREtDb25zdHJ1Y3QoY29uc3RydWN0OiBhbnkpOiBjb25zdHJ1Y3QgaXMgQ29uc3RydWN0IHtcbiAgY29uc3QgZnFuID0gY29uc3RydWN0Py5jb25zdHJ1Y3Rvcj8uW0pTSUlfUlRUSV9TWU1CT0xfMV0/LmZxbjtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgZnFuID09PSBcInN0cmluZ1wiICYmXG4gICAgKGZxbi5zdGFydHNXaXRoKFwiQGF3cy1jZGsvXCIpIHx8IGZxbi5zdGFydHNXaXRoKFwiYXdzLWNkay1saWJcIikpXG4gICk7XG59XG4iXX0=