"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketApi = exports.WebSocketApiAuthorizationType = void 0;
const constructs_1 = require("constructs");
const iam = __importStar(require("aws-cdk-lib/aws-iam"));
const apig = __importStar(require("@aws-cdk/aws-apigatewayv2-alpha"));
const apigIntegrations = __importStar(require("@aws-cdk/aws-apigatewayv2-integrations-alpha"));
const Stack_1 = require("./Stack");
const Construct_1 = require("./Construct");
const Function_1 = require("./Function");
const apigV2Domain = __importStar(require("./util/apiGatewayV2Domain"));
const apigV2AccessLog = __importStar(require("./util/apiGatewayV2AccessLog"));
var WebSocketApiAuthorizationType;
(function (WebSocketApiAuthorizationType) {
    WebSocketApiAuthorizationType["NONE"] = "NONE";
    WebSocketApiAuthorizationType["IAM"] = "AWS_IAM";
    WebSocketApiAuthorizationType["CUSTOM"] = "CUSTOM";
})(WebSocketApiAuthorizationType = exports.WebSocketApiAuthorizationType || (exports.WebSocketApiAuthorizationType = {}));
/////////////////////
// Construct
/////////////////////
class WebSocketApi extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const root = scope.node.root;
        props = props || {};
        const { webSocketApi, webSocketStage, routes, accessLog, customDomain, authorizationType, authorizer, defaultFunctionProps, } = props;
        this.functions = {};
        this.permissionsAttachedForAllRoutes = [];
        this.authorizationType = authorizationType;
        this.authorizer = authorizer;
        this.defaultFunctionProps = defaultFunctionProps;
        ////////////////////
        // Create Api
        ////////////////////
        if (Construct_1.isCDKConstruct(webSocketApi)) {
            this.webSocketApi = webSocketApi;
        }
        else {
            // Validate input
            if (Construct_1.isCDKConstruct(webSocketStage)) {
                throw new Error(`Cannot import the "webSocketStage" when the "webSocketApi" is not imported.`);
            }
            const webSocketApiProps = (webSocketApi || {});
            // Create WebSocket API
            this.webSocketApi = new apig.WebSocketApi(this, "Api", Object.assign({ apiName: root.logicalPrefixedName(id) }, webSocketApiProps));
        }
        ////////////////////
        // Create Stage
        ////////////////////
        if (Construct_1.isCDKConstruct(webSocketStage)) {
            if (accessLog !== undefined) {
                throw new Error(`Cannot configure the "accessLog" when "webSocketStage" is a construct`);
            }
            if (customDomain !== undefined) {
                throw new Error(`Cannot configure the "customDomain" when "webSocketStage" is a construct`);
            }
            this.webSocketStage = webSocketStage;
        }
        else {
            const webSocketStageProps = (webSocketStage ||
                {});
            // Validate input
            if (webSocketStageProps.domainMapping !== undefined) {
                throw new Error(`Do not configure the "webSocketStage.domainMapping". Use the "customDomain" to configure the Api domain.`);
            }
            // Configure Custom Domain
            const customDomainData = apigV2Domain.buildCustomDomainData(this, customDomain);
            let domainMapping;
            if (customDomainData) {
                if (customDomainData.isApigDomainCreated) {
                    this.apiGatewayDomain =
                        customDomainData.apigDomain;
                }
                if (customDomainData.isCertificatedCreated) {
                    this.acmCertificate = customDomainData.certificate;
                }
                domainMapping = {
                    domainName: customDomainData.apigDomain,
                    mappingKey: customDomainData.mappingKey,
                };
                this._customDomainUrl = `wss://${customDomainData.url}`;
            }
            // Create stage
            this.webSocketStage = new apig.WebSocketStage(this, "Stage", Object.assign({ webSocketApi: this.webSocketApi, stageName: this.node.root.stage, autoDeploy: true, domainMapping }, webSocketStageProps));
            // Configure Access Log
            this.accessLogGroup = apigV2AccessLog.buildAccessLogData(this, accessLog, this.webSocketStage, true);
        }
        ///////////////////////////
        // Configure default permissions
        ///////////////////////////
        // note: this allows functions to make ApiGatewayManagementApi.postToConnection
        //       calls.
        this.attachPermissions([
            new iam.PolicyStatement({
                effect: iam.Effect.ALLOW,
                actions: ["execute-api:ManageConnections"],
                resources: [this._connectionsArn],
            }),
        ]);
        ///////////////////////////
        // Configure routes
        ///////////////////////////
        if (routes) {
            this.addRoutes(this, routes);
        }
    }
    get url() {
        return this.webSocketStage.url;
    }
    get customDomainUrl() {
        return this._customDomainUrl;
    }
    get routes() {
        return Object.keys(this.functions);
    }
    get _connectionsArn() {
        return Stack_1.Stack.of(this).formatArn({
            service: "execute-api",
            resourceName: `${this.webSocketStage.stageName}/POST/*`,
            resource: this.webSocketApi.apiId,
        });
    }
    addRoutes(scope, routes) {
        Object.keys(routes).forEach((routeKey) => {
            // add route
            const fn = this.addRoute(scope, routeKey, routes[routeKey]);
            // attached existing permissions
            this.permissionsAttachedForAllRoutes.forEach((permissions) => fn.attachPermissions(permissions));
        });
    }
    getFunction(routeKey) {
        return this.functions[this.normalizeRouteKey(routeKey)];
    }
    attachPermissions(permissions) {
        Object.values(this.functions).forEach((fn) => fn.attachPermissions(permissions));
        this.permissionsAttachedForAllRoutes.push(permissions);
    }
    attachPermissionsToRoute(routeKey, permissions) {
        const fn = this.getFunction(routeKey);
        if (!fn) {
            throw new Error(`Failed to attach permissions. Route "${routeKey}" does not exist.`);
        }
        fn.attachPermissions(permissions);
    }
    getConstructMetadata() {
        return {
            type: "WebSocketApi",
            data: {
                httpApiId: this.webSocketApi.apiId,
                customDomainUrl: this._customDomainUrl,
                routes: Object.entries(this.functions).map(([routeKey, fn]) => ({
                    route: routeKey,
                    fn: Construct_1.getFunctionRef(fn),
                })),
            },
        };
    }
    addRoute(scope, routeKey, routeValue) {
        ///////////////////
        // Normalize routeKey
        ///////////////////
        routeKey = this.normalizeRouteKey(routeKey);
        if (this.functions[routeKey]) {
            throw new Error(`A route already exists for "${routeKey}"`);
        }
        ///////////////////
        // Create Function
        ///////////////////
        const lambda = Function_1.Function.fromDefinition(scope, routeKey, routeValue, this.defaultFunctionProps, `The "defaultFunctionProps" cannot be applied if an instance of a Function construct is passed in. Make sure to define all the routes using FunctionProps, so the Api construct can apply the "defaultFunctionProps" to them.`);
        ///////////////////
        // Get authorization
        ///////////////////
        const { authorizationType, authorizer } = this.buildRouteAuth(routeKey);
        ///////////////////
        // Create route
        ///////////////////
        const route = new apig.WebSocketRoute(scope, `Route_${routeKey}`, {
            webSocketApi: this.webSocketApi,
            routeKey,
            integration: new apigIntegrations.WebSocketLambdaIntegration(`Integration_${routeKey}`, lambda),
            authorizer: routeKey === "$connect" ? authorizer : undefined,
        });
        ///////////////////
        // Configure authorization
        ///////////////////
        // Note: as of CDK v1.138.0, aws-apigatewayv2.WebSocketRoute does not
        //       support IAM authorization type. We need to manually configure it.
        if (routeKey === "$connect") {
            // Configure route authorization type
            // Note: we need to explicitly set `cfnRoute.authorizationType` to `NONE`
            //       because if it were set to `AWS_IAM`, and then it is removed from
            //       the CloudFormation template (ie. set to undefined), CloudFormation
            //       doesn't updates the route. The route's authorizationType would
            //       still be `AWS_IAM`.
            if (authorizationType === WebSocketApiAuthorizationType.CUSTOM ||
                authorizationType === WebSocketApiAuthorizationType.IAM ||
                authorizationType === WebSocketApiAuthorizationType.NONE) {
                if (!route.node.defaultChild) {
                    throw new Error(`Failed to define the default route for "${routeKey}"`);
                }
                const cfnRoute = route.node.defaultChild;
                cfnRoute.authorizationType = authorizationType;
            }
        }
        ///////////////////
        // Store function
        ///////////////////
        this.functions[routeKey] = lambda;
        return lambda;
    }
    buildRouteAuth(routeKey) {
        let authorizer;
        const authorizationType = this.authorizationType || WebSocketApiAuthorizationType.NONE;
        if (!Object.values(WebSocketApiAuthorizationType).includes(authorizationType)) {
            throw new Error(`sst.WebSocketApi does not currently support ${authorizationType}. Only "IAM" and "CUSTOM" are currently supported.`);
        }
        // Handle CUSTOM Auth
        if (authorizationType === WebSocketApiAuthorizationType.CUSTOM) {
            authorizer = this.authorizer;
            if (!authorizer) {
                throw new Error(`Missing custom Lambda authorizer for "${routeKey}"`);
            }
        }
        return { authorizationType, authorizer };
    }
    normalizeRouteKey(routeKey) {
        return routeKey.trim();
    }
}
exports.WebSocketApi = WebSocketApi;
//# sourceMappingURL=data:application/json;base64,