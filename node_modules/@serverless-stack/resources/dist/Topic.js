"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Topic = void 0;
const constructs_1 = require("constructs");
const sns = __importStar(require("aws-cdk-lib/aws-sns"));
const snsSubscriptions = __importStar(require("aws-cdk-lib/aws-sns-subscriptions"));
const Construct_1 = require("./Construct");
const Function_1 = require("./Function");
const Queue_1 = require("./Queue");
/////////////////////
// Construct
/////////////////////
class Topic extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const root = scope.node.root;
        const { snsTopic, subscribers, defaultFunctionProps } = props || {};
        this.subscribers = [];
        this.permissionsAttachedForAllSubscribers = [];
        this.defaultFunctionProps = defaultFunctionProps;
        ////////////////////
        // Create Topic
        ////////////////////
        if (Construct_1.isCDKConstruct(snsTopic)) {
            this.snsTopic = snsTopic;
        }
        else {
            const snsTopicProps = (snsTopic || {});
            this.snsTopic = new sns.Topic(this, "Topic", Object.assign({ topicName: root.logicalPrefixedName(id) }, snsTopicProps));
        }
        ///////////////////////////
        // Create Subscribers
        ///////////////////////////
        this.addSubscribers(this, subscribers || []);
    }
    get topicArn() {
        return this.snsTopic.topicArn;
    }
    get topicName() {
        return this.snsTopic.topicName;
    }
    get subscriberFunctions() {
        return this.subscribers.filter((subscriber) => subscriber instanceof Function_1.Function);
    }
    get snsSubscriptions() {
        return this.subscribers.map((sub) => {
            let children;
            // look for sns.Subscription inside Queue.sqsQueue
            if (sub instanceof Queue_1.Queue) {
                children = sub.sqsQueue.node.children;
            }
            // look for sns.Subscription inside Function
            else {
                children = sub.node.children;
            }
            const child = children.find((child) => {
                return Construct_1.isCDKConstructOf(child, "aws-cdk-lib.aws_sns.Subscription");
            });
            return child;
        });
    }
    addSubscribers(scope, subscribers) {
        subscribers.forEach((subscriber) => this.addSubscriber(scope, subscriber));
    }
    attachPermissions(permissions) {
        this.subscribers
            .filter((subscriber) => subscriber instanceof Function_1.Function)
            .forEach((subscriber) => subscriber.attachPermissions(permissions));
        this.permissionsAttachedForAllSubscribers.push(permissions);
    }
    attachPermissionsToSubscriber(index, permissions) {
        const subscriber = this.subscribers[index];
        if (!(subscriber instanceof Function_1.Function)) {
            throw new Error(`Cannot attach permissions to the "${this.node.id}" Topic subscriber because it's not a Lambda function`);
        }
        subscriber.attachPermissions(permissions);
    }
    getConstructMetadata() {
        return {
            type: "Topic",
            data: {
                topicArn: this.snsTopic.topicArn,
                subscribers: this.subscribers.map((s) => Construct_1.getFunctionRef(s)),
            },
        };
    }
    addSubscriber(scope, subscriber) {
        if (subscriber instanceof Queue_1.Queue ||
            subscriber.queue) {
            subscriber = subscriber;
            this.addQueueSubscriber(scope, subscriber);
        }
        else {
            subscriber = subscriber;
            this.addFunctionSubscriber(scope, subscriber);
        }
    }
    addQueueSubscriber(scope, subscriber) {
        // Parse subscriber props
        let subscriberProps;
        let queue;
        if (subscriber instanceof Queue_1.Queue) {
            subscriber = subscriber;
            queue = subscriber;
        }
        else {
            subscriber = subscriber;
            subscriberProps = subscriber.subscriberProps;
            queue = subscriber.queue;
        }
        this.subscribers.push(queue);
        // Create Subscription
        this.snsTopic.addSubscription(new snsSubscriptions.SqsSubscription(queue.sqsQueue, subscriberProps));
    }
    addFunctionSubscriber(scope, subscriber) {
        // Parse subscriber props
        let subscriberProps;
        let functionDefinition;
        if (subscriber.function) {
            subscriber = subscriber;
            subscriberProps = subscriber.subscriberProps;
            functionDefinition = subscriber.function;
        }
        else {
            subscriber = subscriber;
            functionDefinition = subscriber;
        }
        // Create function
        const i = this.subscribers.length;
        const fn = Function_1.Function.fromDefinition(scope, `Subscriber_${this.node.id}_${i}`, functionDefinition, this.defaultFunctionProps, `The "defaultFunctionProps" cannot be applied if an instance of a Function construct is passed in. Make sure to define all the subscribers using FunctionProps, so the Topic construct can apply the "defaultFunctionProps" to them.`);
        this.subscribers.push(fn);
        // Create Subscription
        this.snsTopic.addSubscription(new snsSubscriptions.LambdaSubscription(fn, subscriberProps));
        // Attach existing permissions
        this.permissionsAttachedForAllSubscribers.forEach((permissions) => fn.attachPermissions(permissions));
    }
}
exports.Topic = Topic;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9waWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvVG9waWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDJDQUF1QztBQUN2Qyx5REFBMkM7QUFDM0Msb0ZBQXNFO0FBRXRFLDJDQUtxQjtBQUNyQix5Q0FBK0U7QUFDL0UsbUNBQWdDO0FBNEJoQyxxQkFBcUI7QUFDckIsWUFBWTtBQUNaLHFCQUFxQjtBQUVyQixNQUFhLEtBQU0sU0FBUSxzQkFBUztJQU1sQyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQWtCO1FBQzFELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsb0JBQW9CLEVBQUUsR0FBRyxLQUFLLElBQUksRUFBRSxDQUFDO1FBQ3BFLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxvQ0FBb0MsR0FBRyxFQUFFLENBQUM7UUFDL0MsSUFBSSxDQUFDLG9CQUFvQixHQUFHLG9CQUFvQixDQUFDO1FBRWpELG9CQUFvQjtRQUNwQixlQUFlO1FBQ2Ysb0JBQW9CO1FBRXBCLElBQUksMEJBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUM1QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQXFCLENBQUM7U0FDdkM7YUFBTTtZQUNMLE1BQU0sYUFBYSxHQUFHLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBbUIsQ0FBQztZQUN6RCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxrQkFDekMsU0FBUyxFQUFFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsSUFDcEMsYUFBYSxFQUNoQixDQUFDO1NBQ0o7UUFFRCwy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LEdBQUcsVUFBZ0MsQ0FBQztZQUM5QyxrQkFBa0IsR0FBRyxVQUFVLENBQUM7U0FDakM7UUFFRCxrQkFBa0I7UUFDbEIsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUM7UUFDbEMsTUFBTSxFQUFFLEdBQUcsbUJBQUUsQ0FBQyxjQUFjLENBQzFCLEtBQUssRUFDTCxjQUFjLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUNqQyxrQkFBa0IsRUFDbEIsSUFBSSxDQUFDLG9CQUFvQixFQUN6QixxT0FBcU8sQ0FDdE8sQ0FBQztRQUNGLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRTFCLHNCQUFzQjtRQUN0QixJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FDM0IsSUFBSSxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLEVBQUUsZUFBZSxDQUFDLENBQzdELENBQUM7UUFFRiw4QkFBOEI7UUFDOUIsSUFBSSxDQUFDLG9DQUFvQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQ2hFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsQ0FDbEMsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXBNRCxzQkFvTUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0ICogYXMgc25zIGZyb20gXCJhd3MtY2RrLWxpYi9hd3Mtc25zXCI7XG5pbXBvcnQgKiBhcyBzbnNTdWJzY3JpcHRpb25zIGZyb20gXCJhd3MtY2RrLWxpYi9hd3Mtc25zLXN1YnNjcmlwdGlvbnNcIjtcbmltcG9ydCB7IEFwcCB9IGZyb20gXCIuL0FwcFwiO1xuaW1wb3J0IHtcbiAgZ2V0RnVuY3Rpb25SZWYsXG4gIFNTVENvbnN0cnVjdCxcbiAgaXNDREtDb25zdHJ1Y3QsXG4gIGlzQ0RLQ29uc3RydWN0T2YsXG59IGZyb20gXCIuL0NvbnN0cnVjdFwiO1xuaW1wb3J0IHsgRnVuY3Rpb24gYXMgRm4sIEZ1bmN0aW9uUHJvcHMsIEZ1bmN0aW9uRGVmaW5pdGlvbiB9IGZyb20gXCIuL0Z1bmN0aW9uXCI7XG5pbXBvcnQgeyBRdWV1ZSB9IGZyb20gXCIuL1F1ZXVlXCI7XG5pbXBvcnQgeyBQZXJtaXNzaW9ucyB9IGZyb20gXCIuL3V0aWwvcGVybWlzc2lvblwiO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEludGVyZmFjZXNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5leHBvcnQgaW50ZXJmYWNlIFRvcGljUHJvcHMge1xuICByZWFkb25seSBzbnNUb3BpYz86IHNucy5JVG9waWMgfCBzbnMuVG9waWNQcm9wcztcbiAgcmVhZG9ubHkgc3Vic2NyaWJlcnM/OiAoXG4gICAgfCBGdW5jdGlvbkRlZmluaXRpb25cbiAgICB8IFRvcGljRnVuY3Rpb25TdWJzY3JpYmVyUHJvcHNcbiAgICB8IFF1ZXVlXG4gICAgfCBUb3BpY1F1ZXVlU3Vic2NyaWJlclByb3BzXG4gIClbXTtcbiAgcmVhZG9ubHkgZGVmYXVsdEZ1bmN0aW9uUHJvcHM/OiBGdW5jdGlvblByb3BzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRvcGljRnVuY3Rpb25TdWJzY3JpYmVyUHJvcHMge1xuICByZWFkb25seSBmdW5jdGlvbjogRnVuY3Rpb25EZWZpbml0aW9uO1xuICByZWFkb25seSBzdWJzY3JpYmVyUHJvcHM/OiBzbnNTdWJzY3JpcHRpb25zLkxhbWJkYVN1YnNjcmlwdGlvblByb3BzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRvcGljUXVldWVTdWJzY3JpYmVyUHJvcHMge1xuICByZWFkb25seSBxdWV1ZTogUXVldWU7XG4gIHJlYWRvbmx5IHN1YnNjcmliZXJQcm9wcz86IHNuc1N1YnNjcmlwdGlvbnMuU3FzU3Vic2NyaXB0aW9uUHJvcHM7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gQ29uc3RydWN0XG4vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZXhwb3J0IGNsYXNzIFRvcGljIGV4dGVuZHMgQ29uc3RydWN0IGltcGxlbWVudHMgU1NUQ29uc3RydWN0IHtcbiAgcHVibGljIHJlYWRvbmx5IHNuc1RvcGljOiBzbnMuVG9waWM7XG4gIHByaXZhdGUgcmVhZG9ubHkgc3Vic2NyaWJlcnM6IChGbiB8IFF1ZXVlKVtdO1xuICBwcml2YXRlIHJlYWRvbmx5IHBlcm1pc3Npb25zQXR0YWNoZWRGb3JBbGxTdWJzY3JpYmVyczogUGVybWlzc2lvbnNbXTtcbiAgcHJpdmF0ZSByZWFkb25seSBkZWZhdWx0RnVuY3Rpb25Qcm9wcz86IEZ1bmN0aW9uUHJvcHM7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM/OiBUb3BpY1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgIGNvbnN0IHJvb3QgPSBzY29wZS5ub2RlLnJvb3QgYXMgQXBwO1xuICAgIGNvbnN0IHsgc25zVG9waWMsIHN1YnNjcmliZXJzLCBkZWZhdWx0RnVuY3Rpb25Qcm9wcyB9ID0gcHJvcHMgfHwge307XG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IFtdO1xuICAgIHRoaXMucGVybWlzc2lvbnNBdHRhY2hlZEZvckFsbFN1YnNjcmliZXJzID0gW107XG4gICAgdGhpcy5kZWZhdWx0RnVuY3Rpb25Qcm9wcyA9IGRlZmF1bHRGdW5jdGlvblByb3BzO1xuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBDcmVhdGUgVG9waWNcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgaWYgKGlzQ0RLQ29uc3RydWN0KHNuc1RvcGljKSkge1xuICAgICAgdGhpcy5zbnNUb3BpYyA9IHNuc1RvcGljIGFzIHNucy5Ub3BpYztcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc25zVG9waWNQcm9wcyA9IChzbnNUb3BpYyB8fCB7fSkgYXMgc25zLlRvcGljUHJvcHM7XG4gICAgICB0aGlzLnNuc1RvcGljID0gbmV3IHNucy5Ub3BpYyh0aGlzLCBcIlRvcGljXCIsIHtcbiAgICAgICAgdG9waWNOYW1lOiByb290LmxvZ2ljYWxQcmVmaXhlZE5hbWUoaWQpLFxuICAgICAgICAuLi5zbnNUb3BpY1Byb3BzLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gQ3JlYXRlIFN1YnNjcmliZXJzXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICB0aGlzLmFkZFN1YnNjcmliZXJzKHRoaXMsIHN1YnNjcmliZXJzIHx8IFtdKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgdG9waWNBcm4oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5zbnNUb3BpYy50b3BpY0FybjtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgdG9waWNOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuc25zVG9waWMudG9waWNOYW1lO1xuICB9XG5cbiAgcHVibGljIGdldCBzdWJzY3JpYmVyRnVuY3Rpb25zKCk6IEZuW10ge1xuICAgIHJldHVybiB0aGlzLnN1YnNjcmliZXJzLmZpbHRlcihcbiAgICAgIChzdWJzY3JpYmVyKSA9PiBzdWJzY3JpYmVyIGluc3RhbmNlb2YgRm5cbiAgICApIGFzIEZuW107XG4gIH1cblxuICBwdWJsaWMgZ2V0IHNuc1N1YnNjcmlwdGlvbnMoKTogc25zLlN1YnNjcmlwdGlvbltdIHtcbiAgICByZXR1cm4gdGhpcy5zdWJzY3JpYmVycy5tYXAoKHN1YikgPT4ge1xuICAgICAgbGV0IGNoaWxkcmVuO1xuICAgICAgLy8gbG9vayBmb3Igc25zLlN1YnNjcmlwdGlvbiBpbnNpZGUgUXVldWUuc3FzUXVldWVcbiAgICAgIGlmIChzdWIgaW5zdGFuY2VvZiBRdWV1ZSkge1xuICAgICAgICBjaGlsZHJlbiA9IHN1Yi5zcXNRdWV1ZS5ub2RlLmNoaWxkcmVuO1xuICAgICAgfVxuICAgICAgLy8gbG9vayBmb3Igc25zLlN1YnNjcmlwdGlvbiBpbnNpZGUgRnVuY3Rpb25cbiAgICAgIGVsc2Uge1xuICAgICAgICBjaGlsZHJlbiA9IHN1Yi5ub2RlLmNoaWxkcmVuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuLmZpbmQoKGNoaWxkKSA9PiB7XG4gICAgICAgIHJldHVybiBpc0NES0NvbnN0cnVjdE9mKFxuICAgICAgICAgIGNoaWxkIGFzIENvbnN0cnVjdCxcbiAgICAgICAgICBcImF3cy1jZGstbGliLmF3c19zbnMuU3Vic2NyaXB0aW9uXCJcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNoaWxkIGFzIHNucy5TdWJzY3JpcHRpb247XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYWRkU3Vic2NyaWJlcnMoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBzdWJzY3JpYmVyczogKFxuICAgICAgfCBGdW5jdGlvbkRlZmluaXRpb25cbiAgICAgIHwgVG9waWNGdW5jdGlvblN1YnNjcmliZXJQcm9wc1xuICAgICAgfCBRdWV1ZVxuICAgICAgfCBUb3BpY1F1ZXVlU3Vic2NyaWJlclByb3BzXG4gICAgKVtdXG4gICk6IHZvaWQge1xuICAgIHN1YnNjcmliZXJzLmZvckVhY2goKHN1YnNjcmliZXIpID0+IHRoaXMuYWRkU3Vic2NyaWJlcihzY29wZSwgc3Vic2NyaWJlcikpO1xuICB9XG5cbiAgcHVibGljIGF0dGFjaFBlcm1pc3Npb25zKHBlcm1pc3Npb25zOiBQZXJtaXNzaW9ucyk6IHZvaWQge1xuICAgIHRoaXMuc3Vic2NyaWJlcnNcbiAgICAgIC5maWx0ZXIoKHN1YnNjcmliZXIpID0+IHN1YnNjcmliZXIgaW5zdGFuY2VvZiBGbilcbiAgICAgIC5mb3JFYWNoKChzdWJzY3JpYmVyKSA9PiBzdWJzY3JpYmVyLmF0dGFjaFBlcm1pc3Npb25zKHBlcm1pc3Npb25zKSk7XG4gICAgdGhpcy5wZXJtaXNzaW9uc0F0dGFjaGVkRm9yQWxsU3Vic2NyaWJlcnMucHVzaChwZXJtaXNzaW9ucyk7XG4gIH1cblxuICBwdWJsaWMgYXR0YWNoUGVybWlzc2lvbnNUb1N1YnNjcmliZXIoXG4gICAgaW5kZXg6IG51bWJlcixcbiAgICBwZXJtaXNzaW9uczogUGVybWlzc2lvbnNcbiAgKTogdm9pZCB7XG4gICAgY29uc3Qgc3Vic2NyaWJlciA9IHRoaXMuc3Vic2NyaWJlcnNbaW5kZXhdO1xuICAgIGlmICghKHN1YnNjcmliZXIgaW5zdGFuY2VvZiBGbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYENhbm5vdCBhdHRhY2ggcGVybWlzc2lvbnMgdG8gdGhlIFwiJHt0aGlzLm5vZGUuaWR9XCIgVG9waWMgc3Vic2NyaWJlciBiZWNhdXNlIGl0J3Mgbm90IGEgTGFtYmRhIGZ1bmN0aW9uYFxuICAgICAgKTtcbiAgICB9XG4gICAgc3Vic2NyaWJlci5hdHRhY2hQZXJtaXNzaW9ucyhwZXJtaXNzaW9ucyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0Q29uc3RydWN0TWV0YWRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiVG9waWNcIiBhcyBjb25zdCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgdG9waWNBcm46IHRoaXMuc25zVG9waWMudG9waWNBcm4sXG4gICAgICAgIHN1YnNjcmliZXJzOiB0aGlzLnN1YnNjcmliZXJzLm1hcCgocykgPT4gZ2V0RnVuY3Rpb25SZWYocykhKSxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgYWRkU3Vic2NyaWJlcihcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIHN1YnNjcmliZXI6XG4gICAgICB8IEZ1bmN0aW9uRGVmaW5pdGlvblxuICAgICAgfCBUb3BpY0Z1bmN0aW9uU3Vic2NyaWJlclByb3BzXG4gICAgICB8IFF1ZXVlXG4gICAgICB8IFRvcGljUXVldWVTdWJzY3JpYmVyUHJvcHNcbiAgKTogdm9pZCB7XG4gICAgaWYgKFxuICAgICAgc3Vic2NyaWJlciBpbnN0YW5jZW9mIFF1ZXVlIHx8XG4gICAgICAoc3Vic2NyaWJlciBhcyBUb3BpY1F1ZXVlU3Vic2NyaWJlclByb3BzKS5xdWV1ZVxuICAgICkge1xuICAgICAgc3Vic2NyaWJlciA9IHN1YnNjcmliZXIgYXMgUXVldWUgfCBUb3BpY1F1ZXVlU3Vic2NyaWJlclByb3BzO1xuICAgICAgdGhpcy5hZGRRdWV1ZVN1YnNjcmliZXIoc2NvcGUsIHN1YnNjcmliZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdWJzY3JpYmVyID0gc3Vic2NyaWJlciBhc1xuICAgICAgICB8IEZ1bmN0aW9uRGVmaW5pdGlvblxuICAgICAgICB8IFRvcGljRnVuY3Rpb25TdWJzY3JpYmVyUHJvcHM7XG4gICAgICB0aGlzLmFkZEZ1bmN0aW9uU3Vic2NyaWJlcihzY29wZSwgc3Vic2NyaWJlcik7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhZGRRdWV1ZVN1YnNjcmliZXIoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBzdWJzY3JpYmVyOiBRdWV1ZSB8IFRvcGljUXVldWVTdWJzY3JpYmVyUHJvcHNcbiAgKTogdm9pZCB7XG4gICAgLy8gUGFyc2Ugc3Vic2NyaWJlciBwcm9wc1xuICAgIGxldCBzdWJzY3JpYmVyUHJvcHM7XG4gICAgbGV0IHF1ZXVlO1xuICAgIGlmIChzdWJzY3JpYmVyIGluc3RhbmNlb2YgUXVldWUpIHtcbiAgICAgIHN1YnNjcmliZXIgPSBzdWJzY3JpYmVyIGFzIFF1ZXVlO1xuICAgICAgcXVldWUgPSBzdWJzY3JpYmVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdWJzY3JpYmVyID0gc3Vic2NyaWJlciBhcyBUb3BpY1F1ZXVlU3Vic2NyaWJlclByb3BzO1xuICAgICAgc3Vic2NyaWJlclByb3BzID0gc3Vic2NyaWJlci5zdWJzY3JpYmVyUHJvcHM7XG4gICAgICBxdWV1ZSA9IHN1YnNjcmliZXIucXVldWU7XG4gICAgfVxuICAgIHRoaXMuc3Vic2NyaWJlcnMucHVzaChxdWV1ZSk7XG5cbiAgICAvLyBDcmVhdGUgU3Vic2NyaXB0aW9uXG4gICAgdGhpcy5zbnNUb3BpYy5hZGRTdWJzY3JpcHRpb24oXG4gICAgICBuZXcgc25zU3Vic2NyaXB0aW9ucy5TcXNTdWJzY3JpcHRpb24ocXVldWUuc3FzUXVldWUsIHN1YnNjcmliZXJQcm9wcylcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRGdW5jdGlvblN1YnNjcmliZXIoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBzdWJzY3JpYmVyOiBGdW5jdGlvbkRlZmluaXRpb24gfCBUb3BpY0Z1bmN0aW9uU3Vic2NyaWJlclByb3BzXG4gICk6IHZvaWQge1xuICAgIC8vIFBhcnNlIHN1YnNjcmliZXIgcHJvcHNcbiAgICBsZXQgc3Vic2NyaWJlclByb3BzO1xuICAgIGxldCBmdW5jdGlvbkRlZmluaXRpb247XG4gICAgaWYgKChzdWJzY3JpYmVyIGFzIFRvcGljRnVuY3Rpb25TdWJzY3JpYmVyUHJvcHMpLmZ1bmN0aW9uKSB7XG4gICAgICBzdWJzY3JpYmVyID0gc3Vic2NyaWJlciBhcyBUb3BpY0Z1bmN0aW9uU3Vic2NyaWJlclByb3BzO1xuICAgICAgc3Vic2NyaWJlclByb3BzID0gc3Vic2NyaWJlci5zdWJzY3JpYmVyUHJvcHM7XG4gICAgICBmdW5jdGlvbkRlZmluaXRpb24gPSBzdWJzY3JpYmVyLmZ1bmN0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdWJzY3JpYmVyID0gc3Vic2NyaWJlciBhcyBGdW5jdGlvbkRlZmluaXRpb247XG4gICAgICBmdW5jdGlvbkRlZmluaXRpb24gPSBzdWJzY3JpYmVyO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSBmdW5jdGlvblxuICAgIGNvbnN0IGkgPSB0aGlzLnN1YnNjcmliZXJzLmxlbmd0aDtcbiAgICBjb25zdCBmbiA9IEZuLmZyb21EZWZpbml0aW9uKFxuICAgICAgc2NvcGUsXG4gICAgICBgU3Vic2NyaWJlcl8ke3RoaXMubm9kZS5pZH1fJHtpfWAsXG4gICAgICBmdW5jdGlvbkRlZmluaXRpb24sXG4gICAgICB0aGlzLmRlZmF1bHRGdW5jdGlvblByb3BzLFxuICAgICAgYFRoZSBcImRlZmF1bHRGdW5jdGlvblByb3BzXCIgY2Fubm90IGJlIGFwcGxpZWQgaWYgYW4gaW5zdGFuY2Ugb2YgYSBGdW5jdGlvbiBjb25zdHJ1Y3QgaXMgcGFzc2VkIGluLiBNYWtlIHN1cmUgdG8gZGVmaW5lIGFsbCB0aGUgc3Vic2NyaWJlcnMgdXNpbmcgRnVuY3Rpb25Qcm9wcywgc28gdGhlIFRvcGljIGNvbnN0cnVjdCBjYW4gYXBwbHkgdGhlIFwiZGVmYXVsdEZ1bmN0aW9uUHJvcHNcIiB0byB0aGVtLmBcbiAgICApO1xuICAgIHRoaXMuc3Vic2NyaWJlcnMucHVzaChmbik7XG5cbiAgICAvLyBDcmVhdGUgU3Vic2NyaXB0aW9uXG4gICAgdGhpcy5zbnNUb3BpYy5hZGRTdWJzY3JpcHRpb24oXG4gICAgICBuZXcgc25zU3Vic2NyaXB0aW9ucy5MYW1iZGFTdWJzY3JpcHRpb24oZm4sIHN1YnNjcmliZXJQcm9wcylcbiAgICApO1xuXG4gICAgLy8gQXR0YWNoIGV4aXN0aW5nIHBlcm1pc3Npb25zXG4gICAgdGhpcy5wZXJtaXNzaW9uc0F0dGFjaGVkRm9yQWxsU3Vic2NyaWJlcnMuZm9yRWFjaCgocGVybWlzc2lvbnMpID0+XG4gICAgICBmbi5hdHRhY2hQZXJtaXNzaW9ucyhwZXJtaXNzaW9ucylcbiAgICApO1xuICB9XG59XG4iXX0=