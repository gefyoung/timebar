import { Construct } from "constructs";
import * as sqs from "aws-cdk-lib/aws-sqs";
import * as lambdaEventSources from "aws-cdk-lib/aws-lambda-event-sources";
import { SSTConstruct } from "./Construct";
import { Function as Fn, FunctionDefinition } from "./Function";
import { Permissions } from "./util/permission";
export interface QueueProps {
    readonly sqsQueue?: sqs.IQueue | sqs.QueueProps;
    readonly consumer?: FunctionDefinition | QueueConsumerProps;
}
export interface QueueConsumerProps {
    readonly function: FunctionDefinition;
    readonly consumerProps?: lambdaEventSources.SqsEventSourceProps;
}
export declare class Queue extends Construct implements SSTConstruct {
    readonly sqsQueue: sqs.Queue;
    consumerFunction?: Fn;
    private readonly permissionsAttachedForAllConsumers;
    constructor(scope: Construct, id: string, props?: QueueProps);
    addConsumer(scope: Construct, consumer: FunctionDefinition | QueueConsumerProps): void;
    attachPermissions(permissions: Permissions): void;
    getConstructMetadata(): {
        type: "Queue";
        data: {
            name: string;
            url: string;
            consumer: {
                node: string;
                stack: string;
            } | undefined;
        };
    };
}
