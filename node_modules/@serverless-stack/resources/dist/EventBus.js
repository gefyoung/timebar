"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventBus = void 0;
const constructs_1 = require("constructs");
const events = __importStar(require("aws-cdk-lib/aws-events"));
const eventsTargets = __importStar(require("aws-cdk-lib/aws-events-targets"));
const Queue_1 = require("./Queue");
const Construct_1 = require("./Construct");
const Function_1 = require("./Function");
/////////////////////
// Construct
/////////////////////
class EventBus extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const root = scope.node.root;
        const { eventBridgeEventBus, rules, defaultFunctionProps } = props || {};
        this.targetsData = {};
        this.permissionsAttachedForAllTargets = [];
        this.defaultFunctionProps = defaultFunctionProps;
        ////////////////////
        // Create EventBus
        ////////////////////
        if (Construct_1.isCDKConstruct(eventBridgeEventBus)) {
            this.eventBridgeEventBus = eventBridgeEventBus;
        }
        else {
            const ebProps = (eventBridgeEventBus || {});
            this.eventBridgeEventBus = new events.EventBus(this, "EventBus", Object.assign({ 
                // Note: Set default eventBusName only if eventSourceName is not configured.
                //       This is because both cannot be configured at the same time.
                eventBusName: ebProps.eventSourceName
                    ? undefined
                    : root.logicalPrefixedName(id) }, ebProps));
        }
        ///////////////////////////
        // Create Targets
        ///////////////////////////
        this.addRules(this, rules || {});
    }
    get eventBusArn() {
        return this.eventBridgeEventBus.eventBusArn;
    }
    get eventBusName() {
        return this.eventBridgeEventBus.eventBusName;
    }
    addRules(scope, rules) {
        Object.entries(rules).forEach(([ruleKey, rule]) => this.addRule(scope, ruleKey, rule));
    }
    attachPermissions(permissions) {
        Object.keys(this.targetsData).forEach((ruleKey) => {
            this.targetsData[ruleKey]
                .filter((target) => target instanceof Function_1.Function)
                .forEach((target) => target.attachPermissions(permissions));
        });
        this.permissionsAttachedForAllTargets.push(permissions);
    }
    attachPermissionsToTarget(ruleKey, targetIndex, permissions) {
        const rule = this.targetsData[ruleKey];
        if (!rule) {
            throw new Error(`Cannot find the rule "${ruleKey}" in the "${this.node.id}" EventBus.`);
        }
        const target = rule[targetIndex];
        if (!(target instanceof Function_1.Function)) {
            throw new Error(`Cannot attach permissions to the "${this.node.id}" EventBus target because it's not a Lambda function`);
        }
        target.attachPermissions(permissions);
    }
    getConstructMetadata() {
        return {
            type: "EventBus",
            data: {
                eventBusName: this.eventBridgeEventBus.eventBusName,
                rules: Object.entries(this.targetsData).map(([key, targets]) => ({
                    key: key,
                    targets: targets.map(Construct_1.getFunctionRef).filter(Boolean),
                })),
            },
        };
    }
    addRule(scope, ruleKey, rule) {
        // Validate input
        // @ts-expect-error "eventBus" is not a prop
        if (rule.eventBus) {
            throw new Error(`Cannot configure the "rule.eventBus" in the "${this.node.id}" EventBus`);
        }
        // Validate rule not redefined
        if (this.targetsData[ruleKey]) {
            throw new Error(`A rule already exists for "${ruleKey}"`);
        }
        // Create Rule
        const root = this.node.root;
        const eventsRule = new events.Rule(scope, ruleKey, Object.assign(Object.assign({ ruleName: root.logicalPrefixedName(ruleKey) }, rule), { eventBus: this.eventBridgeEventBus, targets: [] }));
        // Create Targets
        (rule.targets || []).forEach((target) => this.addTarget(scope, ruleKey, eventsRule, target));
    }
    addTarget(scope, ruleKey, eventsRule, target) {
        if (target instanceof Queue_1.Queue || target.queue) {
            target = target;
            this.addQueueTarget(scope, ruleKey, eventsRule, target);
        }
        else {
            target = target;
            this.addFunctionTarget(scope, ruleKey, eventsRule, target);
        }
    }
    addQueueTarget(scope, ruleKey, eventsRule, target) {
        // Parse target props
        let targetProps;
        let queue;
        if (target instanceof Queue_1.Queue) {
            target = target;
            queue = target;
        }
        else {
            target = target;
            targetProps = target.targetProps;
            queue = target.queue;
        }
        this.targetsData[ruleKey] = this.targetsData[ruleKey] || [];
        this.targetsData[ruleKey].push(queue);
        // Create target
        eventsRule.addTarget(new eventsTargets.SqsQueue(queue.sqsQueue, targetProps));
    }
    addFunctionTarget(scope, ruleKey, eventsRule, target) {
        // Parse target props
        let targetProps;
        let functionDefinition;
        if (target.function) {
            target = target;
            targetProps = target.targetProps;
            functionDefinition = target.function;
        }
        else {
            target = target;
            functionDefinition = target;
        }
        // Create function
        this.targetsData[ruleKey] = this.targetsData[ruleKey] || [];
        const i = this.targetsData[ruleKey].length;
        const fn = Function_1.Function.fromDefinition(scope, `${ruleKey}_target_${i}`, functionDefinition, this.defaultFunctionProps, `The "defaultFunctionProps" cannot be applied if an instance of a Function construct is passed in. Make sure to define all the targets using FunctionProps, so the EventBus construct can apply the "defaultFunctionProps" to them.`);
        this.targetsData[ruleKey].push(fn);
        // Create target
        eventsRule.addTarget(new eventsTargets.LambdaFunction(fn, targetProps));
        // Attach existing permissions
        this.permissionsAttachedForAllTargets.forEach((permissions) => fn.attachPermissions(permissions));
    }
}
exports.EventBus = EventBus;
//# sourceMappingURL=data:application/json;base64,