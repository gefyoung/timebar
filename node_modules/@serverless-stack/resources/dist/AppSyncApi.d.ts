import { Construct } from "constructs";
import * as rds from "aws-cdk-lib/aws-rds";
import * as appsync from "@aws-cdk/aws-appsync-alpha";
import * as dynamodb from "aws-cdk-lib/aws-dynamodb";
import * as secretsmanager from "aws-cdk-lib/aws-secretsmanager";
import { Table } from "./Table";
import { SSTConstruct } from "./Construct";
import { Function as Fn, FunctionProps, FunctionDefinition } from "./Function";
import { Permissions } from "./util/permission";
export interface AppSyncApiProps {
    readonly graphqlApi?: appsync.IGraphqlApi | AppSyncApiCdkGraphqlProps;
    readonly dataSources?: {
        [key: string]: FunctionDefinition | AppSyncApiLambdaDataSourceProps | AppSyncApiDynamoDbDataSourceProps | AppSyncApiRdsDataSourceProps | AppSyncApiHttpDataSourceProps;
    };
    readonly resolvers?: {
        [key: string]: string | FunctionDefinition | AppSyncApiResolverProps;
    };
    readonly defaultFunctionProps?: FunctionProps;
}
export interface AppSyncApiLambdaDataSourceProps {
    readonly function: FunctionDefinition;
    readonly options?: appsync.DataSourceOptions;
}
export interface AppSyncApiDynamoDbDataSourceProps {
    readonly table: Table | dynamodb.Table;
    readonly options?: appsync.DataSourceOptions;
}
export interface AppSyncApiRdsDataSourceProps {
    readonly serverlessCluster: rds.IServerlessCluster;
    readonly secretStore: secretsmanager.ISecret;
    readonly databaseName?: string;
    readonly options?: appsync.DataSourceOptions;
}
export interface AppSyncApiHttpDataSourceProps {
    readonly endpoint: string;
    readonly options?: appsync.HttpDataSourceOptions;
}
export interface AppSyncApiResolverProps {
    readonly dataSource?: string;
    readonly function?: FunctionDefinition;
    readonly resolverProps?: AppSyncApiCdkResolverProps;
}
export interface AppSyncApiCdkGraphqlProps extends Omit<appsync.GraphqlApiProps, "name" | "schema"> {
    readonly name?: string;
    readonly schema?: string | string[] | appsync.Schema;
}
export declare type AppSyncApiCdkResolverProps = Omit<appsync.BaseResolverProps, "fieldName" | "typeName">;
export declare class AppSyncApi extends Construct implements SSTConstruct {
    readonly graphqlApi: appsync.GraphqlApi;
    private readonly functionsByDsKey;
    private readonly dataSourcesByDsKey;
    private readonly dsKeysByResKey;
    private readonly resolversByResKey;
    private readonly permissionsAttachedForAllFunctions;
    private readonly defaultFunctionProps?;
    constructor(scope: Construct, id: string, props?: AppSyncApiProps);
    get url(): string;
    addDataSources(scope: Construct, dataSources: {
        [key: string]: FunctionDefinition | AppSyncApiLambdaDataSourceProps | AppSyncApiDynamoDbDataSourceProps | AppSyncApiRdsDataSourceProps | AppSyncApiHttpDataSourceProps;
    }): void;
    addResolvers(scope: Construct, resolvers: {
        [key: string]: FunctionDefinition | AppSyncApiResolverProps;
    }): void;
    getConstructMetadata(): {
        type: "AppSync";
        data: {
            appSyncApiId: string;
            dataSources: {
                name: string;
                fn: {
                    node: string;
                    stack: string;
                } | undefined;
            }[];
        };
    };
    private addDataSource;
    private addResolver;
    private isLambdaResolverProps;
    private isDataSourceResolverProps;
    private normalizeResolverKey;
    private buildDataSourceKey;
    getFunction(key: string): Fn | undefined;
    getDataSource(key: string): appsync.BaseDataSource | undefined;
    getResolver(key: string): appsync.Resolver | undefined;
    attachPermissions(permissions: Permissions): void;
    attachPermissionsToDataSource(key: string, permissions: Permissions): void;
}
