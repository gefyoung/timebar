"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViteStaticSite = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
const StaticSite_1 = require("./StaticSite");
/////////////////////
// Construct
/////////////////////
class ViteStaticSite extends StaticSite_1.StaticSite {
    constructor(scope, id, props) {
        const { path: sitePath, environment, typesPath } = props || {};
        // generate buildCommand
        let defaultBuildCommand = "npm run build";
        if (fs.existsSync(path.join(sitePath, "yarn.lock"))) {
            defaultBuildCommand = "yarn build";
        }
        // create types file
        const defaultTypesPath = "src/sst-env.d.ts";
        if (typesPath === undefined && isTs(sitePath)) {
            const filePath = path.resolve(path.join(sitePath, defaultTypesPath));
            generateTypesFile(filePath, environment);
        }
        else if (typeof typesPath === "string") {
            const filePath = path.resolve(path.join(sitePath, typesPath));
            generateTypesFile(filePath, environment);
        }
        super(scope, id, Object.assign({ indexPage: "index.html", errorPage: StaticSite_1.StaticSiteErrorOptions.REDIRECT_TO_INDEX_PAGE, buildCommand: defaultBuildCommand, buildOutput: "dist", fileOptions: [
                {
                    exclude: "*",
                    include: "*.html",
                    cacheControl: "max-age=0,no-cache,no-store,must-revalidate",
                },
                {
                    exclude: "*",
                    include: ["*.js", "*.css"],
                    cacheControl: "max-age=31536000,public,immutable",
                },
            ] }, props));
    }
}
exports.ViteStaticSite = ViteStaticSite;
function isTs(sitePath) {
    return fs.existsSync(path.join(sitePath, "tsconfig.json"));
}
function generateTypesFile(typesFullPath, environment) {
    const content = `/// <reference types="vite/client" />

interface ImportMetaEnv {
${Object.keys(environment || {}).map(key => `  readonly ${key}: string`).join("\n")}
}

interface ImportMeta {
readonly env: ImportMetaEnv
}`;
    fs.ensureDirSync(path.dirname(typesFullPath));
    fs.writeFileSync(typesFullPath, content);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVml0ZVN0YXRpY1NpdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvVml0ZVN0YXRpY1NpdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDJDQUE2QjtBQUM3Qiw2Q0FBK0I7QUFHL0IsNkNBSXNCO0FBVXRCLHFCQUFxQjtBQUNyQixZQUFZO0FBQ1oscUJBQXFCO0FBRXJCLE1BQWEsY0FBZSxTQUFRLHVCQUFVO0lBQzVDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBMEI7UUFDbEUsTUFBTSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUM7UUFFL0Qsd0JBQXdCO1FBQ3hCLElBQUksbUJBQW1CLEdBQUcsZUFBZSxDQUFDO1FBQzFDLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQyxFQUFFO1lBQ25ELG1CQUFtQixHQUFHLFlBQVksQ0FBQztTQUNwQztRQUVELG9CQUFvQjtRQUNwQixNQUFNLGdCQUFnQixHQUFHLGtCQUFrQixDQUFDO1FBQzVDLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDN0MsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7WUFDckUsaUJBQWlCLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQzFDO2FBQ0ksSUFBSSxPQUFPLFNBQVMsS0FBSyxRQUFRLEVBQUU7WUFDdEMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQzlELGlCQUFpQixDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQztTQUMxQztRQUVELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxrQkFDYixTQUFTLEVBQUUsWUFBWSxFQUN2QixTQUFTLEVBQUUsbUNBQXNCLENBQUMsc0JBQXNCLEVBQ3hELFlBQVksRUFBRSxtQkFBbUIsRUFDakMsV0FBVyxFQUFFLE1BQU0sRUFDbkIsV0FBVyxFQUFFO2dCQUNYO29CQUNFLE9BQU8sRUFBRSxHQUFHO29CQUNaLE9BQU8sRUFBRSxRQUFRO29CQUNqQixZQUFZLEVBQUUsNkNBQTZDO2lCQUM1RDtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsR0FBRztvQkFDWixPQUFPLEVBQUUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDO29CQUMxQixZQUFZLEVBQUUsbUNBQW1DO2lCQUNsRDthQUNGLElBQ0UsS0FBSyxFQUNSLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUF6Q0Qsd0NBeUNDO0FBRUQsU0FBUyxJQUFJLENBQUMsUUFBZ0I7SUFDNUIsT0FBTyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLGVBQWUsQ0FBQyxDQUFDLENBQUM7QUFDN0QsQ0FBQztBQUVELFNBQVMsaUJBQWlCLENBQUMsYUFBcUIsRUFBRSxXQUF1QztJQUN2RixNQUFNLE9BQU8sR0FDZjs7O0VBR0UsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsY0FBYyxHQUFHLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7Ozs7O0VBS2pGLENBQUM7SUFFRCxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsYUFBYSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMzQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzLWV4dHJhXCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcblxuaW1wb3J0IHtcbiAgU3RhdGljU2l0ZSxcbiAgU3RhdGljU2l0ZVByb3BzLFxuICBTdGF0aWNTaXRlRXJyb3JPcHRpb25zLFxufSBmcm9tIFwiLi9TdGF0aWNTaXRlXCI7XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gSW50ZXJmYWNlc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmV4cG9ydCBpbnRlcmZhY2UgVml0ZVN0YXRpY1NpdGVQcm9wcyBleHRlbmRzIFN0YXRpY1NpdGVQcm9wcyB7XG4gIHJlYWRvbmx5IHR5cGVzUGF0aD86IHN0cmluZztcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBDb25zdHJ1Y3Rcbi8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5leHBvcnQgY2xhc3MgVml0ZVN0YXRpY1NpdGUgZXh0ZW5kcyBTdGF0aWNTaXRlIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFZpdGVTdGF0aWNTaXRlUHJvcHMpIHtcbiAgICBjb25zdCB7IHBhdGg6IHNpdGVQYXRoLCBlbnZpcm9ubWVudCwgdHlwZXNQYXRoIH0gPSBwcm9wcyB8fCB7fTtcblxuICAgIC8vIGdlbmVyYXRlIGJ1aWxkQ29tbWFuZFxuICAgIGxldCBkZWZhdWx0QnVpbGRDb21tYW5kID0gXCJucG0gcnVuIGJ1aWxkXCI7XG4gICAgaWYgKGZzLmV4aXN0c1N5bmMocGF0aC5qb2luKHNpdGVQYXRoLCBcInlhcm4ubG9ja1wiKSkpIHtcbiAgICAgIGRlZmF1bHRCdWlsZENvbW1hbmQgPSBcInlhcm4gYnVpbGRcIjtcbiAgICB9XG5cbiAgICAvLyBjcmVhdGUgdHlwZXMgZmlsZVxuICAgIGNvbnN0IGRlZmF1bHRUeXBlc1BhdGggPSBcInNyYy9zc3QtZW52LmQudHNcIjtcbiAgICBpZiAodHlwZXNQYXRoID09PSB1bmRlZmluZWQgJiYgaXNUcyhzaXRlUGF0aCkpIHtcbiAgICAgIGNvbnN0IGZpbGVQYXRoID0gcGF0aC5yZXNvbHZlKHBhdGguam9pbihzaXRlUGF0aCwgZGVmYXVsdFR5cGVzUGF0aCkpO1xuICAgICAgZ2VuZXJhdGVUeXBlc0ZpbGUoZmlsZVBhdGgsIGVudmlyb25tZW50KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHR5cGVzUGF0aCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgY29uc3QgZmlsZVBhdGggPSBwYXRoLnJlc29sdmUocGF0aC5qb2luKHNpdGVQYXRoLCB0eXBlc1BhdGgpKTtcbiAgICAgIGdlbmVyYXRlVHlwZXNGaWxlKGZpbGVQYXRoLCBlbnZpcm9ubWVudCk7XG4gICAgfVxuXG4gICAgc3VwZXIoc2NvcGUsIGlkLCB7XG4gICAgICBpbmRleFBhZ2U6IFwiaW5kZXguaHRtbFwiLFxuICAgICAgZXJyb3JQYWdlOiBTdGF0aWNTaXRlRXJyb3JPcHRpb25zLlJFRElSRUNUX1RPX0lOREVYX1BBR0UsXG4gICAgICBidWlsZENvbW1hbmQ6IGRlZmF1bHRCdWlsZENvbW1hbmQsXG4gICAgICBidWlsZE91dHB1dDogXCJkaXN0XCIsXG4gICAgICBmaWxlT3B0aW9uczogW1xuICAgICAgICB7XG4gICAgICAgICAgZXhjbHVkZTogXCIqXCIsXG4gICAgICAgICAgaW5jbHVkZTogXCIqLmh0bWxcIixcbiAgICAgICAgICBjYWNoZUNvbnRyb2w6IFwibWF4LWFnZT0wLG5vLWNhY2hlLG5vLXN0b3JlLG11c3QtcmV2YWxpZGF0ZVwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZXhjbHVkZTogXCIqXCIsXG4gICAgICAgICAgaW5jbHVkZTogW1wiKi5qc1wiLCBcIiouY3NzXCJdLFxuICAgICAgICAgIGNhY2hlQ29udHJvbDogXCJtYXgtYWdlPTMxNTM2MDAwLHB1YmxpYyxpbW11dGFibGVcIixcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICAuLi5wcm9wcyxcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1RzKHNpdGVQYXRoOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIGZzLmV4aXN0c1N5bmMocGF0aC5qb2luKHNpdGVQYXRoLCBcInRzY29uZmlnLmpzb25cIikpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVR5cGVzRmlsZSh0eXBlc0Z1bGxQYXRoOiBzdHJpbmcsIGVudmlyb25tZW50PzogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSkge1xuICBjb25zdCBjb250ZW50ID1cbmAvLy8gPHJlZmVyZW5jZSB0eXBlcz1cInZpdGUvY2xpZW50XCIgLz5cblxuaW50ZXJmYWNlIEltcG9ydE1ldGFFbnYge1xuJHtPYmplY3Qua2V5cyhlbnZpcm9ubWVudCB8fCB7fSkubWFwKGtleSA9PiBgICByZWFkb25seSAke2tleX06IHN0cmluZ2ApLmpvaW4oXCJcXG5cIil9XG59XG5cbmludGVyZmFjZSBJbXBvcnRNZXRhIHtcbnJlYWRvbmx5IGVudjogSW1wb3J0TWV0YUVudlxufWA7XG5cbiAgZnMuZW5zdXJlRGlyU3luYyhwYXRoLmRpcm5hbWUodHlwZXNGdWxsUGF0aCkpO1xuICBmcy53cml0ZUZpbGVTeW5jKHR5cGVzRnVsbFBhdGgsIGNvbnRlbnQpO1xufVxuIl19