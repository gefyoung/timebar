import { Construct } from "constructs";
import * as logs from "aws-cdk-lib/aws-logs";
import * as acm from "aws-cdk-lib/aws-certificatemanager";
import * as apig from "@aws-cdk/aws-apigatewayv2-alpha";
import * as apigAuthorizers from "@aws-cdk/aws-apigatewayv2-authorizers-alpha";
import { SSTConstruct } from "./Construct";
import { Function as Fn, FunctionProps, FunctionDefinition } from "./Function";
import { Permissions } from "./util/permission";
import * as apigV2Domain from "./util/apiGatewayV2Domain";
import * as apigV2AccessLog from "./util/apiGatewayV2AccessLog";
export declare enum WebSocketApiAuthorizationType {
    NONE = "NONE",
    IAM = "AWS_IAM",
    CUSTOM = "CUSTOM"
}
export interface WebSocketApiProps {
    readonly webSocketApi?: apig.IWebSocketApi | apig.WebSocketApiProps;
    readonly webSocketStage?: apig.IWebSocketStage | WebSocketApiCdkStageProps;
    readonly routes?: {
        [key: string]: FunctionDefinition;
    };
    readonly accessLog?: boolean | string | WebSocketApiAcccessLogProps;
    readonly customDomain?: string | WebSocketApiCustomDomainProps;
    readonly authorizationType?: WebSocketApiAuthorizationType;
    readonly authorizer?: apigAuthorizers.WebSocketLambdaAuthorizer;
    readonly defaultFunctionProps?: FunctionProps;
}
export declare type WebSocketApiCustomDomainProps = apigV2Domain.CustomDomainProps;
export declare type WebSocketApiAcccessLogProps = apigV2AccessLog.AccessLogProps;
export interface WebSocketApiCdkStageProps extends Omit<apig.WebSocketStageProps, "webSocketApi" | "stageName"> {
    readonly stageName?: string;
}
export declare class WebSocketApi extends Construct implements SSTConstruct {
    readonly webSocketApi: apig.WebSocketApi;
    readonly webSocketStage: apig.WebSocketStage;
    readonly _customDomainUrl?: string;
    readonly accessLogGroup?: logs.LogGroup;
    readonly apiGatewayDomain?: apig.DomainName;
    readonly acmCertificate?: acm.Certificate;
    private readonly functions;
    private readonly permissionsAttachedForAllRoutes;
    private readonly authorizationType?;
    private readonly authorizer?;
    private readonly defaultFunctionProps?;
    constructor(scope: Construct, id: string, props?: WebSocketApiProps);
    get url(): string;
    get customDomainUrl(): string | undefined;
    get routes(): string[];
    get _connectionsArn(): string;
    addRoutes(scope: Construct, routes: {
        [key: string]: FunctionDefinition;
    }): void;
    getFunction(routeKey: string): Fn | undefined;
    attachPermissions(permissions: Permissions): void;
    attachPermissionsToRoute(routeKey: string, permissions: Permissions): void;
    getConstructMetadata(): {
        type: "WebSocketApi";
        data: {
            httpApiId: string;
            customDomainUrl: string | undefined;
            routes: {
                route: string;
                fn: {
                    node: string;
                    stack: string;
                } | undefined;
            }[];
        };
    };
    private addRoute;
    private buildRouteAuth;
    private normalizeRouteKey;
}
