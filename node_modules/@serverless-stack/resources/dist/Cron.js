"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cron = void 0;
const constructs_1 = require("constructs");
const cdk = __importStar(require("aws-cdk-lib"));
const events = __importStar(require("aws-cdk-lib/aws-events"));
const eventsTargets = __importStar(require("aws-cdk-lib/aws-events-targets"));
const Construct_1 = require("./Construct");
const Function_1 = require("./Function");
class Cron extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const { 
        // Topic props
        schedule, eventsRule, 
        // Function props
        job, } = props;
        ///////////////////////////
        // Create Rule
        ///////////////////////////
        const eventsRuleProps = (eventsRule || {});
        // Validate: cannot set eventsRule.schedule
        if (eventsRuleProps.schedule) {
            throw new Error(`Do not configure the "eventsRule.schedule". Use the "schedule" to configure the Cron schedule.`);
        }
        // Validate: schedule is set
        if (!schedule) {
            throw new Error(`No schedule defined for the "${id}" Cron`);
        }
        // Configure Schedule
        let propSchedule;
        if (typeof schedule === "string" &&
            (schedule.startsWith("rate(") || schedule.startsWith("cron("))) {
            propSchedule = events.Schedule.expression(schedule);
        }
        else if (schedule instanceof cdk.Duration) {
            propSchedule = events.Schedule.rate(schedule);
        }
        else {
            propSchedule = events.Schedule.cron(schedule);
        }
        this.eventsRule = new events.Rule(this, "Rule", Object.assign({ schedule: propSchedule }, eventsRuleProps));
        ///////////////////////////
        // Create Targets
        ///////////////////////////
        if (!job) {
            throw new Error(`No job defined for the "${id}" Cron`);
        }
        // normalize job
        let jobFunction, jobProps;
        if (job.function) {
            jobFunction = job.function;
            jobProps = job.jobProps;
        }
        else {
            jobFunction = job;
            jobProps = {};
        }
        // create function
        this.jobFunction = Function_1.Function.fromDefinition(this, "Job", jobFunction);
        this.eventsRule.addTarget(new eventsTargets.LambdaFunction(this.jobFunction, jobProps));
    }
    attachPermissions(permissions) {
        this.jobFunction.attachPermissions(permissions);
    }
    getConstructMetadata() {
        const cfnRule = this.eventsRule.node.defaultChild;
        return {
            type: "Cron",
            data: {
                schedule: cfnRule.scheduleExpression,
                ruleName: this.eventsRule.ruleName,
                job: Construct_1.getFunctionRef(this.jobFunction),
            },
        };
    }
}
exports.Cron = Cron;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3Jvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9Dcm9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBdUM7QUFDdkMsaURBQW1DO0FBQ25DLCtEQUFpRDtBQUNqRCw4RUFBZ0U7QUFFaEUsMkNBQTJEO0FBQzNELHlDQUFrRTtBQWNsRSxNQUFhLElBQUssU0FBUSxzQkFBUztJQUlqQyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQWdCO1FBQ3hELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTTtRQUNKLGNBQWM7UUFDZCxRQUFRLEVBQ1IsVUFBVTtRQUNWLGlCQUFpQjtRQUNqQixHQUFHLEdBQ0osR0FBRyxLQUFLLENBQUM7UUFFViwyQkFBMkI7UUFDM0IsY0FBYztRQUNkLDJCQUEyQjtRQUUzQixNQUFNLGVBQWUsR0FBRyxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQXFCLENBQUM7UUFFL0QsMkNBQTJDO1FBQzNDLElBQUksZUFBZSxDQUFDLFFBQVEsRUFBRTtZQUM1QixNQUFNLElBQUksS0FBSyxDQUNiLGdHQUFnRyxDQUNqRyxDQUFDO1NBQ0g7UUFFRCw0QkFBNEI7UUFDNUIsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNiLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0NBQWdDLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDN0Q7UUFFRCxxQkFBcUI7UUFDckIsSUFBSSxZQUE2QixDQUFDO1FBQ2xDLElBQ0UsT0FBTyxRQUFRLEtBQUssUUFBUTtZQUM1QixDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksUUFBUSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUM5RDtZQUNBLFlBQVksR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNyRDthQUFNLElBQUksUUFBUSxZQUFZLEdBQUcsQ0FBQyxRQUFRLEVBQUU7WUFDM0MsWUFBWSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQy9DO2FBQU07WUFDTCxZQUFZLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBOEIsQ0FBQyxDQUFDO1NBQ3JFO1FBRUQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sa0JBQzVDLFFBQVEsRUFBRSxZQUFZLElBQ25CLGVBQWUsRUFDbEIsQ0FBQztRQUVILDJCQUEyQjtRQUMzQixpQkFBaUI7UUFDakIsMkJBQTJCO1FBRTNCLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDUixNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQ3hEO1FBRUQsZ0JBQWdCO1FBQ2hCLElBQUksV0FBVyxFQUFFLFFBQVEsQ0FBQztRQUMxQixJQUFLLEdBQW9CLENBQUMsUUFBUSxFQUFFO1lBQ2xDLFdBQVcsR0FBSSxHQUFvQixDQUFDLFFBQVEsQ0FBQztZQUM3QyxRQUFRLEdBQUksR0FBb0IsQ0FBQyxRQUFRLENBQUM7U0FDM0M7YUFBTTtZQUNMLFdBQVcsR0FBRyxHQUF5QixDQUFDO1lBQ3hDLFFBQVEsR0FBRyxFQUFFLENBQUM7U0FDZjtRQUVELGtCQUFrQjtRQUNsQixJQUFJLENBQUMsV0FBVyxHQUFHLG1CQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQ3ZCLElBQUksYUFBYSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUM3RCxDQUFDO0lBQ0osQ0FBQztJQUVNLGlCQUFpQixDQUFDLFdBQXdCO1FBQy9DLElBQUksQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVNLG9CQUFvQjtRQUN6QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxZQUE4QixDQUFDO1FBQ3BFLE9BQU87WUFDTCxJQUFJLEVBQUUsTUFBZTtZQUNyQixJQUFJLEVBQUU7Z0JBQ0osUUFBUSxFQUFFLE9BQU8sQ0FBQyxrQkFBa0I7Z0JBQ3BDLFFBQVEsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVE7Z0JBQ2xDLEdBQUcsRUFBRSwwQkFBYyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7YUFDdEM7U0FDRixDQUFDO0lBQ0osQ0FBQztDQUNGO0FBM0ZELG9CQTJGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSBcImF3cy1jZGstbGliXCI7XG5pbXBvcnQgKiBhcyBldmVudHMgZnJvbSBcImF3cy1jZGstbGliL2F3cy1ldmVudHNcIjtcbmltcG9ydCAqIGFzIGV2ZW50c1RhcmdldHMgZnJvbSBcImF3cy1jZGstbGliL2F3cy1ldmVudHMtdGFyZ2V0c1wiO1xuXG5pbXBvcnQgeyBnZXRGdW5jdGlvblJlZiwgU1NUQ29uc3RydWN0IH0gZnJvbSBcIi4vQ29uc3RydWN0XCI7XG5pbXBvcnQgeyBGdW5jdGlvbiBhcyBGdW5jLCBGdW5jdGlvbkRlZmluaXRpb24gfSBmcm9tIFwiLi9GdW5jdGlvblwiO1xuaW1wb3J0IHsgUGVybWlzc2lvbnMgfSBmcm9tIFwiLi91dGlsL3Blcm1pc3Npb25cIjtcblxuZXhwb3J0IGludGVyZmFjZSBDcm9uUHJvcHMge1xuICByZWFkb25seSBqb2I6IEZ1bmN0aW9uRGVmaW5pdGlvbiB8IENyb25Kb2JQcm9wcztcbiAgcmVhZG9ubHkgc2NoZWR1bGU/OiBzdHJpbmcgfCBjZGsuRHVyYXRpb24gfCBldmVudHMuQ3Jvbk9wdGlvbnM7XG4gIHJlYWRvbmx5IGV2ZW50c1J1bGU/OiBldmVudHMuUnVsZVByb3BzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENyb25Kb2JQcm9wcyB7XG4gIHJlYWRvbmx5IGZ1bmN0aW9uOiBGdW5jdGlvbkRlZmluaXRpb247XG4gIHJlYWRvbmx5IGpvYlByb3BzPzogZXZlbnRzVGFyZ2V0cy5MYW1iZGFGdW5jdGlvblByb3BzO1xufVxuXG5leHBvcnQgY2xhc3MgQ3JvbiBleHRlbmRzIENvbnN0cnVjdCBpbXBsZW1lbnRzIFNTVENvbnN0cnVjdCB7XG4gIHB1YmxpYyByZWFkb25seSBldmVudHNSdWxlOiBldmVudHMuUnVsZTtcbiAgcHVibGljIHJlYWRvbmx5IGpvYkZ1bmN0aW9uOiBGdW5jO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBDcm9uUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgY29uc3Qge1xuICAgICAgLy8gVG9waWMgcHJvcHNcbiAgICAgIHNjaGVkdWxlLFxuICAgICAgZXZlbnRzUnVsZSxcbiAgICAgIC8vIEZ1bmN0aW9uIHByb3BzXG4gICAgICBqb2IsXG4gICAgfSA9IHByb3BzO1xuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gQ3JlYXRlIFJ1bGVcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIGNvbnN0IGV2ZW50c1J1bGVQcm9wcyA9IChldmVudHNSdWxlIHx8IHt9KSBhcyBldmVudHMuUnVsZVByb3BzO1xuXG4gICAgLy8gVmFsaWRhdGU6IGNhbm5vdCBzZXQgZXZlbnRzUnVsZS5zY2hlZHVsZVxuICAgIGlmIChldmVudHNSdWxlUHJvcHMuc2NoZWR1bGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYERvIG5vdCBjb25maWd1cmUgdGhlIFwiZXZlbnRzUnVsZS5zY2hlZHVsZVwiLiBVc2UgdGhlIFwic2NoZWR1bGVcIiB0byBjb25maWd1cmUgdGhlIENyb24gc2NoZWR1bGUuYFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBWYWxpZGF0ZTogc2NoZWR1bGUgaXMgc2V0XG4gICAgaWYgKCFzY2hlZHVsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBzY2hlZHVsZSBkZWZpbmVkIGZvciB0aGUgXCIke2lkfVwiIENyb25gKTtcbiAgICB9XG5cbiAgICAvLyBDb25maWd1cmUgU2NoZWR1bGVcbiAgICBsZXQgcHJvcFNjaGVkdWxlOiBldmVudHMuU2NoZWR1bGU7XG4gICAgaWYgKFxuICAgICAgdHlwZW9mIHNjaGVkdWxlID09PSBcInN0cmluZ1wiICYmXG4gICAgICAoc2NoZWR1bGUuc3RhcnRzV2l0aChcInJhdGUoXCIpIHx8IHNjaGVkdWxlLnN0YXJ0c1dpdGgoXCJjcm9uKFwiKSlcbiAgICApIHtcbiAgICAgIHByb3BTY2hlZHVsZSA9IGV2ZW50cy5TY2hlZHVsZS5leHByZXNzaW9uKHNjaGVkdWxlKTtcbiAgICB9IGVsc2UgaWYgKHNjaGVkdWxlIGluc3RhbmNlb2YgY2RrLkR1cmF0aW9uKSB7XG4gICAgICBwcm9wU2NoZWR1bGUgPSBldmVudHMuU2NoZWR1bGUucmF0ZShzY2hlZHVsZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BTY2hlZHVsZSA9IGV2ZW50cy5TY2hlZHVsZS5jcm9uKHNjaGVkdWxlIGFzIGV2ZW50cy5Dcm9uT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgdGhpcy5ldmVudHNSdWxlID0gbmV3IGV2ZW50cy5SdWxlKHRoaXMsIFwiUnVsZVwiLCB7XG4gICAgICBzY2hlZHVsZTogcHJvcFNjaGVkdWxlLFxuICAgICAgLi4uZXZlbnRzUnVsZVByb3BzLFxuICAgIH0pO1xuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gQ3JlYXRlIFRhcmdldHNcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIGlmICgham9iKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIGpvYiBkZWZpbmVkIGZvciB0aGUgXCIke2lkfVwiIENyb25gKTtcbiAgICB9XG5cbiAgICAvLyBub3JtYWxpemUgam9iXG4gICAgbGV0IGpvYkZ1bmN0aW9uLCBqb2JQcm9wcztcbiAgICBpZiAoKGpvYiBhcyBDcm9uSm9iUHJvcHMpLmZ1bmN0aW9uKSB7XG4gICAgICBqb2JGdW5jdGlvbiA9IChqb2IgYXMgQ3JvbkpvYlByb3BzKS5mdW5jdGlvbjtcbiAgICAgIGpvYlByb3BzID0gKGpvYiBhcyBDcm9uSm9iUHJvcHMpLmpvYlByb3BzO1xuICAgIH0gZWxzZSB7XG4gICAgICBqb2JGdW5jdGlvbiA9IGpvYiBhcyBGdW5jdGlvbkRlZmluaXRpb247XG4gICAgICBqb2JQcm9wcyA9IHt9O1xuICAgIH1cblxuICAgIC8vIGNyZWF0ZSBmdW5jdGlvblxuICAgIHRoaXMuam9iRnVuY3Rpb24gPSBGdW5jLmZyb21EZWZpbml0aW9uKHRoaXMsIFwiSm9iXCIsIGpvYkZ1bmN0aW9uKTtcbiAgICB0aGlzLmV2ZW50c1J1bGUuYWRkVGFyZ2V0KFxuICAgICAgbmV3IGV2ZW50c1RhcmdldHMuTGFtYmRhRnVuY3Rpb24odGhpcy5qb2JGdW5jdGlvbiwgam9iUHJvcHMpXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBhdHRhY2hQZXJtaXNzaW9ucyhwZXJtaXNzaW9uczogUGVybWlzc2lvbnMpOiB2b2lkIHtcbiAgICB0aGlzLmpvYkZ1bmN0aW9uLmF0dGFjaFBlcm1pc3Npb25zKHBlcm1pc3Npb25zKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRDb25zdHJ1Y3RNZXRhZGF0YSgpIHtcbiAgICBjb25zdCBjZm5SdWxlID0gdGhpcy5ldmVudHNSdWxlLm5vZGUuZGVmYXVsdENoaWxkIGFzIGV2ZW50cy5DZm5SdWxlO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIkNyb25cIiBhcyBjb25zdCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgc2NoZWR1bGU6IGNmblJ1bGUuc2NoZWR1bGVFeHByZXNzaW9uLFxuICAgICAgICBydWxlTmFtZTogdGhpcy5ldmVudHNSdWxlLnJ1bGVOYW1lLFxuICAgICAgICBqb2I6IGdldEZ1bmN0aW9uUmVmKHRoaXMuam9iRnVuY3Rpb24pLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG59XG4iXX0=