"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppSyncApi = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
const graphql_1 = require("graphql");
const merge_1 = require("@graphql-tools/merge");
const load_files_1 = require("@graphql-tools/load-files");
const constructs_1 = require("constructs");
const appsync = __importStar(require("@aws-cdk/aws-appsync-alpha"));
const Table_1 = require("./Table");
const Construct_1 = require("./Construct");
const Function_1 = require("./Function");
/////////////////////
// Construct
/////////////////////
class AppSyncApi extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const root = scope.node.root;
        const { graphqlApi, dataSources, resolvers, defaultFunctionProps } = props || {};
        this.functionsByDsKey = {};
        this.dataSourcesByDsKey = {};
        this.resolversByResKey = {};
        this.dsKeysByResKey = {};
        this.permissionsAttachedForAllFunctions = [];
        this.defaultFunctionProps = defaultFunctionProps;
        ////////////////////
        // Create Api
        ////////////////////
        if (Construct_1.isCDKConstruct(graphqlApi)) {
            this.graphqlApi = graphqlApi;
        }
        else {
            const graphqlApiProps = (graphqlApi || {});
            // build schema
            let mainSchema;
            if (typeof graphqlApiProps.schema === "string") {
                mainSchema = appsync.Schema.fromAsset(graphqlApiProps.schema);
            }
            else if (Array.isArray(graphqlApiProps.schema)) {
                if (graphqlApiProps.schema.length > 0) {
                    // merge schema files
                    const mergedSchema = merge_1.mergeTypeDefs(load_files_1.loadFilesSync(graphqlApiProps.schema));
                    const filePath = path.join(root.buildDir, `appsyncapi-${id}-${this.node.addr}.graphql`);
                    fs.writeFileSync(filePath, graphql_1.print(mergedSchema));
                    mainSchema = appsync.Schema.fromAsset(filePath);
                }
            }
            else {
                mainSchema = graphqlApiProps.schema;
            }
            this.graphqlApi = new appsync.GraphqlApi(this, "Api", Object.assign(Object.assign({ name: root.logicalPrefixedName(id), xrayEnabled: true }, graphqlApiProps), { 
                // handle schema is "string"
                schema: mainSchema }));
        }
        ///////////////////////////
        // Configure data sources
        ///////////////////////////
        if (dataSources) {
            Object.keys(dataSources).forEach((key) => this.addDataSource(this, key, dataSources[key]));
        }
        ///////////////////////////
        // Configure resolvers
        ///////////////////////////
        if (resolvers) {
            Object.keys(resolvers).forEach((key) => this.addResolver(this, key, resolvers[key]));
        }
    }
    get url() {
        return this.graphqlApi.graphqlUrl;
    }
    addDataSources(scope, dataSources) {
        Object.keys(dataSources).forEach((key) => {
            // add data source
            const fn = this.addDataSource(scope, key, dataSources[key]);
            // attached existing permissions
            if (fn) {
                this.permissionsAttachedForAllFunctions.forEach((permissions) => fn.attachPermissions(permissions));
            }
        });
    }
    addResolvers(scope, resolvers) {
        Object.keys(resolvers).forEach((key) => {
            // add resolver
            const fn = this.addResolver(scope, key, resolvers[key]);
            // attached existing permissions
            if (fn) {
                this.permissionsAttachedForAllFunctions.forEach((permissions) => fn.attachPermissions(permissions));
            }
        });
    }
    getConstructMetadata() {
        return {
            type: "AppSync",
            data: {
                appSyncApiId: this.graphqlApi.apiId,
                dataSources: Object.entries(this.dataSourcesByDsKey).map(([key]) => ({
                    name: key,
                    fn: Construct_1.getFunctionRef(this.functionsByDsKey[key]),
                })),
            },
        };
    }
    addDataSource(scope, dsKey, dsValue) {
        let dataSource;
        let lambda;
        // Lambda ds
        if (dsValue.function) {
            dsValue = dsValue;
            lambda = Function_1.Function.fromDefinition(scope, `Lambda_${dsKey}`, dsValue.function, this.defaultFunctionProps, `Cannot define defaultFunctionProps when a Function is passed in to the "${dsKey} data source`);
            dataSource = this.graphqlApi.addLambdaDataSource(dsKey, lambda, dsValue.options);
        }
        // DynamoDb ds
        else if (dsValue.table) {
            dsValue = dsValue;
            const table = dsValue.table instanceof Table_1.Table
                ? dsValue.table.dynamodbTable
                : dsValue.table;
            dataSource = this.graphqlApi.addDynamoDbDataSource(dsKey, table, dsValue.options);
        }
        // Rds ds
        else if (dsValue.serverlessCluster) {
            dsValue = dsValue;
            dataSource = this.graphqlApi.addRdsDataSource(dsKey, dsValue.serverlessCluster, dsValue.secretStore, dsValue.databaseName, dsValue.options);
        }
        // Http ds
        else if (dsValue.endpoint) {
            dsValue = dsValue;
            dataSource = this.graphqlApi.addHttpDataSource(dsKey, dsValue.endpoint, dsValue.options);
        }
        // Lambda function
        else {
            dsValue = dsValue;
            lambda = Function_1.Function.fromDefinition(scope, `Lambda_${dsKey}`, dsValue, this.defaultFunctionProps, `Cannot define defaultFunctionProps when a Function is passed in to the "${dsKey} data source`);
            dataSource = this.graphqlApi.addLambdaDataSource(dsKey, lambda);
        }
        this.dataSourcesByDsKey[dsKey] = dataSource;
        if (lambda) {
            this.functionsByDsKey[dsKey] = lambda;
        }
        return lambda;
    }
    addResolver(scope, resKey, resValue) {
        // Normalize resKey
        resKey = this.normalizeResolverKey(resKey);
        // Get type and field
        const resolverKeyParts = resKey.split(" ");
        if (resolverKeyParts.length !== 2) {
            throw new Error(`Invalid resolver ${resKey}`);
        }
        const [typeName, fieldName] = resolverKeyParts;
        if (fieldName.length === 0) {
            throw new Error(`Invalid field defined for "${resKey}"`);
        }
        ///////////////////
        // Create data source if not created before
        ///////////////////
        let lambda;
        let dataSource;
        let dataSourceKey;
        let resolverProps;
        // DataSource key
        if (typeof resValue === "string" &&
            Object.keys(this.dataSourcesByDsKey).includes(resValue)) {
            dataSourceKey = resValue;
            dataSource = this.dataSourcesByDsKey[resValue];
            resolverProps = {};
        }
        // DataSource key not exist (string does not have a dot, assume it is referencing a data store)
        else if (typeof resValue === "string" && resValue.indexOf(".") === -1) {
            throw new Error(`Failed to create resolver "${resKey}". Data source "${resValue}" does not exist.`);
        }
        // Lambda resolver
        else if (this.isLambdaResolverProps(resValue)) {
            resValue = resValue;
            lambda = Function_1.Function.fromDefinition(scope, `Lambda_${typeName}_${fieldName}`, resValue.function, this.defaultFunctionProps, `Cannot define defaultFunctionProps when a Function is passed in to the "${resKey} resolver`);
            dataSourceKey = this.buildDataSourceKey(typeName, fieldName);
            dataSource = this.graphqlApi.addLambdaDataSource(dataSourceKey, lambda);
            resolverProps = resValue.resolverProps || {};
        }
        // DataSource resolver
        else if (this.isDataSourceResolverProps(resValue)) {
            resValue = resValue;
            dataSourceKey = resValue.dataSource;
            dataSource = this.dataSourcesByDsKey[dataSourceKey];
            resolverProps = resValue.resolverProps || {};
        }
        // Lambda function
        else {
            resValue = resValue;
            lambda = Function_1.Function.fromDefinition(scope, `Lambda_${typeName}_${fieldName}`, resValue, this.defaultFunctionProps, `Cannot define defaultFunctionProps when a Function is passed in to the "${resKey} resolver`);
            dataSourceKey = this.buildDataSourceKey(typeName, fieldName);
            dataSource = this.graphqlApi.addLambdaDataSource(dataSourceKey, lambda);
            resolverProps = {};
        }
        // Store new data source created
        if (lambda) {
            this.dataSourcesByDsKey[dataSourceKey] = dataSource;
            this.functionsByDsKey[dataSourceKey] = lambda;
        }
        this.dsKeysByResKey[resKey] = dataSourceKey;
        ///////////////////
        // Create resolver
        ///////////////////
        const resolver = this.graphqlApi.createResolver(Object.assign({ dataSource,
            typeName,
            fieldName }, resolverProps));
        this.resolversByResKey[resKey] = resolver;
        return lambda;
    }
    isLambdaResolverProps(object) {
        return object.function !== undefined;
    }
    isDataSourceResolverProps(object) {
        return object.dataSource !== undefined;
    }
    normalizeResolverKey(resolverKey) {
        // remove extra spaces in the key
        return resolverKey.split(/\s+/).join(" ");
    }
    buildDataSourceKey(typeName, fieldName) {
        return `LambdaDS_${typeName}_${fieldName}`;
    }
    getFunction(key) {
        let fn = this.functionsByDsKey[key];
        if (!fn) {
            const resKey = this.normalizeResolverKey(key);
            const dsKey = this.dsKeysByResKey[resKey];
            fn = this.functionsByDsKey[dsKey];
        }
        return fn;
    }
    getDataSource(key) {
        let ds = this.dataSourcesByDsKey[key];
        if (!ds) {
            const resKey = this.normalizeResolverKey(key);
            const dsKey = this.dsKeysByResKey[resKey];
            ds = this.dataSourcesByDsKey[dsKey];
        }
        return ds;
    }
    getResolver(key) {
        const resKey = this.normalizeResolverKey(key);
        return this.resolversByResKey[resKey];
    }
    attachPermissions(permissions) {
        Object.values(this.functionsByDsKey).forEach((fn) => fn.attachPermissions(permissions));
        this.permissionsAttachedForAllFunctions.push(permissions);
    }
    attachPermissionsToDataSource(key, permissions) {
        const fn = this.getFunction(key);
        if (!fn) {
            throw new Error(`Failed to attach permissions. Function does not exist for key "${key}".`);
        }
        fn.attachPermissions(permissions);
    }
}
exports.AppSyncApi = AppSyncApi;
//# sourceMappingURL=data:application/json;base64,