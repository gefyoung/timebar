"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Api = exports.ApiPayloadFormatVersion = exports.ApiAuthorizationType = void 0;
const constructs_1 = require("constructs");
const apig = __importStar(require("@aws-cdk/aws-apigatewayv2-alpha"));
const apigIntegrations = __importStar(require("@aws-cdk/aws-apigatewayv2-integrations-alpha"));
const Stack_1 = require("./Stack");
const Construct_1 = require("./Construct");
const Function_1 = require("./Function");
const apigV2Domain = __importStar(require("./util/apiGatewayV2Domain"));
const apigV2AccessLog = __importStar(require("./util/apiGatewayV2AccessLog"));
const allowedMethods = [
    apig.HttpMethod.ANY,
    apig.HttpMethod.GET,
    apig.HttpMethod.PUT,
    apig.HttpMethod.POST,
    apig.HttpMethod.HEAD,
    apig.HttpMethod.PATCH,
    apig.HttpMethod.DELETE,
    apig.HttpMethod.OPTIONS,
];
var ApiAuthorizationType;
(function (ApiAuthorizationType) {
    ApiAuthorizationType["JWT"] = "JWT";
    ApiAuthorizationType["NONE"] = "NONE";
    ApiAuthorizationType["CUSTOM"] = "CUSTOM";
    ApiAuthorizationType["AWS_IAM"] = "AWS_IAM";
})(ApiAuthorizationType = exports.ApiAuthorizationType || (exports.ApiAuthorizationType = {}));
var ApiPayloadFormatVersion;
(function (ApiPayloadFormatVersion) {
    ApiPayloadFormatVersion["V1"] = "1.0";
    ApiPayloadFormatVersion["V2"] = "2.0";
})(ApiPayloadFormatVersion = exports.ApiPayloadFormatVersion || (exports.ApiPayloadFormatVersion = {}));
/////////////////////
// Construct
/////////////////////
class Api extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const root = scope.node.root;
        props = props || {};
        const { httpApi, routes, cors, accessLog, customDomain, defaultFunctionProps, defaultAuthorizer, defaultAuthorizationType, defaultAuthorizationScopes, defaultPayloadFormatVersion, defaultThrottlingBurstLimit, defaultThrottlingRateLimit, } = props;
        this.routesData = {};
        this.permissionsAttachedForAllRoutes = [];
        this.defaultFunctionProps = defaultFunctionProps;
        this.defaultAuthorizer = defaultAuthorizer;
        this.defaultAuthorizationType = defaultAuthorizationType;
        this.defaultAuthorizationScopes = defaultAuthorizationScopes;
        this.defaultPayloadFormatVersion = defaultPayloadFormatVersion;
        ////////////////////
        // Create Api
        ////////////////////
        if (Construct_1.isCDKConstruct(httpApi)) {
            if (cors !== undefined) {
                throw new Error(`Cannot configure the "cors" when "httpApi" is a construct`);
            }
            if (accessLog !== undefined) {
                throw new Error(`Cannot configure the "accessLog" when "httpApi" is a construct`);
            }
            if (customDomain !== undefined) {
                throw new Error(`Cannot configure the "customDomain" when "httpApi" is a construct`);
            }
            if (props.stages !== undefined) {
                throw new Error(`Cannot configure the "stages" when "httpApi" is a construct`);
            }
            this.httpApi = httpApi;
        }
        else {
            const httpApiProps = (httpApi || {});
            // Validate input
            if (httpApiProps.corsPreflight !== undefined) {
                throw new Error(`Cannot configure the "httpApi.corsPreflight" in the Api`);
            }
            if (httpApiProps.defaultDomainMapping !== undefined) {
                throw new Error(`Cannot configure the "httpApi.defaultDomainMapping" in the Api`);
            }
            // Handle CORS
            const corsPreflight = this.buildCorsConfig(cors);
            // Handle Custom Domain
            const customDomainData = apigV2Domain.buildCustomDomainData(this, customDomain);
            let defaultDomainMapping;
            if (customDomainData) {
                if (customDomainData.isApigDomainCreated) {
                    this.apiGatewayDomain =
                        customDomainData.apigDomain;
                }
                if (customDomainData.isCertificatedCreated) {
                    this.acmCertificate = customDomainData.certificate;
                }
                defaultDomainMapping = {
                    domainName: customDomainData.apigDomain,
                    mappingKey: customDomainData.mappingKey,
                };
                this._customDomainUrl = `https://${customDomainData.url}`;
            }
            this.httpApi = new apig.HttpApi(this, "Api", Object.assign({ apiName: root.logicalPrefixedName(id), corsPreflight,
                defaultDomainMapping }, httpApiProps));
            const httpStage = this.httpApi.defaultStage;
            // Configure throttling
            if (defaultThrottlingBurstLimit &&
                defaultThrottlingRateLimit &&
                httpStage.node.defaultChild) {
                const cfnStage = httpStage.node.defaultChild;
                cfnStage.defaultRouteSettings = Object.assign(Object.assign({}, (cfnStage.routeSettings || {})), { throttlingBurstLimit: defaultThrottlingBurstLimit, throttlingRateLimit: defaultThrottlingRateLimit });
                this.defaultThrottlingBurstLimit = defaultThrottlingBurstLimit;
                this.defaultThrottlingRateLimit = defaultThrottlingRateLimit;
            }
            // Configure access log
            for (const def of props.stages || []) {
                const stage = new apig.HttpStage(this, "Stage" + def.stageName, Object.assign(Object.assign({}, def), { httpApi: this.httpApi }));
                apigV2AccessLog.buildAccessLogData(this, accessLog, stage, false);
            }
            if (this.httpApi.defaultStage)
                this.accessLogGroup = apigV2AccessLog.buildAccessLogData(this, accessLog, this.httpApi.defaultStage, true);
        }
        ///////////////////////////
        // Configure routes
        ///////////////////////////
        this.addRoutes(this, routes || {});
    }
    get url() {
        return this.httpApi.apiEndpoint;
    }
    get customDomainUrl() {
        return this._customDomainUrl;
    }
    get routes() {
        return Object.keys(this.routesData);
    }
    get httpApiArn() {
        const stack = Stack_1.Stack.of(this);
        return `arn:${stack.partition}:apigateway:${stack.region}::/apis/${this.httpApi.apiId}`;
    }
    addRoutes(scope, routes) {
        Object.keys(routes).forEach((routeKey) => {
            this.addRoute(scope, routeKey, routes[routeKey]);
        });
    }
    getFunction(routeKey) {
        const route = this.routesData[this.normalizeRouteKey(routeKey)];
        return route instanceof Function_1.Function ? route : undefined;
    }
    attachPermissions(permissions) {
        Object.values(this.routesData)
            .filter((route) => route instanceof Function_1.Function)
            .forEach((route) => route.attachPermissions(permissions));
        this.permissionsAttachedForAllRoutes.push(permissions);
    }
    attachPermissionsToRoute(routeKey, permissions) {
        const fn = this.getFunction(routeKey);
        if (!fn) {
            throw new Error(`Failed to attach permissions. Route "${routeKey}" does not exist.`);
        }
        fn.attachPermissions(permissions);
    }
    getConstructMetadata() {
        return {
            type: "Api",
            data: {
                httpApiId: this.httpApi.apiId,
                customDomainUrl: this._customDomainUrl,
                routes: Object.entries(this.routesData).map(([key, data]) => {
                    return {
                        route: key,
                        fn: Construct_1.getFunctionRef(data),
                    };
                }),
            },
        };
    }
    buildCorsConfig(cors) {
        // Handle cors: false
        if (cors === false) {
            return;
        }
        // Handle cors: true | undefined
        else if (cors === undefined || cors === true) {
            return {
                allowHeaders: ["*"],
                allowMethods: [apig.CorsHttpMethod.ANY],
                allowOrigins: ["*"],
            };
        }
        // Handle cors: apig.CorsPreflightOptions
        else {
            return cors;
        }
    }
    addRoute(scope, routeKey, routeValue) {
        ///////////////////
        // Normalize routeProps
        ///////////////////
        let routeProps;
        if (routeValue.albListener) {
            routeProps = routeValue;
        }
        else if (routeValue.url) {
            routeProps = routeValue;
        }
        else if (routeValue.function) {
            routeProps = routeValue;
        }
        else {
            routeProps = {
                function: routeValue,
            };
        }
        ///////////////////
        // Normalize routeKey
        ///////////////////
        routeKey = this.normalizeRouteKey(routeKey);
        if (this.routesData[routeKey]) {
            throw new Error(`A route already exists for "${routeKey}"`);
        }
        ///////////////////
        // Get path and method
        ///////////////////
        let postfixName;
        let httpRouteKey;
        let methodStr;
        let path;
        if (routeKey === "$default") {
            postfixName = "default";
            httpRouteKey = apig.HttpRouteKey.DEFAULT;
            methodStr = "ANY";
            path = routeKey;
        }
        else {
            const routeKeyParts = routeKey.split(" ");
            if (routeKeyParts.length !== 2) {
                throw new Error(`Invalid route ${routeKey}`);
            }
            methodStr = routeKeyParts[0].toUpperCase();
            path = routeKeyParts[1];
            const method = allowedMethods.find((per) => per === methodStr);
            if (!method) {
                throw new Error(`Invalid method defined for "${routeKey}"`);
            }
            if (path.length === 0) {
                throw new Error(`Invalid path defined for "${routeKey}"`);
            }
            postfixName = `${methodStr}_${path}`;
            httpRouteKey = apig.HttpRouteKey.with(path, method);
        }
        ///////////////////
        // Get authorization
        ///////////////////
        const { authorizationType, authorizer, authorizationScopes } = this.buildRouteAuth(routeKey, routeProps);
        ///////////////////
        // Create route
        ///////////////////
        let integration;
        if (routeProps.albListener) {
            routeProps = routeProps;
            integration = this.createAlbIntegration(scope, routeKey, routeProps, postfixName);
        }
        else if (routeProps.url) {
            routeProps = routeProps;
            integration = this.createHttpIntegration(scope, routeKey, routeProps, postfixName);
        }
        else {
            routeProps = routeProps;
            integration = this.createFunctionIntegration(scope, routeKey, routeProps, postfixName);
        }
        const route = new apig.HttpRoute(scope, `Route_${postfixName}`, {
            httpApi: this.httpApi,
            routeKey: httpRouteKey,
            integration,
            authorizer,
            authorizationScopes,
        });
        ////////////////////
        // Configure route authorization type
        ////////////////////
        // Note: we need to explicitly set `cfnRoute.authorizationType` to `NONE`
        //       because if it were set to `AWS_IAM`, and then it is removed from
        //       the CloudFormation template (ie. set to undefined), CloudFormation
        //       doesn't updates the route. The route's authorizationType would still
        //       be `AWS_IAM`.
        if (authorizationType === ApiAuthorizationType.AWS_IAM ||
            authorizationType === ApiAuthorizationType.NONE) {
            if (!route.node.defaultChild) {
                throw new Error(`Failed to define the default route for "${routeKey}"`);
            }
            const cfnRoute = route.node.defaultChild;
            cfnRoute.authorizationType = authorizationType;
        }
    }
    createHttpIntegration(scope, routeKey, routeProps, postfixName) {
        ///////////////////
        // Create integration
        ///////////////////
        const errorMessage = `Invalid HTTP integration method defined for "${routeKey}"`;
        const integration = new apigIntegrations.HttpUrlIntegration(`Integration_${postfixName}`, routeProps.url, {
            method: this.buildHttpMethod(routeProps.method, errorMessage),
        });
        // Store route
        this.routesData[routeKey] = routeProps.url;
        return integration;
    }
    createAlbIntegration(scope, routeKey, routeProps, postfixName) {
        ///////////////////
        // Create integration
        ///////////////////
        const errorMessage = `Invalid ALB integration method defined for "${routeKey}"`;
        const integration = new apigIntegrations.HttpAlbIntegration(`Integration_${postfixName}`, routeProps.albListener, {
            method: this.buildHttpMethod(routeProps.method, errorMessage),
            vpcLink: routeProps.vpcLink,
        });
        // Store route
        this.routesData[routeKey] = routeProps.albListener;
        return integration;
    }
    createFunctionIntegration(scope, routeKey, routeProps, postfixName) {
        ///////////////////
        // Get payload format
        ///////////////////
        const payloadFormatVersion = routeProps.payloadFormatVersion ||
            this.defaultPayloadFormatVersion ||
            ApiPayloadFormatVersion.V2;
        if (!Object.values(ApiPayloadFormatVersion).includes(payloadFormatVersion)) {
            throw new Error(`sst.Api does not currently support ${payloadFormatVersion} payload format version. Only "V1" and "V2" are currently supported.`);
        }
        const integrationPayloadFormatVersion = payloadFormatVersion === ApiPayloadFormatVersion.V1
            ? apig.PayloadFormatVersion.VERSION_1_0
            : apig.PayloadFormatVersion.VERSION_2_0;
        ///////////////////
        // Create Function
        ///////////////////
        const lambda = Function_1.Function.fromDefinition(scope, `Lambda_${postfixName}`, routeProps.function, this.defaultFunctionProps, `The "defaultFunctionProps" cannot be applied if an instance of a Function construct is passed in. Make sure to define all the routes using FunctionProps, so the Api construct can apply the "defaultFunctionProps" to them.`);
        // Add an environment variable to determine if the function is an Api route.
        // If it is, when "sst start" is not connected, we want to return an 500
        // status code and a descriptive error message.
        const root = scope.node.root;
        if (root.local) {
            lambda.addEnvironment("SST_DEBUG_IS_API_ROUTE", "1", {
                removeInEdge: true,
            });
        }
        ///////////////////
        // Create integration
        ///////////////////
        const integration = new apigIntegrations.HttpLambdaIntegration(`Integration_${postfixName}`, lambda, {
            payloadFormatVersion: integrationPayloadFormatVersion,
        });
        // Store route
        this.routesData[routeKey] = lambda;
        // Attached existing permissions
        this.permissionsAttachedForAllRoutes.forEach((permissions) => lambda.attachPermissions(permissions));
        return integration;
    }
    buildRouteAuth(routeKey, routeProps) {
        let authorizer, authorizationScopes;
        const authorizationType = routeProps.authorizationType ||
            this.defaultAuthorizationType ||
            ApiAuthorizationType.NONE;
        if (!Object.values(ApiAuthorizationType).includes(authorizationType)) {
            throw new Error(`sst.Api does not currently support ${authorizationType}. Only "AWS_IAM", "JWT" and "CUSTOM" are currently supported.`);
        }
        // Handle JWT Auth
        if (authorizationType === ApiAuthorizationType.JWT) {
            authorizer = routeProps.authorizer || this.defaultAuthorizer;
            authorizationScopes =
                routeProps.authorizationScopes || this.defaultAuthorizationScopes;
            if (!authorizer) {
                throw new Error(`Missing JWT authorizer for "${routeKey}"`);
            }
        }
        // Handle CUSTOM Auth
        else if (authorizationType === ApiAuthorizationType.CUSTOM) {
            authorizer = routeProps.authorizer || this.defaultAuthorizer;
            if (!authorizer) {
                throw new Error(`Missing custom Lambda authorizer for "${routeKey}"`);
            }
        }
        return { authorizationType, authorizer, authorizationScopes };
    }
    normalizeRouteKey(routeKey) {
        return routeKey.split(/\s+/).join(" ");
    }
    buildHttpMethod(method, errorMessage) {
        if (method === undefined) {
            return undefined;
        }
        if (typeof method === "string") {
            method = method.toUpperCase();
            method = allowedMethods.find((per) => per === method);
            if (!method) {
                throw new Error(errorMessage);
            }
        }
        return method;
    }
}
exports.Api = Api;
//# sourceMappingURL=data:application/json;base64,