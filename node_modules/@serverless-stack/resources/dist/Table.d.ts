import { Construct } from "constructs";
import * as dynamodb from "aws-cdk-lib/aws-dynamodb";
import * as lambdaEventSources from "aws-cdk-lib/aws-lambda-event-sources";
import { SSTConstruct } from "./Construct";
import { Function as Fn, FunctionProps, FunctionDefinition } from "./Function";
import { KinesisStream } from "./KinesisStream";
import { Permissions } from "./util/permission";
export declare enum TableFieldType {
    BINARY = "B",
    NUMBER = "N",
    STRING = "S"
}
export interface TableProps {
    readonly fields?: Record<string, TableFieldType>;
    readonly primaryIndex?: TableGlobalIndexProps;
    /**
     * @deprecated Use globalIndexes
     */
    readonly secondaryIndexes?: Record<string, TableGlobalIndexProps>;
    readonly globalIndexes?: Record<string, TableGlobalIndexProps>;
    readonly localIndexes?: Record<string, TableLocalIndexProps>;
    readonly dynamodbTable?: dynamodb.ITable | TableCdkProps;
    readonly kinesisStream?: KinesisStream;
    readonly stream?: boolean | dynamodb.StreamViewType;
    readonly consumers?: {
        [consumerName: string]: FunctionDefinition | TableConsumerProps;
    };
    readonly defaultFunctionProps?: FunctionProps;
}
export interface TableConsumerProps {
    readonly function: FunctionDefinition;
    readonly consumerProps?: lambdaEventSources.DynamoEventSourceProps;
}
export declare type TableLocalIndexProps = {
    readonly sortKey: string;
    readonly indexProps?: Omit<dynamodb.LocalSecondaryIndexProps, keyof TableLocalIndexProps | "indexName">;
};
export declare type TableGlobalIndexProps = {
    readonly partitionKey: string;
    readonly sortKey?: string;
    readonly indexProps?: TableCdkIndexProps;
};
export declare type TableIndexProps = TableGlobalIndexProps;
export declare type TableCdkProps = Omit<dynamodb.TableProps, "partitionKey" | "sortKey">;
export declare type TableCdkIndexProps = Omit<dynamodb.GlobalSecondaryIndexProps, "indexName" | "partitionKey" | "sortKey">;
export declare class Table extends Construct implements SSTConstruct {
    readonly dynamodbTable: dynamodb.Table;
    private readonly dynamodbTableType;
    private functions;
    private readonly permissionsAttachedForAllConsumers;
    private readonly defaultFunctionProps?;
    private readonly stream?;
    private readonly fields?;
    constructor(scope: Construct, id: string, props: TableProps);
    addGlobalIndexes(secondaryIndexes: NonNullable<TableProps["globalIndexes"]>): void;
    addLocalIndexes(secondaryIndexes: NonNullable<TableProps["localIndexes"]>): void;
    get tableArn(): string;
    get tableName(): string;
    addConsumers(scope: Construct, consumers: {
        [consumerName: string]: FunctionDefinition | TableConsumerProps;
    }): void;
    attachPermissions(permissions: Permissions): void;
    attachPermissionsToConsumer(consumerName: string, permissions: Permissions): void;
    getFunction(consumerName: string): Fn | undefined;
    getConstructMetadata(): {
        type: "Table";
        data: {
            tableName: string;
            consumers: {
                name: string;
                fn: {
                    node: string;
                    stack: string;
                } | undefined;
            }[];
        };
    };
    private addConsumer;
    private buildAttribute;
    private buildStreamConfig;
    private convertTableFieldTypeToAttributeType;
    private buildKinesisStreamSpec;
    private validateFieldsAndIndexes;
    private checkDeprecatedConsumers;
    private checkDeprecatedSecondaryIndexes;
}
