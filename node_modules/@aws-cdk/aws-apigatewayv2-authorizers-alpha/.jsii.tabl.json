{
  "version": "2",
  "toolVersion": "1.50.0",
  "snippets": {
    "423cbc7c2e6ba836a7a7aeb06e8e94e7746198fdfc346e09a5461880986c104e": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers_alpha import HttpJwtAuthorizer\n\n\nissuer = \"https://test.us.auth0.com\"\nauthorizer = HttpJwtAuthorizer(\"DefaultAuthorizer\", issuer,\n    jwt_audience=[\"3131231\"]\n)\n\napi = apigwv2.HttpApi(self, \"HttpApi\",\n    default_authorizer=authorizer,\n    default_authorization_scopes=[\"manage:books\"]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Authorizers.Alpha;\n\n\nstring issuer = \"https://test.us.auth0.com\";\nHttpJwtAuthorizer authorizer = new HttpJwtAuthorizer(\"DefaultAuthorizer\", issuer, new HttpJwtAuthorizerProps {\n    JwtAudience = new [] { \"3131231\" }\n});\n\nHttpApi api = new HttpApi(this, \"HttpApi\", new HttpApiProps {\n    DefaultAuthorizer = authorizer,\n    DefaultAuthorizationScopes = new [] { \"manage:books\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.alpha.HttpJwtAuthorizer;\n\n\nString issuer = \"https://test.us.auth0.com\";\nHttpJwtAuthorizer authorizer = HttpJwtAuthorizer.Builder.create(\"DefaultAuthorizer\", issuer)\n        .jwtAudience(List.of(\"3131231\"))\n        .build();\n\nHttpApi api = HttpApi.Builder.create(this, \"HttpApi\")\n        .defaultAuthorizer(authorizer)\n        .defaultAuthorizationScopes(List.of(\"manage:books\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('DefaultAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi', {\n  defaultAuthorizer: authorizer,\n  defaultAuthorizationScopes: ['manage:books'],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-authorizers-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 51
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpRouteAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpJwtAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpJwtAuthorizerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as iam from 'aws-cdk-lib/aws-iam';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('DefaultAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi', {\n  defaultAuthorizer: authorizer,\n  defaultAuthorizationScopes: ['manage:books'],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 12,
        "104": 1,
        "192": 2,
        "193": 2,
        "194": 1,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "32de9859993795d7acb2b4bdbd363016fad1ec0e60c44dfe5734db47dc7078ac"
    },
    "86c93ea7ce986f0880381f45109f1fea15c7a5b2f92ebe3e4111cd08d4daae5c": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers_alpha import HttpJwtAuthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations_alpha import HttpUrlIntegration\n\n\nissuer = \"https://test.us.auth0.com\"\nauthorizer = HttpJwtAuthorizer(\"DefaultAuthorizer\", issuer,\n    jwt_audience=[\"3131231\"]\n)\n\napi = apigwv2.HttpApi(self, \"HttpApi\",\n    default_authorizer=authorizer,\n    default_authorization_scopes=[\"read:books\"]\n)\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    methods=[apigwv2.HttpMethod.GET]\n)\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIdIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books/{id}\",\n    methods=[apigwv2.HttpMethod.GET]\n)\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    methods=[apigwv2.HttpMethod.POST],\n    authorization_scopes=[\"write:books\"]\n)\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"LoginIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/login\",\n    methods=[apigwv2.HttpMethod.POST],\n    authorizer=apigwv2.HttpNoneAuthorizer()\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Authorizers.Alpha;\nusing Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\n\nstring issuer = \"https://test.us.auth0.com\";\nHttpJwtAuthorizer authorizer = new HttpJwtAuthorizer(\"DefaultAuthorizer\", issuer, new HttpJwtAuthorizerProps {\n    JwtAudience = new [] { \"3131231\" }\n});\n\nHttpApi api = new HttpApi(this, \"HttpApi\", new HttpApiProps {\n    DefaultAuthorizer = authorizer,\n    DefaultAuthorizationScopes = new [] { \"read:books\" }\n});\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Methods = new [] { HttpMethod.GET }\n});\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIdIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books/{id}\",\n    Methods = new [] { HttpMethod.GET }\n});\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Methods = new [] { HttpMethod.POST },\n    AuthorizationScopes = new [] { \"write:books\" }\n});\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"LoginIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/login\",\n    Methods = new [] { HttpMethod.POST },\n    Authorizer = new HttpNoneAuthorizer()\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.alpha.HttpJwtAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpUrlIntegration;\n\n\nString issuer = \"https://test.us.auth0.com\";\nHttpJwtAuthorizer authorizer = HttpJwtAuthorizer.Builder.create(\"DefaultAuthorizer\", issuer)\n        .jwtAudience(List.of(\"3131231\"))\n        .build();\n\nHttpApi api = HttpApi.Builder.create(this, \"HttpApi\")\n        .defaultAuthorizer(authorizer)\n        .defaultAuthorizationScopes(List.of(\"read:books\"))\n        .build();\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .methods(List.of(HttpMethod.GET))\n        .build());\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIdIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books/{id}\")\n        .methods(List.of(HttpMethod.GET))\n        .build());\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .methods(List.of(HttpMethod.POST))\n        .authorizationScopes(List.of(\"write:books\"))\n        .build());\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"LoginIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/login\")\n        .methods(List.of(HttpMethod.POST))\n        .authorizer(new HttpNoneAuthorizer())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('DefaultAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi', {\n  defaultAuthorizer: authorizer,\n  defaultAuthorizationScopes: ['read:books'],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  methods: [apigwv2.HttpMethod.GET],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIdIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books/{id}',\n  methods: [apigwv2.HttpMethod.GET],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  methods: [apigwv2.HttpMethod.POST],\n  authorizationScopes: ['write:books']\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('LoginIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/login',\n  methods: [apigwv2.HttpMethod.POST],\n  authorizer: new apigwv2.HttpNoneAuthorizer(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-authorizers-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 75
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpMethod",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpMethod#GET",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpMethod#POST",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpNoneAuthorizer",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpRouteAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpJwtAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpJwtAuthorizerProps",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpUrlIntegration"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as iam from 'aws-cdk-lib/aws-iam';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('DefaultAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi', {\n  defaultAuthorizer: authorizer,\n  defaultAuthorizationScopes: ['read:books'],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  methods: [apigwv2.HttpMethod.GET],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIdIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books/{id}',\n  methods: [apigwv2.HttpMethod.GET],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  methods: [apigwv2.HttpMethod.POST],\n  authorizationScopes: ['write:books']\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('LoginIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/login',\n  methods: [apigwv2.HttpMethod.POST],\n  authorizer: new apigwv2.HttpNoneAuthorizer(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 20,
        "75": 53,
        "104": 1,
        "192": 7,
        "193": 6,
        "194": 14,
        "196": 4,
        "197": 7,
        "225": 3,
        "226": 4,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 2,
        "281": 17,
        "290": 1
      },
      "fqnsFingerprint": "78818ae29922650897a59747e84e4bfc82f5fd247ff89b9abc878e5899101d00"
    },
    "1e086af7f2ded52c51368956d946b3f3ce4ab3967ddee9eb98f0ee581fb516db": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers_alpha import HttpJwtAuthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations_alpha import HttpUrlIntegration\n\n\nissuer = \"https://test.us.auth0.com\"\nauthorizer = HttpJwtAuthorizer(\"BooksAuthorizer\", issuer,\n    jwt_audience=[\"3131231\"]\n)\n\napi = apigwv2.HttpApi(self, \"HttpApi\")\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    authorizer=authorizer\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Authorizers.Alpha;\nusing Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\n\nstring issuer = \"https://test.us.auth0.com\";\nHttpJwtAuthorizer authorizer = new HttpJwtAuthorizer(\"BooksAuthorizer\", issuer, new HttpJwtAuthorizerProps {\n    JwtAudience = new [] { \"3131231\" }\n});\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.alpha.HttpJwtAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpUrlIntegration;\n\n\nString issuer = \"https://test.us.auth0.com\";\nHttpJwtAuthorizer authorizer = HttpJwtAuthorizer.Builder.create(\"BooksAuthorizer\", issuer)\n        .jwtAudience(List.of(\"3131231\"))\n        .build();\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('BooksAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-authorizers-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 132
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpRouteAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpJwtAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpJwtAuthorizerProps",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpUrlIntegration"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as iam from 'aws-cdk-lib/aws-iam';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('BooksAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 16,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 2,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "5b0aa88878bceafda9c0a04b82acfd77055ec931af2bce97f0167849b3cb8d27"
    },
    "ef60ecdf1b51c9317fbfaa29298bb98f670db996bef512c3ac9bfc781440ad8e": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cognito as cognito\nfrom aws_cdk.aws_apigatewayv2_authorizers_alpha import HttpUserPoolAuthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations_alpha import HttpUrlIntegration\n\n\nuser_pool = cognito.UserPool(self, \"UserPool\")\n\nauthorizer = HttpUserPoolAuthorizer(\"BooksAuthorizer\", user_pool)\n\napi = apigwv2.HttpApi(self, \"HttpApi\")\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    authorizer=authorizer\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Cognito;\nusing Amazon.CDK.AWS.Apigatewayv2.Authorizers.Alpha;\nusing Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\n\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nHttpUserPoolAuthorizer authorizer = new HttpUserPoolAuthorizer(\"BooksAuthorizer\", userPool);\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cognito.*;\nimport software.amazon.awscdk.services.apigatewayv2.authorizers.alpha.HttpUserPoolAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpUrlIntegration;\n\n\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nHttpUserPoolAuthorizer authorizer = new HttpUserPoolAuthorizer(\"BooksAuthorizer\", userPool);\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as cognito from 'aws-cdk-lib/aws-cognito';\nimport { HttpUserPoolAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\nconst userPool = new cognito.UserPool(this, 'UserPool');\n\nconst authorizer = new HttpUserPoolAuthorizer('BooksAuthorizer', userPool);\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-authorizers-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 158
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpRouteAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpUserPoolAuthorizer",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpUrlIntegration",
        "aws-cdk-lib.aws_cognito.IUserPool",
        "aws-cdk-lib.aws_cognito.UserPool"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cognito from 'aws-cdk-lib/aws-cognito';\nimport { HttpUserPoolAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as iam from 'aws-cdk-lib/aws-iam';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst userPool = new cognito.UserPool(this, 'UserPool');\n\nconst authorizer = new HttpUserPoolAuthorizer('BooksAuthorizer', userPool);\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 18,
        "104": 2,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 1,
        "257": 2,
        "258": 2,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "1417707d57b55ae93e9b5eab0c4e41079985fcb7c7419f34099accec5b3622a3"
    },
    "7a4bd0db4700cd3f794171685e04c511ff102e168cfe9751bfeee1cb0a9fbccb": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers_alpha import HttpLambdaAuthorizer, HttpLambdaResponseType\nfrom aws_cdk.aws_apigatewayv2_integrations_alpha import HttpUrlIntegration\n\n# This function handles your auth logic\n# auth_handler is of type Function\n\n\nauthorizer = HttpLambdaAuthorizer(\"BooksAuthorizer\", auth_handler,\n    response_types=[HttpLambdaResponseType.SIMPLE]\n)\n\napi = apigwv2.HttpApi(self, \"HttpApi\")\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    authorizer=authorizer\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Authorizers.Alpha;\nusing Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\n// This function handles your auth logic\nFunction authHandler;\n\n\nHttpLambdaAuthorizer authorizer = new HttpLambdaAuthorizer(\"BooksAuthorizer\", authHandler, new HttpLambdaAuthorizerProps {\n    ResponseTypes = new [] { HttpLambdaResponseType.SIMPLE }\n});\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.alpha.HttpLambdaAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.authorizers.alpha.HttpLambdaResponseType;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpUrlIntegration;\n\n// This function handles your auth logic\nFunction authHandler;\n\n\nHttpLambdaAuthorizer authorizer = HttpLambdaAuthorizer.Builder.create(\"BooksAuthorizer\", authHandler)\n        .responseTypes(List.of(HttpLambdaResponseType.SIMPLE))\n        .build();\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import { HttpLambdaAuthorizer, HttpLambdaResponseType } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n\nconst authorizer = new HttpLambdaAuthorizer('BooksAuthorizer', authHandler, {\n  responseTypes: [HttpLambdaResponseType.SIMPLE], // Define if returns simple and/or iam response\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-authorizers-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 183
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpRouteAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpLambdaAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpLambdaAuthorizerProps",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpLambdaResponseType#SIMPLE",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpUrlIntegration",
        "aws-cdk-lib.aws_lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpLambdaAuthorizer, HttpLambdaResponseType } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as iam from 'aws-cdk-lib/aws-iam';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst authorizer = new HttpLambdaAuthorizer('BooksAuthorizer', authHandler, {\n  responseTypes: [HttpLambdaResponseType.SIMPLE], // Define if returns simple and/or iam response\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 3,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "50d21d4ec8fb226d317626f4b25383870fcf15f43a837eeefe2412b997763f90"
    },
    "a42fd3c28015bc10aa478280258c0fa953c60885226bcdd4980cb9c75608f7f6": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers_alpha import HttpIamAuthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations_alpha import HttpUrlIntegration\n\n# principal is of type AnyPrincipal\n\n\nauthorizer = HttpIamAuthorizer()\n\nhttp_api = apigwv2.HttpApi(self, \"HttpApi\",\n    default_authorizer=authorizer\n)\n\nroutes = http_api.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books/{book}\"\n)\n\nroutes[0].grant_invoke(principal)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Authorizers.Alpha;\nusing Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\nAnyPrincipal principal;\n\n\nHttpIamAuthorizer authorizer = new HttpIamAuthorizer();\n\nHttpApi httpApi = new HttpApi(this, \"HttpApi\", new HttpApiProps {\n    DefaultAuthorizer = authorizer\n});\n\nHttpRoute[] routes = httpApi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books/{book}\"\n});\n\nroutes[0].GrantInvoke(principal);",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.alpha.HttpIamAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpUrlIntegration;\n\nAnyPrincipal principal;\n\n\nHttpIamAuthorizer authorizer = new HttpIamAuthorizer();\n\nHttpApi httpApi = HttpApi.Builder.create(this, \"HttpApi\")\n        .defaultAuthorizer(authorizer)\n        .build();\n\nHttpRoute[] routes = httpApi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books/{book}\")\n        .build());\n\nroutes[0].grantInvoke(principal);",
          "version": "1"
        },
        "$": {
          "source": "import { HttpIamAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const principal: iam.AnyPrincipal;\n\nconst authorizer = new HttpIamAuthorizer();\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi', {\n  defaultAuthorizer: authorizer,\n});\n\nconst routes = httpApi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books/{book}',\n});\n\nroutes[0].grantInvoke(principal);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-authorizers-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 207
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRoute#grantInvoke",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpRouteAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpIamAuthorizer",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpUrlIntegration",
        "aws-cdk-lib.aws_iam.IGrantable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpIamAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const principal: iam.AnyPrincipal;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as iam from 'aws-cdk-lib/aws-iam';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst authorizer = new HttpIamAuthorizer();\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi', {\n  defaultAuthorizer: authorizer,\n});\n\nconst routes = httpApi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books/{book}',\n});\n\nroutes[0].grantInvoke(principal);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "195": 1,
        "196": 2,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "f6877c9c370ff738d772e2fa733a55014d038b64463a8b90cedac5479986a1d6"
    },
    "952058622b5273a1fc9eccc49f39df541f9daa71b0223f6a918e00302b63956d": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers_alpha import WebSocketLambdaAuthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations_alpha import WebSocketLambdaIntegration\n\n# This function handles your auth logic\n# auth_handler is of type Function\n\n# This function handles your WebSocket requests\n# handler is of type Function\n\n\nauthorizer = WebSocketLambdaAuthorizer(\"Authorizer\", auth_handler)\n\nintegration = WebSocketLambdaIntegration(\"Integration\", handler)\n\napigwv2.WebSocketApi(self, \"WebSocketApi\",\n    connect_route_options=apigwv2.WebSocketRouteOptions(\n        integration=integration,\n        authorizer=authorizer\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Authorizers.Alpha;\nusing Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\n// This function handles your auth logic\nFunction authHandler;\n\n// This function handles your WebSocket requests\nFunction handler;\n\n\nWebSocketLambdaAuthorizer authorizer = new WebSocketLambdaAuthorizer(\"Authorizer\", authHandler);\n\nWebSocketLambdaIntegration integration = new WebSocketLambdaIntegration(\"Integration\", handler);\n\nnew WebSocketApi(this, \"WebSocketApi\", new WebSocketApiProps {\n    ConnectRouteOptions = new WebSocketRouteOptions {\n        Integration = integration,\n        Authorizer = authorizer\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.alpha.WebSocketLambdaAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.alpha.WebSocketLambdaIntegration;\n\n// This function handles your auth logic\nFunction authHandler;\n\n// This function handles your WebSocket requests\nFunction handler;\n\n\nWebSocketLambdaAuthorizer authorizer = new WebSocketLambdaAuthorizer(\"Authorizer\", authHandler);\n\nWebSocketLambdaIntegration integration = new WebSocketLambdaIntegration(\"Integration\", handler);\n\nWebSocketApi.Builder.create(this, \"WebSocketApi\")\n        .connectRouteOptions(WebSocketRouteOptions.builder()\n                .integration(integration)\n                .authorizer(authorizer)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { WebSocketLambdaAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n\n// This function handles your WebSocket requests\ndeclare const handler: lambda.Function;\n\nconst authorizer = new WebSocketLambdaAuthorizer('Authorizer', authHandler);\n\nconst integration = new WebSocketLambdaIntegration(\n  'Integration',\n  handler,\n);\n\nnew apigwv2.WebSocketApi(this, 'WebSocketApi', {\n  connectRouteOptions: {\n    integration,\n    authorizer,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-authorizers-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 235
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.IWebSocketRouteAuthorizer",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApiProps",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteOptions",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.WebSocketLambdaAuthorizer",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.WebSocketLambdaIntegration",
        "aws-cdk-lib.aws_lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { WebSocketLambdaAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n\n// This function handles your WebSocket requests\ndeclare const handler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as iam from 'aws-cdk-lib/aws-iam';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst authorizer = new WebSocketLambdaAuthorizer('Authorizer', authHandler);\n\nconst integration = new WebSocketLambdaIntegration(\n  'Integration',\n  handler,\n);\n\nnew apigwv2.WebSocketApi(this, 'WebSocketApi', {\n  connectRouteOptions: {\n    integration,\n    authorizer,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 1,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 2,
        "281": 1,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "68721a6b851cb263c96b5f25050f1b20f979b74262aef05688be40cd1870802d"
    },
    "71ad75a10c5bd1d3a0cb54a38823022616bf12f32789b040e7cfb80a9e831abd": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers_alpha import HttpIamAuthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations_alpha import HttpUrlIntegration\n\n# principal is of type AnyPrincipal\n\n\nauthorizer = HttpIamAuthorizer()\n\nhttp_api = apigwv2.HttpApi(self, \"HttpApi\",\n    default_authorizer=authorizer\n)\n\nroutes = http_api.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books/{book}\"\n)\n\nroutes[0].grant_invoke(principal)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Authorizers.Alpha;\nusing Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\nAnyPrincipal principal;\n\n\nHttpIamAuthorizer authorizer = new HttpIamAuthorizer();\n\nHttpApi httpApi = new HttpApi(this, \"HttpApi\", new HttpApiProps {\n    DefaultAuthorizer = authorizer\n});\n\nHttpRoute[] routes = httpApi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books/{book}\"\n});\n\nroutes[0].GrantInvoke(principal);",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.alpha.HttpIamAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpUrlIntegration;\n\nAnyPrincipal principal;\n\n\nHttpIamAuthorizer authorizer = new HttpIamAuthorizer();\n\nHttpApi httpApi = HttpApi.Builder.create(this, \"HttpApi\")\n        .defaultAuthorizer(authorizer)\n        .build();\n\nHttpRoute[] routes = httpApi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books/{book}\")\n        .build());\n\nroutes[0].grantInvoke(principal);",
          "version": "1"
        },
        "$": {
          "source": "import { HttpIamAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const principal: iam.AnyPrincipal;\n\nconst authorizer = new HttpIamAuthorizer();\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi', {\n  defaultAuthorizer: authorizer,\n});\n\nconst routes = httpApi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books/{book}',\n});\n\nroutes[0].grantInvoke(principal);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpIamAuthorizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRoute#grantInvoke",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpRouteAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpIamAuthorizer",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpUrlIntegration",
        "aws-cdk-lib.aws_iam.IGrantable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpIamAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const principal: iam.AnyPrincipal;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as iam from 'aws-cdk-lib/aws-iam';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst authorizer = new HttpIamAuthorizer();\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi', {\n  defaultAuthorizer: authorizer,\n});\n\nconst routes = httpApi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books/{book}',\n});\n\nroutes[0].grantInvoke(principal);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "195": 1,
        "196": 2,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "f6877c9c370ff738d772e2fa733a55014d038b64463a8b90cedac5479986a1d6"
    },
    "5952b365eb7b80ba588e6a1ad2a444172471bd0d7ac670206467fd42487672f8": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers_alpha import HttpJwtAuthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations_alpha import HttpUrlIntegration\n\n\nissuer = \"https://test.us.auth0.com\"\nauthorizer = HttpJwtAuthorizer(\"BooksAuthorizer\", issuer,\n    jwt_audience=[\"3131231\"]\n)\n\napi = apigwv2.HttpApi(self, \"HttpApi\")\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    authorizer=authorizer\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Authorizers.Alpha;\nusing Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\n\nstring issuer = \"https://test.us.auth0.com\";\nHttpJwtAuthorizer authorizer = new HttpJwtAuthorizer(\"BooksAuthorizer\", issuer, new HttpJwtAuthorizerProps {\n    JwtAudience = new [] { \"3131231\" }\n});\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.alpha.HttpJwtAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpUrlIntegration;\n\n\nString issuer = \"https://test.us.auth0.com\";\nHttpJwtAuthorizer authorizer = HttpJwtAuthorizer.Builder.create(\"BooksAuthorizer\", issuer)\n        .jwtAudience(List.of(\"3131231\"))\n        .build();\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('BooksAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpJwtAuthorizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpRouteAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpJwtAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpJwtAuthorizerProps",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpUrlIntegration"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as iam from 'aws-cdk-lib/aws-iam';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('BooksAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 16,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 2,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "5b0aa88878bceafda9c0a04b82acfd77055ec931af2bce97f0167849b3cb8d27"
    },
    "a1391095acda29b0d190ca3ced54055f63f87d10b8810668750e0f7cca24b826": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers_alpha import HttpJwtAuthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations_alpha import HttpUrlIntegration\n\n\nissuer = \"https://test.us.auth0.com\"\nauthorizer = HttpJwtAuthorizer(\"BooksAuthorizer\", issuer,\n    jwt_audience=[\"3131231\"]\n)\n\napi = apigwv2.HttpApi(self, \"HttpApi\")\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    authorizer=authorizer\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Authorizers.Alpha;\nusing Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\n\nstring issuer = \"https://test.us.auth0.com\";\nHttpJwtAuthorizer authorizer = new HttpJwtAuthorizer(\"BooksAuthorizer\", issuer, new HttpJwtAuthorizerProps {\n    JwtAudience = new [] { \"3131231\" }\n});\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.alpha.HttpJwtAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpUrlIntegration;\n\n\nString issuer = \"https://test.us.auth0.com\";\nHttpJwtAuthorizer authorizer = HttpJwtAuthorizer.Builder.create(\"BooksAuthorizer\", issuer)\n        .jwtAudience(List.of(\"3131231\"))\n        .build();\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('BooksAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpJwtAuthorizerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpRouteAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpJwtAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpJwtAuthorizerProps",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpUrlIntegration"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as iam from 'aws-cdk-lib/aws-iam';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('BooksAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 16,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 2,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "5b0aa88878bceafda9c0a04b82acfd77055ec931af2bce97f0167849b3cb8d27"
    },
    "717a331db4d61f7762a7d1a4aa64eedb5c749abdbf67370687accc3c47956bb5": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers_alpha import HttpLambdaAuthorizer, HttpLambdaResponseType\nfrom aws_cdk.aws_apigatewayv2_integrations_alpha import HttpUrlIntegration\n\n# This function handles your auth logic\n# auth_handler is of type Function\n\n\nauthorizer = HttpLambdaAuthorizer(\"BooksAuthorizer\", auth_handler,\n    response_types=[HttpLambdaResponseType.SIMPLE]\n)\n\napi = apigwv2.HttpApi(self, \"HttpApi\")\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    authorizer=authorizer\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Authorizers.Alpha;\nusing Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\n// This function handles your auth logic\nFunction authHandler;\n\n\nHttpLambdaAuthorizer authorizer = new HttpLambdaAuthorizer(\"BooksAuthorizer\", authHandler, new HttpLambdaAuthorizerProps {\n    ResponseTypes = new [] { HttpLambdaResponseType.SIMPLE }\n});\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.alpha.HttpLambdaAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.authorizers.alpha.HttpLambdaResponseType;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpUrlIntegration;\n\n// This function handles your auth logic\nFunction authHandler;\n\n\nHttpLambdaAuthorizer authorizer = HttpLambdaAuthorizer.Builder.create(\"BooksAuthorizer\", authHandler)\n        .responseTypes(List.of(HttpLambdaResponseType.SIMPLE))\n        .build();\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import { HttpLambdaAuthorizer, HttpLambdaResponseType } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n\nconst authorizer = new HttpLambdaAuthorizer('BooksAuthorizer', authHandler, {\n  responseTypes: [HttpLambdaResponseType.SIMPLE], // Define if returns simple and/or iam response\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpLambdaAuthorizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpRouteAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpLambdaAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpLambdaAuthorizerProps",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpLambdaResponseType#SIMPLE",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpUrlIntegration",
        "aws-cdk-lib.aws_lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpLambdaAuthorizer, HttpLambdaResponseType } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as iam from 'aws-cdk-lib/aws-iam';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst authorizer = new HttpLambdaAuthorizer('BooksAuthorizer', authHandler, {\n  responseTypes: [HttpLambdaResponseType.SIMPLE], // Define if returns simple and/or iam response\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 3,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "50d21d4ec8fb226d317626f4b25383870fcf15f43a837eeefe2412b997763f90"
    },
    "4f3e461f1a45a6a9a9ddd127136d99e495cd6df379654fcacae38fc12d4ea79b": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers_alpha import HttpLambdaAuthorizer, HttpLambdaResponseType\nfrom aws_cdk.aws_apigatewayv2_integrations_alpha import HttpUrlIntegration\n\n# This function handles your auth logic\n# auth_handler is of type Function\n\n\nauthorizer = HttpLambdaAuthorizer(\"BooksAuthorizer\", auth_handler,\n    response_types=[HttpLambdaResponseType.SIMPLE]\n)\n\napi = apigwv2.HttpApi(self, \"HttpApi\")\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    authorizer=authorizer\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Authorizers.Alpha;\nusing Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\n// This function handles your auth logic\nFunction authHandler;\n\n\nHttpLambdaAuthorizer authorizer = new HttpLambdaAuthorizer(\"BooksAuthorizer\", authHandler, new HttpLambdaAuthorizerProps {\n    ResponseTypes = new [] { HttpLambdaResponseType.SIMPLE }\n});\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.alpha.HttpLambdaAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.authorizers.alpha.HttpLambdaResponseType;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpUrlIntegration;\n\n// This function handles your auth logic\nFunction authHandler;\n\n\nHttpLambdaAuthorizer authorizer = HttpLambdaAuthorizer.Builder.create(\"BooksAuthorizer\", authHandler)\n        .responseTypes(List.of(HttpLambdaResponseType.SIMPLE))\n        .build();\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import { HttpLambdaAuthorizer, HttpLambdaResponseType } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n\nconst authorizer = new HttpLambdaAuthorizer('BooksAuthorizer', authHandler, {\n  responseTypes: [HttpLambdaResponseType.SIMPLE], // Define if returns simple and/or iam response\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpLambdaAuthorizerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpRouteAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpLambdaAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpLambdaAuthorizerProps",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpLambdaResponseType#SIMPLE",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpUrlIntegration",
        "aws-cdk-lib.aws_lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpLambdaAuthorizer, HttpLambdaResponseType } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as iam from 'aws-cdk-lib/aws-iam';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst authorizer = new HttpLambdaAuthorizer('BooksAuthorizer', authHandler, {\n  responseTypes: [HttpLambdaResponseType.SIMPLE], // Define if returns simple and/or iam response\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 3,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "50d21d4ec8fb226d317626f4b25383870fcf15f43a837eeefe2412b997763f90"
    },
    "9dbe181275f24e71f342e87588c3c7fe5f8cbc85e8a18b0bf6d677f304af3d61": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cognito as cognito\nfrom aws_cdk.aws_apigatewayv2_authorizers_alpha import HttpUserPoolAuthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations_alpha import HttpUrlIntegration\n\n\nuser_pool = cognito.UserPool(self, \"UserPool\")\n\nauthorizer = HttpUserPoolAuthorizer(\"BooksAuthorizer\", user_pool)\n\napi = apigwv2.HttpApi(self, \"HttpApi\")\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    authorizer=authorizer\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Cognito;\nusing Amazon.CDK.AWS.Apigatewayv2.Authorizers.Alpha;\nusing Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\n\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nHttpUserPoolAuthorizer authorizer = new HttpUserPoolAuthorizer(\"BooksAuthorizer\", userPool);\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cognito.*;\nimport software.amazon.awscdk.services.apigatewayv2.authorizers.alpha.HttpUserPoolAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpUrlIntegration;\n\n\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nHttpUserPoolAuthorizer authorizer = new HttpUserPoolAuthorizer(\"BooksAuthorizer\", userPool);\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as cognito from 'aws-cdk-lib/aws-cognito';\nimport { HttpUserPoolAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\nconst userPool = new cognito.UserPool(this, 'UserPool');\n\nconst authorizer = new HttpUserPoolAuthorizer('BooksAuthorizer', userPool);\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpUserPoolAuthorizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpRouteAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpUserPoolAuthorizer",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpUrlIntegration",
        "aws-cdk-lib.aws_cognito.IUserPool",
        "aws-cdk-lib.aws_cognito.UserPool"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cognito from 'aws-cdk-lib/aws-cognito';\nimport { HttpUserPoolAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as iam from 'aws-cdk-lib/aws-iam';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst userPool = new cognito.UserPool(this, 'UserPool');\n\nconst authorizer = new HttpUserPoolAuthorizer('BooksAuthorizer', userPool);\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 18,
        "104": 2,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 1,
        "257": 2,
        "258": 2,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "1417707d57b55ae93e9b5eab0c4e41079985fcb7c7419f34099accec5b3622a3"
    },
    "9063f9ab9100beb46b051b6f30222264f8922fae07cbad09685c52946897c8c7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_authorizers_alpha as apigatewayv2_authorizers_alpha\nfrom aws_cdk import aws_cognito as cognito\n\n# user_pool_client is of type UserPoolClient\n\nhttp_user_pool_authorizer_props = apigatewayv2_authorizers_alpha.HttpUserPoolAuthorizerProps(\n    authorizer_name=\"authorizerName\",\n    identity_source=[\"identitySource\"],\n    user_pool_clients=[user_pool_client],\n    user_pool_region=\"userPoolRegion\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Authorizers.Alpha;\nusing Amazon.CDK.AWS.Cognito;\n\nUserPoolClient userPoolClient;\n\nHttpUserPoolAuthorizerProps httpUserPoolAuthorizerProps = new HttpUserPoolAuthorizerProps {\n    AuthorizerName = \"authorizerName\",\n    IdentitySource = new [] { \"identitySource\" },\n    UserPoolClients = new [] { userPoolClient },\n    UserPoolRegion = \"userPoolRegion\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.authorizers.alpha.*;\nimport software.amazon.awscdk.services.cognito.*;\n\nUserPoolClient userPoolClient;\n\nHttpUserPoolAuthorizerProps httpUserPoolAuthorizerProps = HttpUserPoolAuthorizerProps.builder()\n        .authorizerName(\"authorizerName\")\n        .identitySource(List.of(\"identitySource\"))\n        .userPoolClients(List.of(userPoolClient))\n        .userPoolRegion(\"userPoolRegion\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_authorizers_alpha from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { aws_cognito as cognito } from 'aws-cdk-lib';\n\ndeclare const userPoolClient: cognito.UserPoolClient;\nconst httpUserPoolAuthorizerProps: apigatewayv2_authorizers_alpha.HttpUserPoolAuthorizerProps = {\n  authorizerName: 'authorizerName',\n  identitySource: ['identitySource'],\n  userPoolClients: [userPoolClient],\n  userPoolRegion: 'userPoolRegion',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpUserPoolAuthorizerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpUserPoolAuthorizerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_authorizers_alpha from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { aws_cognito as cognito } from 'aws-cdk-lib';\n\ndeclare const userPoolClient: cognito.UserPoolClient;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpUserPoolAuthorizerProps: apigatewayv2_authorizers_alpha.HttpUserPoolAuthorizerProps = {\n  authorizerName: 'authorizerName',\n  identitySource: ['identitySource'],\n  userPoolClients: [userPoolClient],\n  userPoolRegion: 'userPoolRegion',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 14,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 1,
        "257": 1,
        "258": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "9e1f485f6a94aec4fd84bc895987e04fd29ce6819b5571aedf069487772376ad"
    },
    "b278ddec151d15ff2a279ae4297c078f2c78996dbce16991b5646efd592b518f": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers_alpha import WebSocketLambdaAuthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations_alpha import WebSocketLambdaIntegration\n\n# This function handles your auth logic\n# auth_handler is of type Function\n\n# This function handles your WebSocket requests\n# handler is of type Function\n\n\nauthorizer = WebSocketLambdaAuthorizer(\"Authorizer\", auth_handler)\n\nintegration = WebSocketLambdaIntegration(\"Integration\", handler)\n\napigwv2.WebSocketApi(self, \"WebSocketApi\",\n    connect_route_options=apigwv2.WebSocketRouteOptions(\n        integration=integration,\n        authorizer=authorizer\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Authorizers.Alpha;\nusing Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\n// This function handles your auth logic\nFunction authHandler;\n\n// This function handles your WebSocket requests\nFunction handler;\n\n\nWebSocketLambdaAuthorizer authorizer = new WebSocketLambdaAuthorizer(\"Authorizer\", authHandler);\n\nWebSocketLambdaIntegration integration = new WebSocketLambdaIntegration(\"Integration\", handler);\n\nnew WebSocketApi(this, \"WebSocketApi\", new WebSocketApiProps {\n    ConnectRouteOptions = new WebSocketRouteOptions {\n        Integration = integration,\n        Authorizer = authorizer\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.alpha.WebSocketLambdaAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.alpha.WebSocketLambdaIntegration;\n\n// This function handles your auth logic\nFunction authHandler;\n\n// This function handles your WebSocket requests\nFunction handler;\n\n\nWebSocketLambdaAuthorizer authorizer = new WebSocketLambdaAuthorizer(\"Authorizer\", authHandler);\n\nWebSocketLambdaIntegration integration = new WebSocketLambdaIntegration(\"Integration\", handler);\n\nWebSocketApi.Builder.create(this, \"WebSocketApi\")\n        .connectRouteOptions(WebSocketRouteOptions.builder()\n                .integration(integration)\n                .authorizer(authorizer)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { WebSocketLambdaAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n\n// This function handles your WebSocket requests\ndeclare const handler: lambda.Function;\n\nconst authorizer = new WebSocketLambdaAuthorizer('Authorizer', authHandler);\n\nconst integration = new WebSocketLambdaIntegration(\n  'Integration',\n  handler,\n);\n\nnew apigwv2.WebSocketApi(this, 'WebSocketApi', {\n  connectRouteOptions: {\n    integration,\n    authorizer,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-authorizers-alpha.WebSocketLambdaAuthorizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.IWebSocketRouteAuthorizer",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApiProps",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteOptions",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.WebSocketLambdaAuthorizer",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.WebSocketLambdaIntegration",
        "aws-cdk-lib.aws_lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { WebSocketLambdaAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n\n// This function handles your WebSocket requests\ndeclare const handler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as iam from 'aws-cdk-lib/aws-iam';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst authorizer = new WebSocketLambdaAuthorizer('Authorizer', authHandler);\n\nconst integration = new WebSocketLambdaIntegration(\n  'Integration',\n  handler,\n);\n\nnew apigwv2.WebSocketApi(this, 'WebSocketApi', {\n  connectRouteOptions: {\n    integration,\n    authorizer,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 1,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 2,
        "281": 1,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "68721a6b851cb263c96b5f25050f1b20f979b74262aef05688be40cd1870802d"
    },
    "51bb1ca223d8b36335da1405b32c5fe0b30fa388c7b12ea7d382b56c24d9705d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_authorizers_alpha as apigatewayv2_authorizers_alpha\n\nweb_socket_lambda_authorizer_props = apigatewayv2_authorizers_alpha.WebSocketLambdaAuthorizerProps(\n    authorizer_name=\"authorizerName\",\n    identity_source=[\"identitySource\"]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Authorizers.Alpha;\n\nWebSocketLambdaAuthorizerProps webSocketLambdaAuthorizerProps = new WebSocketLambdaAuthorizerProps {\n    AuthorizerName = \"authorizerName\",\n    IdentitySource = new [] { \"identitySource\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.authorizers.alpha.*;\n\nWebSocketLambdaAuthorizerProps webSocketLambdaAuthorizerProps = WebSocketLambdaAuthorizerProps.builder()\n        .authorizerName(\"authorizerName\")\n        .identitySource(List.of(\"identitySource\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_authorizers_alpha from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nconst webSocketLambdaAuthorizerProps: apigatewayv2_authorizers_alpha.WebSocketLambdaAuthorizerProps = {\n  authorizerName: 'authorizerName',\n  identitySource: ['identitySource'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-authorizers-alpha.WebSocketLambdaAuthorizerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.WebSocketLambdaAuthorizerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_authorizers_alpha from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst webSocketLambdaAuthorizerProps: apigatewayv2_authorizers_alpha.WebSocketLambdaAuthorizerProps = {\n  authorizerName: 'authorizerName',\n  identitySource: ['identitySource'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "b48cee2152f05ea849c9d811c92ab46a9685e01d108d7b8089b67ebed211a0a2"
    }
  }
}
